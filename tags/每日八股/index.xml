<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>每日八股 on GAJ-Blog</title>
        <link>https://example.com/tags/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/</link>
        <description>Recent content in 每日八股 on GAJ-Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>gajzj</copyright>
        <lastBuildDate>Sat, 09 Nov 2024 16:02:00 +0800</lastBuildDate><atom:link href="https://example.com/tags/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>每日八股</title>
        <link>https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/</link>
        <pubDate>Sat, 09 Nov 2024 16:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/</guid>
        <description>&lt;h1 id=&#34;每日八股&#34;&gt;每日八股
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本文档只记录答题思路，旨在当面试时遇到时能快速切入重点，然后灵活的组织语言回答问题。同时，为了回答的流畅性，应当尽可能的学会怎么读这些英文单词，用英文表达&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;day1&#34;&gt;day1
&lt;/h2&gt;&lt;h3 id=&#34;q1微服务你用到了那些中间件&#34;&gt;Q1：微服务你用到了那些中间件
&lt;/h3&gt;&lt;p&gt;这张图的演变能非常好的描述我们单体结构向微服务转变过程&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241109150514024.png&#34;
	width=&#34;1407&#34;
	height=&#34;532&#34;
	srcset=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241109150514024_hu3403548323223964474.png 480w, https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241109150514024_hu7738992844842760827.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241109150514024&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;264&#34;
		data-flex-basis=&#34;634px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果可以，请从&lt;strong&gt;单体向微服务架构转变&lt;/strong&gt;的思路来回答每个中间件对应的职责（跟面试官说你在公司经历过单体项目向微服务转型的过程，希望以此出发展开回答）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;单体的耦合度太高，同时无法很好的承载高并发，简单的水平拓展成本过高（也不治本），需要&lt;strong&gt;拆分服务&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;而服务与服务之间需要远程调用，需要统一的&lt;strong&gt;注册中心和配置中心&lt;/strong&gt;（人工维护太繁琐）&lt;/li&gt;
&lt;li&gt;服务于服务之间的调用，并不必须同步，可以采取引入&lt;strong&gt;消息队列&lt;/strong&gt;完成异步调用&lt;/li&gt;
&lt;li&gt;用户的请求需要统一的服务网关来路由（注意这里路由是个动词），以及负载均衡&lt;/li&gt;
&lt;li&gt;服务集群的增长，带来了更多的数据，对我们的数据、缓存有更高的挑战，所以需要&lt;strong&gt;分布式缓存、分库分表、分布式搜索&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;集群规模增大带来，debug不局限于某一台服务，需要&lt;strong&gt;分布式日志服务&lt;/strong&gt;和&lt;strong&gt;系统监控链路追踪&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;引入自动化部署（DevOps）来做到持续开发、持续交付，降低部署维护成本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有了演变过程，哪些中间件做哪些事情，自然就有了答案&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;思考一个问题：假如一个交易平台对于订单需要严格的排序，需要一个定序系统来生产一个全局唯一的序列号，请问这种情况时候还能做水平拓展？如何容灾？&lt;a class=&#34;link&#34; href=&#34;https://liaoxuefeng.com/books/java/springcloud/sequence/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;设计定序系统 - Java教程 - 廖雪峰的官方网站 (liaoxuefeng.com)&lt;/a&gt;（看文末的**如何在定序器崩溃后自动恢复？**问题，拓展抢锁）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q2nacos注册中心的心跳机制&#34;&gt;Q2：Nacos注册中心的心跳机制
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;注册中心、心跳检测（ping pong）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每个加入nacos的服务都会&lt;strong&gt;注册自己信息&lt;/strong&gt;以及&lt;strong&gt;定时拉取服务列表&lt;/strong&gt;（why？for rpc）&lt;/p&gt;
&lt;p&gt;注册到nacos的服务以及nacos本身都需要通过主动或者被动的方式维持自己的存活（&lt;strong&gt;主动上报或是主动询问&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;类似场景拓展：&lt;a class=&#34;link&#34; href=&#34;https://developer.kookapp.cn/doc/websocket&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Websocket (kookapp.cn)&lt;/a&gt;（看连接流程、重连、连接流程示意图即可）&lt;/p&gt;
&lt;h3 id=&#34;q3常见的负载均衡算法&#34;&gt;Q3：常见的负载均衡算法
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;轮询、权重、响应时间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q4threadlocal&#34;&gt;Q4：ThreadLocal
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;看成一个&lt;strong&gt;全局&lt;code&gt;Map&amp;lt;Thread, Object&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;线程池复用&lt;/strong&gt;会带来污染&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spring是否也需要&lt;/strong&gt;考虑相关问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;基本概念&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实际上，可以把&lt;code&gt;ThreadLocal&lt;/code&gt;看成一个&lt;strong&gt;全局&lt;code&gt;Map&amp;lt;Thread, Object&amp;gt;&lt;/code&gt;&lt;/strong&gt;：每个线程获取&lt;code&gt;ThreadLocal&lt;/code&gt;变量时，总是&lt;strong&gt;使用&lt;code&gt;Thread&lt;/code&gt;自身作为key&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;因此，&lt;code&gt;ThreadLocal&lt;/code&gt;相当于给每个线程都开辟了一个独立的存储空间（上下文语境，学点高级词汇），各个线程的&lt;code&gt;ThreadLocal&lt;/code&gt;关联的实例互不干扰。&lt;/p&gt;
&lt;p&gt;最后，特别注意&lt;code&gt;ThreadLocal&lt;/code&gt;一定要在&lt;code&gt;finally&lt;/code&gt;中remove！！！！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拓展（问就是看过了SpringMVC源码）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;清除非常重要，为什么？&lt;strong&gt;线程池复用&lt;/strong&gt;会带来污染&lt;/p&gt;
&lt;p&gt;再想一个问题，我们有这样的问题需要使用ThreadLocal，&lt;strong&gt;Spring是否也需要&lt;/strong&gt;？结合SpringMVC执行流程&lt;/p&gt;
&lt;p&gt;SpringMVC把每一个请求交给一个独立的线程处理，内部同样用到了线程池、ThreadLocal。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DispatcherServlet和RequestContextHolder&lt;/strong&gt;（注意context这个单词，就是内容或则说上下文的意思）&lt;/p&gt;
&lt;p&gt;RequestContextHolder会存储请求和响应的相关消息，也就是一个请求的上下文，所以毫无疑问SpringMVC同样有使用到ThreadLocal&lt;/p&gt;
&lt;h3 id=&#34;q5聚集索引和非聚集索引&#34;&gt;Q5：聚集索引和非聚集索引
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;数据和索引在一起存储&lt;/p&gt;
&lt;p&gt;数据和索引不在一起&lt;/p&gt;
&lt;p&gt;主动提及回表查询和覆盖查询、索引的维护有代价&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q6如何定位慢查询&#34;&gt;Q6：如何定位慢查询
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;注意慢查询和慢sql&lt;/p&gt;
&lt;p&gt;前端：静态资源丢失&lt;/p&gt;
&lt;p&gt;后端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;redis缓存&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MQ积压&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据库：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;慢日志&lt;/li&gt;
&lt;li&gt;explain
&lt;ul&gt;
&lt;li&gt;key&lt;/li&gt;
&lt;li&gt;key_length&lt;/li&gt;
&lt;li&gt;rows&lt;/li&gt;
&lt;li&gt;extra&lt;/li&gt;
&lt;li&gt;type&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主动提及索引失效的场景&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/968f19d0cd15f17a0275011cd61d40f.png&#34;
	width=&#34;1043&#34;
	height=&#34;655&#34;
	srcset=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/968f19d0cd15f17a0275011cd61d40f_hu3319291941357880734.png 480w, https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/968f19d0cd15f17a0275011cd61d40f_hu4864076192576903339.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;968f19d0cd15f17a0275011cd61d40f&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;382px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;q7java的map&#34;&gt;Q7：Java的Map
&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基本&lt;/p&gt;
&lt;p&gt;HashMap的七七八八，你们懂的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拓展&lt;/p&gt;
&lt;p&gt;HashMap/WeakHashMap优化枚举类预加载（弱引用、垃圾回收器）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里讲讲HashMap/WeakHashMap优化枚举类预加载&lt;/p&gt;
&lt;p&gt;首先，我们使用枚举类往往无法避免valueOf()操作，但这个操作是O(n)的，对这个操作非常常见的优化就是通过static静态代码块在类加载的时候把它们加载到一个Map中，也就是缓存，可以优化查找速度到O(1)。&lt;/p&gt;
&lt;p&gt;用WeakHashMap的原因，就是为了避免OOM（以及把面试官往JVM引导）&lt;/p&gt;
&lt;h2 id=&#34;day2&#34;&gt;day2
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;今天务必要去看一看JVM（看看，挑简单的记，复杂的记大纲），后面的时间可能很难沉下心来去理解，JVM重点关注内存模型和垃圾回收器&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://liaoxuefeng.com/books/java/design-patterns/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;设计模式 - Java教程 - 廖雪峰的官方网站 (liaoxuefeng.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://refactoringguru.cn/design-patterns/factory-method&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;工厂方法设计模式 (refactoringguru.cn)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q1gataway实现原理&#34;&gt;Q1：GataWay实现原理
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;GataWay三大作用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路由（网关就是看门老大爷）、负载（分清楚网关负载和服务调用负载的区别）、拦截（注意拦截范围和之前的拦截器更大）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现原理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring WebFlux、Netty（和传统Servlet有什么区别）&lt;/li&gt;
&lt;li&gt;结合作用讲请求到网关到具体的服务的流程&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;q2你们项目中的远程调用用的什么技术&#34;&gt;Q2：你们项目中的远程调用用的什么技术
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;务必理解当前我们的远程调用就是http请求，那么对于一个http请求我们需要封装交给httpClient发送请求并接收响应&lt;/p&gt;
&lt;p&gt;这种调用往往是同步的，我们还会需要消息队列来达成一些异步调用的操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;openFeign、底层是http客户端、dubbo&lt;/p&gt;
&lt;h3 id=&#34;q3jvm的组成&#34;&gt;Q3：JVM的组成
&lt;/h3&gt;&lt;h3 id=&#34;q4类加载机制&#34;&gt;Q4：类加载机制
&lt;/h3&gt;&lt;h3 id=&#34;q5垃圾回收器有哪些你们项目用的是什么&#34;&gt;Q5：垃圾回收器有哪些，你们项目用的是什么
&lt;/h3&gt;&lt;h3 id=&#34;q6jvm内存模型&#34;&gt;Q6：JVM内存模型
&lt;/h3&gt;&lt;h2 id=&#34;day3&#34;&gt;day3
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;看设计模式，有时间看看springMVC源码&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://liaoxuefeng.com/books/java/web/mvc-adv/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MVC高级开发 - Java教程 - 廖雪峰的官方网站 (liaoxuefeng.com)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
