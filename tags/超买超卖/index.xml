<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>超买超卖 on GAJ-Blog</title>
        <link>https://example.com/tags/%E8%B6%85%E4%B9%B0%E8%B6%85%E5%8D%96/</link>
        <description>Recent content in 超买超卖 on GAJ-Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>gajzj</copyright>
        <lastBuildDate>Fri, 15 Nov 2024 18:02:00 +0800</lastBuildDate><atom:link href="https://example.com/tags/%E8%B6%85%E4%B9%B0%E8%B6%85%E5%8D%96/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>优惠卷</title>
        <link>https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/</link>
        <pubDate>Fri, 15 Nov 2024 18:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/</guid>
        <description>&lt;h1 id=&#34;优惠卷&#34;&gt;优惠卷
&lt;/h1&gt;&lt;h1 id=&#34;涉及缓存预热定时任务超卖lua库存同步&#34;&gt;（涉及缓存预热、定时任务、超卖、lua、库存同步）
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;为了讲明白优惠卷这个模块，首先要搞懂优惠卷的管理，然后才是优惠卷的领取、派发、核销（资源的产出、分配、消耗）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先明确一个概念，优惠卷是一种营销活动，活动都应该有开始、结束时间。&lt;/p&gt;
&lt;h2 id=&#34;优惠卷管理&#34;&gt;优惠卷管理
&lt;/h2&gt;&lt;p&gt;运营人员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加优惠卷活动&lt;/li&gt;
&lt;li&gt;修改优惠卷活动&lt;/li&gt;
&lt;li&gt;撤销优惠卷活动&lt;/li&gt;
&lt;li&gt;优惠卷统计等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据流&#34;&gt;数据流
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;优惠卷活动表&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录优惠卷活动信息，运营人员新增优惠卷活动写入此表&lt;/li&gt;
&lt;li&gt;关键字段
&lt;ul&gt;
&lt;li&gt;活动id&lt;/li&gt;
&lt;li&gt;活动名称&lt;/li&gt;
&lt;li&gt;优惠卷类型&lt;/li&gt;
&lt;li&gt;类型：满减、折扣&lt;/li&gt;
&lt;li&gt;发放时间&lt;/li&gt;
&lt;li&gt;状态：待生效、进行中、已失效、作废&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;优惠卷表&lt;/strong&gt;（记录用户和优惠卷的关联，存在数量限制）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录用户领取的优惠卷，每个用户每种优惠卷只能领取一张，优惠卷总数不能超过库存&lt;/li&gt;
&lt;li&gt;关键字段（这张表的主键是id代表优惠卷id）
&lt;ul&gt;
&lt;li&gt;用户id&lt;/li&gt;
&lt;li&gt;活动id&lt;/li&gt;
&lt;li&gt;折扣&lt;/li&gt;
&lt;li&gt;优惠卷类型&lt;/li&gt;
&lt;li&gt;有效期&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;优惠卷核销表&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录用户成功使用优惠卷的记录
&lt;ul&gt;
&lt;li&gt;关键字段
&lt;ul&gt;
&lt;li&gt;用户id&lt;/li&gt;
&lt;li&gt;优惠卷id&lt;/li&gt;
&lt;li&gt;订单id&lt;/li&gt;
&lt;li&gt;核销时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;优惠卷退回表&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户取消订单会退回优惠卷，则向退回表添加记录并在核销表删除表示取消核销&lt;/li&gt;
&lt;li&gt;关键字段
&lt;ul&gt;
&lt;li&gt;用户id&lt;/li&gt;
&lt;li&gt;优惠卷id&lt;/li&gt;
&lt;li&gt;退回时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;相关接口&#34;&gt;相关接口
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;新增优惠卷活动&lt;/li&gt;
&lt;li&gt;查询优惠卷活动&lt;/li&gt;
&lt;li&gt;修改优惠卷活动查询领取记录&lt;/li&gt;
&lt;li&gt;撤销活动&lt;/li&gt;
&lt;li&gt;自动变更活动状态（运营端）
&lt;ul&gt;
&lt;li&gt;定时任务每分钟执行一次（这里要求时效性要高）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;卷包：c端展示用户抢到的优惠卷
&lt;ul&gt;
&lt;li&gt;定时任务每小时执行一次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;用户抢卷&#34;&gt;用户抢卷
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用户查询活动相关情况&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;（&lt;strong&gt;开始抢卷&lt;/strong&gt;）到了优惠卷发放时间用户进行抢卷&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;抢卷过程中&lt;/strong&gt;对优惠卷库存、对用户领取数量进行校验&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;抢卷成功&lt;/strong&gt;记录用户领取记录&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;c端查询活动&#34;&gt;C端查询活动
&lt;/h3&gt;&lt;p&gt;高并发，需要使用缓存，必须要考虑缓存一致性，防止缓存击穿&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241115211531775.png&#34;
	width=&#34;869&#34;
	height=&#34;250&#34;
	srcset=&#34;https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241115211531775_hu6940586824826391862.png 480w, https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241115211531775_hu2572717479316556044.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241115211531775&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;347&#34;
		data-flex-basis=&#34;834px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;通过引入&lt;strong&gt;俩个定时任务&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定时更新活动状态：一分钟执行一次，存在一分钟的变更延迟&lt;/li&gt;
&lt;li&gt;定时扫表预热活动：
&lt;ul&gt;
&lt;li&gt;预热进行中还未结束的活动&lt;/li&gt;
&lt;li&gt;预热一个月内待开始的活动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;定时任务存在活动状态转变的变更延迟如何解决&#34;&gt;定时任务存在活动状态转变的变更延迟，如何解决：
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;前端根据开始时间倒计时，达到时间就&lt;strong&gt;移到&lt;/strong&gt;进行中界面&lt;/li&gt;
&lt;li&gt;然后请求后端时判断状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;超卖问题&#34;&gt;超卖问题
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241116094515648.png&#34;
	width=&#34;725&#34;
	height=&#34;723&#34;
	srcset=&#34;https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241116094515648_hu17437810145320655254.png 480w, https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241116094515648_hu17704089551317386611.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241116094515648&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;线程2更新&lt;strong&gt;覆盖&lt;/strong&gt;了线程1更新的库存值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;悲观锁：用synchronized、ReentrantLock、数据库的排他锁（for update）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;乐观锁：update 表名 set 字段=值,version=version+1 where  id =? and version =?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;redis分布式锁方案：每个jvm的线程都去争抢同一个分布式锁，扣减库存先获取分布式锁，拿到锁再扣减库存，然后再释放锁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;redis原子操作方案：避免申请锁与释放锁的交互&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用redis的decr命令扣减库存，redis的命令具有原子性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/1709697721665-58a02af7-7a0f-4ffa-a2aa-9253b33c1f86.png&#34;
	width=&#34;811&#34;
	height=&#34;463&#34;
	srcset=&#34;https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/1709697721665-58a02af7-7a0f-4ffa-a2aa-9253b33c1f86_hu7648951743567544303.png 480w, https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/1709697721665-58a02af7-7a0f-4ffa-a2aa-9253b33c1f86_hu11678255789925416637.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;whiteboard_exported_image (77).png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;175&#34;
		data-flex-basis=&#34;420px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;redis原子操作方案&#34;&gt;Redis原子操作方案
&lt;/h3&gt;&lt;p&gt;在这个扣减库存的流程中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先查询库存&lt;/li&gt;
&lt;li&gt;判断库存大小，如果大于0则扣减库存，否则直接返回&lt;/li&gt;
&lt;li&gt;记录抢卷成功的记录，用于判断用户不能重复抢卷的依据&lt;/li&gt;
&lt;li&gt;记录抢卷同步的记录，用于后续的异步操作，将结果保存到数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述操作必须保证1、2、3放在一起整体有原子性&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MULTI事务命令&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MULTI命令&lt;/strong&gt;标记一个事务块的开始&lt;/li&gt;
&lt;li&gt;然后将要执行的命令加入队列&lt;/li&gt;
&lt;li&gt;最后&lt;strong&gt;EXEC执行&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;multi不适合复杂的逻辑判断，它只会在所有命令执行完后拿到结果，不适合带业务逻辑判断&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;pipeline管道命令只是把多个redis指令一起发出去，减少往返时间，但不保证这些指令的原子性&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;redis+lua实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;lua脚本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有三个key
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;抢卷同步队列、资源库存、抢卷成功列表&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在redis集群环境下执行lua脚本要求多个key&lt;strong&gt;必须落在一个插槽上&lt;/strong&gt;，所以用{相同内容}来保证这三个key留在一个redis上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;俩个参数
&lt;ul&gt;
&lt;li&gt;活动id、用户id&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;先在成功列表查询用户是否已经抢过该优惠卷，抢过则直接返回&lt;/li&gt;
&lt;li&gt;在库存资源判断对应的活动id的库存是否充足超买问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;抢卷整体方案&#34;&gt;抢卷整体方案
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;定时任务预热活动数据到redis&lt;/li&gt;
&lt;li&gt;用户抢卷执行lua脚本，原子操作&lt;/li&gt;
&lt;li&gt;抢卷结果异步地同步到mysql，同步完成删除redis的同步队列记录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2024/png/1169676/1709713832302-15dee1ad-702f-427c-8e99-0359acbbb740.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_57%2Ctext_5rK554K45bCP5rOi%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fformat%2Cwebp%2Fresize%2Cw_750%2Climit_0&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;whiteboard_exported_image (78).png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;抢卷结果同步将redis结果同步到mysql&#34;&gt;抢卷结果同步（将redis结果同步到mysql）
&lt;/h2&gt;&lt;h3 id=&#34;基本思路&#34;&gt;基本思路
&lt;/h3&gt;&lt;p&gt;在抢卷的lua脚本中已经完成了同步队列的写入，同步要做的就是从redis中取出然后插入到mysql，最后删除redis对应的数据（双写一致）。&lt;/p&gt;
&lt;p&gt;性能？&lt;/p&gt;
&lt;p&gt;同步队列的key为：QUEUE:COUPON:SEIZE:SYNC:{活动id % 10}，&lt;strong&gt;最多有10个同步队列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用多线程每个线程处理一个同步队列（也可以做负载均衡给其他的优惠卷服务器，本案例中使用的是多线程处理）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何批量从redis中取数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;redisTemplate.opsForHash().scan(H key, ScanOptions options)&lt;/code&gt;scan方法通过游标的方式实现从hash中批量获取数据（批处理减少了往返时间）&lt;/p&gt;
&lt;h3 id=&#34;redisson分布式锁&#34;&gt;Redisson分布式锁
&lt;/h3&gt;&lt;p&gt;假如同步队列1中数据很多，定时任务第二轮调用的时候线程1还在处理队列1，但第二轮开始又会从同步队列1开始分配线程去处理，此时会导致**多个线程处理同一个队列的数据，造成重复&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原生的redis加锁存在：超时、误删、业务续期的问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;误删&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SET lock thread1 NX EX 10&lt;/p&gt;
&lt;p&gt;写入锁的时候将线程存入value，然后在删除锁的时候判断标识是否为当前线程&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;超时释放&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;即使删除锁的时候判断，仍然会存在判断之后发生阻塞，导致超时释放，醒来后又再次误释放了&lt;/p&gt;
&lt;h4 id=&#34;误删的原因&#34;&gt;误删的原因
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;超时释放（必须做，不然会死锁宕机）&lt;/li&gt;
&lt;li&gt;判断锁标识、删除锁俩个动作不是原子操作（读 - 写只要分开，高并发场景下就一定有问题）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Redission分布式锁框架&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用tryLock方法，传递三个参数
&lt;ul&gt;
&lt;li&gt;waitTime&lt;/li&gt;
&lt;li&gt;leaseTime&lt;/li&gt;
&lt;li&gt;TimeUnit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tryLock方法返回值
&lt;ul&gt;
&lt;li&gt;true&lt;/li&gt;
&lt;li&gt;false&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;释放锁
&lt;ul&gt;
&lt;li&gt;在try里执行tryLock，finally中释放锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;看门狗机制&#34;&gt;看门狗机制
&lt;/h4&gt;&lt;p&gt;避免任务执行时间超过锁自动释放的时间时，&lt;strong&gt;锁释放了但任务还没有结束&lt;/strong&gt;，有新的线程去获取锁。&lt;/p&gt;
&lt;p&gt;看门狗机制就是用于监测和维护锁的超时时间，确保任务执行完之前对锁自动续期。（存在问题，一直自动续期就成死锁了）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;看门狗首先判断锁是否存在&lt;/li&gt;
&lt;li&gt;不存在将不续期，程序执行unlock()时会将它的延迟任务取消，此时看门狗线程结束任务&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据同步组件以后看&#34;&gt;数据同步组件（以后看）
&lt;/h3&gt;&lt;h2 id=&#34;优惠卷核销&#34;&gt;优惠卷核销
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;下单时使用优惠卷，标记已使用或作废&lt;/li&gt;
&lt;li&gt;取消订单回退优惠卷&lt;/li&gt;
&lt;li&gt;使用优惠卷时查询可以使用的优惠卷列表
&lt;ul&gt;
&lt;li&gt;属于当前用户&lt;/li&gt;
&lt;li&gt;订单金额满足优惠卷的使用去接&lt;/li&gt;
&lt;li&gt;优惠卷没有过期、没有使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;获取可用优惠卷&#34;&gt;获取可用优惠卷
&lt;/h3&gt;&lt;p&gt;调用链的编排&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241121092240784.png&#34;
	width=&#34;1009&#34;
	height=&#34;299&#34;
	srcset=&#34;https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241121092240784_hu16346397756503986477.png 480w, https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241121092240784_hu17923476262536255860.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241121092240784&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;337&#34;
		data-flex-basis=&#34;809px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241121092222535.png&#34;
	width=&#34;974&#34;
	height=&#34;185&#34;
	srcset=&#34;https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241121092222535_hu8437825210757368541.png 480w, https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241121092222535_hu7963896890833799704.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241121092222535&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;526&#34;
		data-flex-basis=&#34;1263px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最终决定是否给用户优惠的是订单服务&lt;/strong&gt;，所以应该由订单发起&lt;/p&gt;
&lt;p&gt;具体逻辑较为繁琐，反正就是从数据库取出可以使用的优惠卷，用户选完之后判断优惠金额，满减的和折扣的&lt;/p&gt;
&lt;h3 id=&#34;优惠卷核销-1&#34;&gt;优惠卷核销
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241121093153982.png&#34;
	width=&#34;965&#34;
	height=&#34;712&#34;
	srcset=&#34;https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241121093153982_hu526413733025393269.png 480w, https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241121093153982_hu12616436777187240555.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241121093153982&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;135&#34;
		data-flex-basis=&#34;325px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;数据流&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2024/png/1169676/1709717251919-097417e0-5f91-47d9-8e55-dcf23f981986.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_60%2Ctext_5rK554K45bCP5rOi%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fformat%2Cwebp%2Fresize%2Cw_937%2Climit_0&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正向和逆向&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;分布式事务&#34;&gt;分布式事务
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;本地事务&lt;/li&gt;
&lt;li&gt;分布式事务
&lt;ul&gt;
&lt;li&gt;跨服务&lt;/li&gt;
&lt;li&gt;跨数据源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下单时核销优惠卷为例，订单服务&lt;strong&gt;先&lt;/strong&gt;向优惠卷发起核销请求，核销成功后&lt;strong&gt;再&lt;/strong&gt;写入订单。但假如优惠卷核销成功，但之后订单服务发生异常导致订单回滚，优惠卷实际上没有回滚，需要&lt;strong&gt;通过分布式事务来控制二者统一回滚&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;事务特性&lt;strong&gt;ACID&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A：原子性&lt;/li&gt;
&lt;li&gt;C：一致性&lt;/li&gt;
&lt;li&gt;I：隔离性&lt;/li&gt;
&lt;li&gt;D：持久性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cap原理&#34;&gt;CAP原理
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;C：一致性&lt;/li&gt;
&lt;li&gt;A：可用性&lt;/li&gt;
&lt;li&gt;P：分区容错性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CAP三点无法同时满足、默认满足P分布式容错&lt;/p&gt;
&lt;h1 id=&#34;相关问题&#34;&gt;相关问题
&lt;/h1&gt;&lt;h2 id=&#34;q1如果我要优惠卷折扣或满减是分阶段的怎么办&#34;&gt;Q1：如果我要优惠卷折扣或满减是分阶段的怎么办
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;我的天功能都写好了，产品突然变更需求一下子干蒙了；想起资源控制里在资源表里维护树形结构，于是在这里我们在活动表中维护链表结构来满足阶段性折扣，&lt;strong&gt;只多了一个字段的代价，非常的划算&lt;/strong&gt;（当然也可以再多一张表做关联也行，这样减少了活动表的数据量，也很不错）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们功能都实现了，但是需求有变更，那可以这么处理&lt;/p&gt;
&lt;p&gt;这里必须要做优惠卷活动表字段的变动，增加一个字段&lt;strong&gt;存储优惠卷活动的id&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;即：阶段性折扣的优惠卷活动变成了&lt;strong&gt;链型存储&lt;/strong&gt;（可以都存根id，根id存1表示为根活动，存0则表示这个活动不是根活动（是一个普通），存某一个活动的id则表示是该id活动的&lt;strong&gt;子活动&lt;/strong&gt;），即一个活动包含子活动（对用户子活动无感知，我们只展示根活动）&lt;/p&gt;
&lt;p&gt;（可以子节点统一储存根结点，也可以存储上一个阶段结点，应该还是统一存根好，可以一次查询取出）&lt;/p&gt;
&lt;p&gt;然后前端的请求增加一个字段表示当前添加的活动是普通优惠卷活动还是分阶段的优惠卷活动，controller层做区分，service写多一个方法即可&lt;/p&gt;
&lt;p&gt;还有一个问题待解决，这里我们活动表做了链型结构，但优惠卷表还是只存一个记录的（一个优惠卷哪怕分阶段也是一次性用完的），所以其他的相关操作大致不需要改变，就只需要在订单&lt;strong&gt;计算优惠金额的时候加上分阶段计算的逻辑&lt;/strong&gt;即可&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;或者还有一个无痛的处理方式，就是抢到分阶段的优惠卷时自动追加发放分级优惠卷，但这样观感是在太差了，毫无疑问的垃圾方案&lt;/p&gt;
&lt;p&gt;而且还是没解决分段折扣如何存储的问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;当然也可以把这个分阶段的需求拆分，就类似京东的分阶段优惠它其实不是靠优惠卷机制，而是另外的，需要和产品沟通&lt;/p&gt;
&lt;p&gt;但存在一个问题，如果这个分阶段折扣或满减也是需要抢的，会存在大量的逻辑重复，和优惠卷整体太过相似，还不如多维护一个字段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;总之，只靠多维护一个字段的代价，避免了产品设计的变更、避免了高度重复的功能代码、避免了更大范围的数据表结构变化&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;q2定时更新活动状态任务执行频次高且如果根据q1的表结构活动表将是一个数据量较大的表可能会出现定时任务执行时间相对较长的情况其实小电商平台里基本不可能出现&#34;&gt;Q2：定时更新活动状态任务执行频次高，且如果根据Q1的表结构活动表将是一个数据量较大的表，可能会出现定时任务执行时间相对较长的情况（其实小电商平台里基本不可能出现）
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;前端倒计时+后端根据时间判断状态其实已经可以接受了&lt;/p&gt;
&lt;p&gt;但仍可以参考&lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/7339742783236702271&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;半小时到秒级，京东零售定时任务优化怎么做的？本文通过一个真实的线上案例总结了针对海量数据批处理任务的一些通用优化方法，除 - 掘金 (juejin.cn)&lt;/a&gt;多说些，因为&lt;strong&gt;一个健康的系统是不允许cpu常态占用高的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定位问题：任务执行时间长且CPU利用率高&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;q3是否有高负载的风险&#34;&gt;Q3：是否有高负载的风险？
&lt;/h2&gt;&lt;p&gt;当前抢卷是交由redis集群处理，对于优惠卷管理、结果同步到mysql是优惠卷服务器做的，相对来说热点事件做了分离，不容易产生高负载。并且对于整个抢卷模块来说，优先增加的是redis集群的机器（要应对高峰期的用户抢卷请求），因为redis是用来消费这些抢卷请求的，服务器本身只是做个请求转发，抢卷处理逻辑在redis，所以对于服务器的cpu负载是不高的（抢卷这里对优惠卷服务器是网络IO密集），但仍需要注意OOM，同时要考虑将优惠卷服务器和redis客户端luttce解耦，用异步回调的方式&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
