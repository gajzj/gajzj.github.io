<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on GAJ-Blog</title>
        <link>https://example.com/post/</link>
        <description>Recent content in Posts on GAJ-Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>gajzj</copyright>
        <lastBuildDate>Sun, 01 Dec 2024 08:02:00 +0800</lastBuildDate><atom:link href="https://example.com/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>技术方案试稿</title>
        <link>https://example.com/p/%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88%E8%AF%95%E7%A8%BF/</link>
        <pubDate>Sun, 01 Dec 2024 08:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88%E8%AF%95%E7%A8%BF/</guid>
        <description>&lt;h1 id=&#34;技术方案试稿&#34;&gt;技术方案试稿
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;统计学、正态分布、漏斗&lt;/p&gt;
&lt;p&gt;改方案自定语言：&lt;/p&gt;
&lt;p&gt;迷彩、注册机&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;初稿&#34;&gt;初稿
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;24.11.30&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;数字大屏，实时监控，不依赖上游用户的页面请求&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88%E8%AF%95%E7%A8%BF/index.assets/%E7%88%AC%E5%8F%96%E7%BD%91%E7%AB%99%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88.png&#34;
	width=&#34;1229&#34;
	height=&#34;1150&#34;
	srcset=&#34;https://example.com/p/%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88%E8%AF%95%E7%A8%BF/index.assets/%E7%88%AC%E5%8F%96%E7%BD%91%E7%AB%99%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88_hu10925659010043558619.png 480w, https://example.com/p/%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88%E8%AF%95%E7%A8%BF/index.assets/%E7%88%AC%E5%8F%96%E7%BD%91%E7%AB%99%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88_hu14283761237711050546.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;爬取网站信息技术方案&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;106&#34;
		data-flex-basis=&#34;256px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;方案详情&#34;&gt;方案详情
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;MQ做用户请求的削峰填谷&lt;/li&gt;
&lt;li&gt;client拦截器用漏斗做限流&lt;/li&gt;
&lt;li&gt;redis存用户列表&lt;/li&gt;
&lt;li&gt;触发账号切换的时机&lt;/li&gt;
&lt;li&gt;针对反爬机制
&lt;ul&gt;
&lt;li&gt;用户行为伪装&lt;/li&gt;
&lt;li&gt;多用户切换反用户追踪
&lt;ul&gt;
&lt;li&gt;切换时机
&lt;ul&gt;
&lt;li&gt;随机值触发用户&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通过IP代理反IP追踪&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;疑问&#34;&gt;疑问
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;拦截器内部如何实现限流、是否会和MQ的限流重叠&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多个client资源耗用较大，是否能够存在单个client也能做到多个代理IP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;增强&lt;strong&gt;迷彩&lt;/strong&gt;强度&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进一步增加假用户数量，通过自动化&lt;strong&gt;注册机&lt;/strong&gt;为系统输入更多账户&lt;/li&gt;
&lt;li&gt;随机时间触发用户的强制冷却&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;获取汇总信息，如统计酒店数量&lt;/p&gt;
&lt;p&gt;多数据源的情况下，做&lt;strong&gt;抽样、平方和分析&lt;/strong&gt;判断抽样的置信度，借此加速多个数据源的查询&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个向量，值是正态分布的情况下，如何抽样能够保证抽样能够代表原样本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取详细信息，如&lt;/p&gt;
&lt;p&gt;不同数据源的数据可能会在格式上已经数据细节层次有较大差异，要对数据源做具体分析，来决定多数据源下展示的核心数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需要落库的数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;伪装用户列表&lt;/li&gt;
&lt;li&gt;具体统计信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;组件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;组件选取是否合理？&lt;/li&gt;
&lt;li&gt;成本？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;监控频率根据淡季、旺季会有不同&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;再版&#34;&gt;再版
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;24.12.1&lt;/p&gt;
&lt;p&gt;引入注册机、数据抽样、指数沉默&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88%E8%AF%95%E7%A8%BF/index.assets/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.png&#34;
	width=&#34;1835&#34;
	height=&#34;835&#34;
	srcset=&#34;https://example.com/p/%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88%E8%AF%95%E7%A8%BF/index.assets/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6_hu11526155016463365904.png 480w, https://example.com/p/%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88%E8%AF%95%E7%A8%BF/index.assets/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6_hu5499182868732727623.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;未命名文件&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;219&#34;
		data-flex-basis=&#34;527px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;补充点&#34;&gt;补充点
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;目标网页的响应落库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果监控数据落库可以采取canal、durid分析工具来做数据的监控展示？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;监控目标网站，已经不要直接请求目标，而是根据出入端点动态建模生成一个代理对象（更新频率3-5日）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;做好防腐&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Elasticsearch</title>
        <link>https://example.com/p/elasticsearch/</link>
        <pubDate>Mon, 18 Nov 2024 18:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/elasticsearch/</guid>
        <description>&lt;h1 id=&#34;elasticsearch&#34;&gt;Elasticsearch
&lt;/h1&gt;&lt;h2 id=&#34;elk技术栈&#34;&gt;ELK技术栈
&lt;/h2&gt;&lt;p&gt;elasticsearch结合kibana、Logstash、Beats，也就是elastic stack（ELK）。&lt;/p&gt;
&lt;h2 id=&#34;倒排索引&#34;&gt;倒排索引
&lt;/h2&gt;&lt;p&gt;对于这样的索引&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/elasticsearch/index.assets/image-20241118172118293.png&#34;
	width=&#34;438&#34;
	height=&#34;328&#34;
	srcset=&#34;https://example.com/p/elasticsearch/index.assets/image-20241118172118293_hu14248592217782362382.png 480w, https://example.com/p/elasticsearch/index.assets/image-20241118172118293_hu6810811565797171227.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241118172118293&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;如果基于title做模糊查询，只能逐行扫描，也就是全表扫描，海量数据的情况下性能非常的低。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基于倒排索引的情况&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将每一个文档的数据利用算法分词，得到词条&lt;/li&gt;
&lt;li&gt;创建表，每行数据包含词条、词条所在的文档id、位置信息&lt;/li&gt;
&lt;li&gt;因为词条唯一性，可以给词条创建索引，例如hash表结构索引&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/elasticsearch/index.assets/image-20241118173242821.png&#34;
	width=&#34;1129&#34;
	height=&#34;428&#34;
	srcset=&#34;https://example.com/p/elasticsearch/index.assets/image-20241118173242821_hu1502936773458425190.png 480w, https://example.com/p/elasticsearch/index.assets/image-20241118173242821_hu3492639432525606880.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241118173242821&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;263&#34;
		data-flex-basis=&#34;633px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;倒排索引搜索流程&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/elasticsearch/index.assets/image-20241118174052987.png&#34;
	width=&#34;1147&#34;
	height=&#34;721&#34;
	srcset=&#34;https://example.com/p/elasticsearch/index.assets/image-20241118174052987_hu13701598822929316175.png 480w, https://example.com/p/elasticsearch/index.assets/image-20241118174052987_hu10551520740203683649.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241118174052987&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;O(1)&lt;/p&gt;
</description>
        </item>
        <item>
        <title>sql调优经历</title>
        <link>https://example.com/p/sql%E8%B0%83%E4%BC%98%E7%BB%8F%E5%8E%86/</link>
        <pubDate>Sat, 16 Nov 2024 16:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/sql%E8%B0%83%E4%BC%98%E7%BB%8F%E5%8E%86/</guid>
        <description>&lt;h1 id=&#34;sql调优经历&#34;&gt;SQL调优经历
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这是一个压测环境下的调优&lt;/p&gt;
&lt;p&gt;结合了非常多的高频面试问题点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL调优&lt;/li&gt;
&lt;li&gt;线程池&lt;/li&gt;
&lt;li&gt;redis集群&lt;/li&gt;
&lt;li&gt;lua&lt;/li&gt;
&lt;li&gt;数据表设计的权衡&lt;/li&gt;
&lt;li&gt;定时任务&lt;/li&gt;
&lt;li&gt;GC&lt;/li&gt;
&lt;li&gt;一致性&lt;/li&gt;
&lt;li&gt;MQ&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;业务背景测试环境需要补充具体的数据分配&#34;&gt;业务背景（测试环境，需要补充具体的数据分配）
&lt;/h2&gt;&lt;p&gt;优惠卷活动的状态更新，这里我们有俩个定时任务（三个）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定时更新优惠卷活动的状态为进行中、结束&lt;/li&gt;
&lt;li&gt;定时扫表预热活动&lt;/li&gt;
&lt;li&gt;定时从redis取优惠卷同步数据同步数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据库&#34;&gt;数据库
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;数据表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们的优惠卷活动和别家电商的优惠卷不太一样，我们的优惠卷分为俩种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;普通满减、折扣优惠卷&lt;/li&gt;
&lt;li&gt;分阶段满减、折扣优惠卷（越买越优惠）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以这里我们的优惠卷&lt;strong&gt;存在一个关联表&lt;/strong&gt;，用于关联这种分阶段优惠的优惠阶段&lt;/p&gt;
&lt;p&gt;定位问题：优惠卷定时任务耗时长、cpu占用高的解决&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据库&lt;/strong&gt;（这个活动表不会有这么大的数据量）&lt;/p&gt;
&lt;p&gt;64分片，一主一从，分片键是活动id&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据源&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平台的优惠活动&lt;/li&gt;
&lt;li&gt;商家的店铺优惠活动&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;机器配置和垃圾回收器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;单台机器用的8C16G（相关配置需要修改）&lt;/p&gt;
&lt;p&gt;-Xms8192m -Xmx8192m -XX:MaxMetaspaceSize=1024m -XX:MetaspaceSize=1024m -XX:MaxDirectMemorySize=1966m -XX:+&lt;strong&gt;UseG1GC&lt;/strong&gt; -XX:&lt;strong&gt;MaxGCPauseMillis&lt;/strong&gt;=200 -XX:&lt;strong&gt;ParallelGCThreads&lt;/strong&gt;=8&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定时更新活动状态逻辑&lt;/strong&gt;（需要换个更复杂的场景）&lt;/p&gt;
&lt;p&gt;根据活动的状态&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将待生效的活动根据活动的时间（开始时间、结束时间）更新为进行中&lt;/li&gt;
&lt;li&gt;将待生效的、进行中的活动根据活动时间更新为结束&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;问题现象&#34;&gt;问题现象
&lt;/h2&gt;&lt;p&gt;我们的定时任务间隔一分钟，执行时间很长，40秒，cpu占用80%，虽然前端做了倒计时，但占用率太高不健康。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;按照这个问题假设估计我们数据量有可能会达到千万级&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;优化&#34;&gt;优化
&lt;/h2&gt;&lt;h3 id=&#34;s1分析数据源调大步长缩短任务执行时间&#34;&gt;S1：分析数据源，调大步长缩短任务执行时间
&lt;/h3&gt;&lt;p&gt;（一次任务中分多步处理，而不是直接全部搜出来到内存，与云岚存在差异）&lt;/p&gt;
&lt;p&gt;数据源表里数据非常稀疏&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序问题：（落入了别的来源的数据）&lt;/li&gt;
&lt;li&gt;历史问题：（）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以为了避免每次处理的数据较少，调大了步长，避免空跑&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;阶段性结果&lt;/strong&gt;执行时间减少到了30秒（假设），但cpu顶着100%跑&lt;/p&gt;
&lt;h3 id=&#34;s2减少临时对象大小和无效日志避免ygc&#34;&gt;S2：减少临时对象大小和无效日志，避免ygc
&lt;/h3&gt;&lt;p&gt;想法：对事务总线负载（mq）到多台机器，但耗费资源&lt;/p&gt;
&lt;p&gt;于是我们分析cpu高在哪里，理论上这个任务是&lt;strong&gt;IO型任务&lt;/strong&gt;，cpu利用率低，仔细观察发现&lt;strong&gt;机器不断多次ygc&lt;/strong&gt;。G1的ygc比1.8的默认回收期更耗资源（G1要兼顾mixgc回收）。我们这的任务其实更适合用默认的垃圾回收器（Parallel）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;G1用于响应优先，默认的垃圾回收器则是吞吐量优先。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么不断ygc肯定是我们&lt;strong&gt;产生了大量的临时对象导致的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）去掉无效日志&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;java在序列化的时候会产生比原来的对象占用更多内存的临时变量&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2）减少临时对象占用的内存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;代码对象的个数不能减少，于是我们减小了对象的大小，为这个定时任务写了专用的接口，每个接口&lt;strong&gt;只查我们需要的字段&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;阶段性结果&lt;/strong&gt;时间减少到了10秒（假设），cpu降到50%&lt;/p&gt;
&lt;p&gt;但每次任务执行，都给数据库带来了&lt;strong&gt;很高的qpm增长，有隐患&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;问题待解决&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减少交互次数&lt;/li&gt;
&lt;li&gt;降低任务执行时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;仍有很大的优化空间&lt;/p&gt;
&lt;h3 id=&#34;s3基于游标查询数据源数据库分片批量更新降低交互次数避免空跑&#34;&gt;S3：基于游标查询数据源，数据库分片批量更新，降低交互次数，避免空跑
&lt;/h3&gt;&lt;p&gt;分析这么大的调用量用在了哪里，发现：活动表的&lt;strong&gt;MaxAutoPk非常大&lt;/strong&gt;（10亿，太夸张了这个场景根本不能满足），所以即使调大了步长，交互次数仍然很多，&lt;strong&gt;继续调大步长会导致某个数据密集导致负载不均衡&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）使用mysql的游标查询&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表中要有唯一键，且基于唯一键查询排序（升序）&lt;/li&gt;
&lt;li&gt;取件查询满足查询条件记录越稀疏越有效&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;（2）深度分页引起慢sql&lt;/strong&gt;基于游标查询的sql不会有这个问题，每次直接定位到区间开始&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（3）按数据库分片进行批量更新&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基于游标查询导致每个步长都查出来比以前更多的数据，&lt;strong&gt;出现了长事务&lt;/strong&gt;（这里不太契合场景，可以考虑把这个优化删掉）&lt;/p&gt;
&lt;p&gt;由于在批量更新的时候&lt;strong&gt;没有带分片键导致sql分发到了所有分片上&lt;/strong&gt;， &lt;strong&gt;实际导致了长事务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;于是我们&lt;strong&gt;按数据库分片对这些活动id进行分组&lt;/strong&gt;，保证每个分组对应的单元id落到同一个分片（不太理解，是不是类似redis的hash插槽，让我们优惠卷的三个key落到一个redis结点，这里让对应的ids落到对应的数据库分片）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;结合优惠卷同步的来讲&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;阶段性结果&lt;/strong&gt;时间2秒，cpu50%。qpm降了很多&lt;/p&gt;
&lt;p&gt;问题&lt;/p&gt;
&lt;p&gt;cpu还是较高&lt;/p&gt;
&lt;h3 id=&#34;s4异构数据源做了冗余当前的场景把关联表冗余进来绝对会更差&#34;&gt;S4：异构数据源，做了冗余（当前的场景把关联表冗余进来绝对会更差）
&lt;/h3&gt;&lt;p&gt;前面提到，分阶段优惠卷的关联关系用了一张关联表维护&lt;/p&gt;
&lt;p&gt;我们将整个管理表冗余到了活动表中，通过一种链表关系来维护分阶段的优惠活动，多了一个根活动的id，0时表示普通活动，具体id时表示对应的根活动id。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要不还是倒过来把字段冗余出去一张表，但这样也不太好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;s5负载均衡消除所有风险也可以不做&#34;&gt;S5：负载均衡，消除所有风险（也可以不做）
&lt;/h3&gt;&lt;p&gt;任务拆分，交给mq负载到多台机器上（mq重试机制不可靠，需要解决重试频率、识别无效重试、防止重试叠加）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mq的重试中，失败了只会投回队列，什么时候能再次消费不确定&lt;/p&gt;
&lt;p&gt;1、本地重试机制固定间隔重试，可以应对简单场景（也可以递增间隔重试、基于业务优先级重试）&lt;/p&gt;
&lt;p&gt;2、引入定时任务框架（Quartz、xxljob），但这里就任务套任务了不好&lt;/p&gt;
&lt;p&gt;3、结合分布式调度系统（zookeeper、etcd），利用zk的watcher机制来监控结点状态&lt;/p&gt;
&lt;p&gt;4、最终补偿机制：人工&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;优化效果汇总&#34;&gt;优化效果汇总
&lt;/h2&gt;&lt;p&gt;毫秒级，cpu占用增加1%&lt;/p&gt;
</description>
        </item>
        <item>
        <title>优惠卷</title>
        <link>https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/</link>
        <pubDate>Fri, 15 Nov 2024 18:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/</guid>
        <description>&lt;h1 id=&#34;优惠卷&#34;&gt;优惠卷
&lt;/h1&gt;&lt;h1 id=&#34;涉及缓存预热定时任务超卖lua库存同步&#34;&gt;（涉及缓存预热、定时任务、超卖、lua、库存同步）
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;为了讲明白优惠卷这个模块，首先要搞懂优惠卷的管理，然后才是优惠卷的领取、派发、核销（资源的产出、分配、消耗）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先明确一个概念，优惠卷是一种营销活动，活动都应该有开始、结束时间。&lt;/p&gt;
&lt;h2 id=&#34;优惠卷管理&#34;&gt;优惠卷管理
&lt;/h2&gt;&lt;p&gt;运营人员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加优惠卷活动&lt;/li&gt;
&lt;li&gt;修改优惠卷活动&lt;/li&gt;
&lt;li&gt;撤销优惠卷活动&lt;/li&gt;
&lt;li&gt;优惠卷统计等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据流&#34;&gt;数据流
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;优惠卷活动表&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录优惠卷活动信息，运营人员新增优惠卷活动写入此表&lt;/li&gt;
&lt;li&gt;关键字段
&lt;ul&gt;
&lt;li&gt;活动id&lt;/li&gt;
&lt;li&gt;活动名称&lt;/li&gt;
&lt;li&gt;优惠卷类型&lt;/li&gt;
&lt;li&gt;类型：满减、折扣&lt;/li&gt;
&lt;li&gt;发放时间&lt;/li&gt;
&lt;li&gt;状态：待生效、进行中、已失效、作废&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;优惠卷表&lt;/strong&gt;（记录用户和优惠卷的关联，存在数量限制）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录用户领取的优惠卷，每个用户每种优惠卷只能领取一张，优惠卷总数不能超过库存&lt;/li&gt;
&lt;li&gt;关键字段（这张表的主键是id代表优惠卷id）
&lt;ul&gt;
&lt;li&gt;用户id&lt;/li&gt;
&lt;li&gt;活动id&lt;/li&gt;
&lt;li&gt;折扣&lt;/li&gt;
&lt;li&gt;优惠卷类型&lt;/li&gt;
&lt;li&gt;有效期&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;优惠卷核销表&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录用户成功使用优惠卷的记录
&lt;ul&gt;
&lt;li&gt;关键字段
&lt;ul&gt;
&lt;li&gt;用户id&lt;/li&gt;
&lt;li&gt;优惠卷id&lt;/li&gt;
&lt;li&gt;订单id&lt;/li&gt;
&lt;li&gt;核销时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;优惠卷退回表&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户取消订单会退回优惠卷，则向退回表添加记录并在核销表删除表示取消核销&lt;/li&gt;
&lt;li&gt;关键字段
&lt;ul&gt;
&lt;li&gt;用户id&lt;/li&gt;
&lt;li&gt;优惠卷id&lt;/li&gt;
&lt;li&gt;退回时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;相关接口&#34;&gt;相关接口
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;新增优惠卷活动&lt;/li&gt;
&lt;li&gt;查询优惠卷活动&lt;/li&gt;
&lt;li&gt;修改优惠卷活动查询领取记录&lt;/li&gt;
&lt;li&gt;撤销活动&lt;/li&gt;
&lt;li&gt;自动变更活动状态（运营端）
&lt;ul&gt;
&lt;li&gt;定时任务每分钟执行一次（这里要求时效性要高）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;卷包：c端展示用户抢到的优惠卷
&lt;ul&gt;
&lt;li&gt;定时任务每小时执行一次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;用户抢卷&#34;&gt;用户抢卷
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用户查询活动相关情况&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;（&lt;strong&gt;开始抢卷&lt;/strong&gt;）到了优惠卷发放时间用户进行抢卷&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;抢卷过程中&lt;/strong&gt;对优惠卷库存、对用户领取数量进行校验&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;抢卷成功&lt;/strong&gt;记录用户领取记录&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;c端查询活动&#34;&gt;C端查询活动
&lt;/h3&gt;&lt;p&gt;高并发，需要使用缓存，必须要考虑缓存一致性，防止缓存击穿&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241115211531775.png&#34;
	width=&#34;869&#34;
	height=&#34;250&#34;
	srcset=&#34;https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241115211531775_hu6940586824826391862.png 480w, https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241115211531775_hu2572717479316556044.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241115211531775&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;347&#34;
		data-flex-basis=&#34;834px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;通过引入&lt;strong&gt;俩个定时任务&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定时更新活动状态：一分钟执行一次，存在一分钟的变更延迟&lt;/li&gt;
&lt;li&gt;定时扫表预热活动：
&lt;ul&gt;
&lt;li&gt;预热进行中还未结束的活动&lt;/li&gt;
&lt;li&gt;预热一个月内待开始的活动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;定时任务存在活动状态转变的变更延迟如何解决&#34;&gt;定时任务存在活动状态转变的变更延迟，如何解决：
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;前端根据开始时间倒计时，达到时间就&lt;strong&gt;移到&lt;/strong&gt;进行中界面&lt;/li&gt;
&lt;li&gt;然后请求后端时判断状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;超卖问题&#34;&gt;超卖问题
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241116094515648.png&#34;
	width=&#34;725&#34;
	height=&#34;723&#34;
	srcset=&#34;https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241116094515648_hu17437810145320655254.png 480w, https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241116094515648_hu17704089551317386611.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241116094515648&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;线程2更新&lt;strong&gt;覆盖&lt;/strong&gt;了线程1更新的库存值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;悲观锁：用synchronized、ReentrantLock、数据库的排他锁（for update）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;乐观锁：update 表名 set 字段=值,version=version+1 where  id =? and version =?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;redis分布式锁方案：每个jvm的线程都去争抢同一个分布式锁，扣减库存先获取分布式锁，拿到锁再扣减库存，然后再释放锁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;redis原子操作方案：避免申请锁与释放锁的交互&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用redis的decr命令扣减库存，redis的命令具有原子性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/1709697721665-58a02af7-7a0f-4ffa-a2aa-9253b33c1f86.png&#34;
	width=&#34;811&#34;
	height=&#34;463&#34;
	srcset=&#34;https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/1709697721665-58a02af7-7a0f-4ffa-a2aa-9253b33c1f86_hu7648951743567544303.png 480w, https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/1709697721665-58a02af7-7a0f-4ffa-a2aa-9253b33c1f86_hu11678255789925416637.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;whiteboard_exported_image (77).png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;175&#34;
		data-flex-basis=&#34;420px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;redis原子操作方案&#34;&gt;Redis原子操作方案
&lt;/h3&gt;&lt;p&gt;在这个扣减库存的流程中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先查询库存&lt;/li&gt;
&lt;li&gt;判断库存大小，如果大于0则扣减库存，否则直接返回&lt;/li&gt;
&lt;li&gt;记录抢卷成功的记录，用于判断用户不能重复抢卷的依据&lt;/li&gt;
&lt;li&gt;记录抢卷同步的记录，用于后续的异步操作，将结果保存到数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述操作必须保证1、2、3放在一起整体有原子性&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MULTI事务命令&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MULTI命令&lt;/strong&gt;标记一个事务块的开始&lt;/li&gt;
&lt;li&gt;然后将要执行的命令加入队列&lt;/li&gt;
&lt;li&gt;最后&lt;strong&gt;EXEC执行&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;multi不适合复杂的逻辑判断，它只会在所有命令执行完后拿到结果，不适合带业务逻辑判断&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;pipeline管道命令只是把多个redis指令一起发出去，减少往返时间，但不保证这些指令的原子性&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;redis+lua实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;lua脚本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有三个key
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;抢卷同步队列、资源库存、抢卷成功列表&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在redis集群环境下执行lua脚本要求多个key&lt;strong&gt;必须落在一个插槽上&lt;/strong&gt;，所以用{相同内容}来保证这三个key留在一个redis上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;俩个参数
&lt;ul&gt;
&lt;li&gt;活动id、用户id&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;先在成功列表查询用户是否已经抢过该优惠卷，抢过则直接返回&lt;/li&gt;
&lt;li&gt;在库存资源判断对应的活动id的库存是否充足超买问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;抢卷整体方案&#34;&gt;抢卷整体方案
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;定时任务预热活动数据到redis&lt;/li&gt;
&lt;li&gt;用户抢卷执行lua脚本，原子操作&lt;/li&gt;
&lt;li&gt;抢卷结果异步地同步到mysql，同步完成删除redis的同步队列记录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2024/png/1169676/1709713832302-15dee1ad-702f-427c-8e99-0359acbbb740.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_57%2Ctext_5rK554K45bCP5rOi%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fformat%2Cwebp%2Fresize%2Cw_750%2Climit_0&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;whiteboard_exported_image (78).png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;抢卷结果同步将redis结果同步到mysql&#34;&gt;抢卷结果同步（将redis结果同步到mysql）
&lt;/h2&gt;&lt;h3 id=&#34;基本思路&#34;&gt;基本思路
&lt;/h3&gt;&lt;p&gt;在抢卷的lua脚本中已经完成了同步队列的写入，同步要做的就是从redis中取出然后插入到mysql，最后删除redis对应的数据（双写一致）。&lt;/p&gt;
&lt;p&gt;性能？&lt;/p&gt;
&lt;p&gt;同步队列的key为：QUEUE:COUPON:SEIZE:SYNC:{活动id % 10}，&lt;strong&gt;最多有10个同步队列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用多线程每个线程处理一个同步队列（也可以做负载均衡给其他的优惠卷服务器，本案例中使用的是多线程处理）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何批量从redis中取数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;redisTemplate.opsForHash().scan(H key, ScanOptions options)&lt;/code&gt;scan方法通过游标的方式实现从hash中批量获取数据（批处理减少了往返时间）&lt;/p&gt;
&lt;h3 id=&#34;redisson分布式锁&#34;&gt;Redisson分布式锁
&lt;/h3&gt;&lt;p&gt;假如同步队列1中数据很多，定时任务第二轮调用的时候线程1还在处理队列1，但第二轮开始又会从同步队列1开始分配线程去处理，此时会导致**多个线程处理同一个队列的数据，造成重复&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原生的redis加锁存在：超时、误删、业务续期的问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;误删&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SET lock thread1 NX EX 10&lt;/p&gt;
&lt;p&gt;写入锁的时候将线程存入value，然后在删除锁的时候判断标识是否为当前线程&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;超时释放&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;即使删除锁的时候判断，仍然会存在判断之后发生阻塞，导致超时释放，醒来后又再次误释放了&lt;/p&gt;
&lt;h4 id=&#34;误删的原因&#34;&gt;误删的原因
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;超时释放（必须做，不然会死锁宕机）&lt;/li&gt;
&lt;li&gt;判断锁标识、删除锁俩个动作不是原子操作（读 - 写只要分开，高并发场景下就一定有问题）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Redission分布式锁框架&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用tryLock方法，传递三个参数
&lt;ul&gt;
&lt;li&gt;waitTime&lt;/li&gt;
&lt;li&gt;leaseTime&lt;/li&gt;
&lt;li&gt;TimeUnit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tryLock方法返回值
&lt;ul&gt;
&lt;li&gt;true&lt;/li&gt;
&lt;li&gt;false&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;释放锁
&lt;ul&gt;
&lt;li&gt;在try里执行tryLock，finally中释放锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;看门狗机制&#34;&gt;看门狗机制
&lt;/h4&gt;&lt;p&gt;避免任务执行时间超过锁自动释放的时间时，&lt;strong&gt;锁释放了但任务还没有结束&lt;/strong&gt;，有新的线程去获取锁。&lt;/p&gt;
&lt;p&gt;看门狗机制就是用于监测和维护锁的超时时间，确保任务执行完之前对锁自动续期。（存在问题，一直自动续期就成死锁了）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;看门狗首先判断锁是否存在&lt;/li&gt;
&lt;li&gt;不存在将不续期，程序执行unlock()时会将它的延迟任务取消，此时看门狗线程结束任务&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据同步组件以后看&#34;&gt;数据同步组件（以后看）
&lt;/h3&gt;&lt;h2 id=&#34;优惠卷核销&#34;&gt;优惠卷核销
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;下单时使用优惠卷，标记已使用或作废&lt;/li&gt;
&lt;li&gt;取消订单回退优惠卷&lt;/li&gt;
&lt;li&gt;使用优惠卷时查询可以使用的优惠卷列表
&lt;ul&gt;
&lt;li&gt;属于当前用户&lt;/li&gt;
&lt;li&gt;订单金额满足优惠卷的使用去接&lt;/li&gt;
&lt;li&gt;优惠卷没有过期、没有使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;获取可用优惠卷&#34;&gt;获取可用优惠卷
&lt;/h3&gt;&lt;p&gt;调用链的编排&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241121092240784.png&#34;
	width=&#34;1009&#34;
	height=&#34;299&#34;
	srcset=&#34;https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241121092240784_hu16346397756503986477.png 480w, https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241121092240784_hu17923476262536255860.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241121092240784&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;337&#34;
		data-flex-basis=&#34;809px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241121092222535.png&#34;
	width=&#34;974&#34;
	height=&#34;185&#34;
	srcset=&#34;https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241121092222535_hu8437825210757368541.png 480w, https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241121092222535_hu7963896890833799704.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241121092222535&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;526&#34;
		data-flex-basis=&#34;1263px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最终决定是否给用户优惠的是订单服务&lt;/strong&gt;，所以应该由订单发起&lt;/p&gt;
&lt;p&gt;具体逻辑较为繁琐，反正就是从数据库取出可以使用的优惠卷，用户选完之后判断优惠金额，满减的和折扣的&lt;/p&gt;
&lt;h3 id=&#34;优惠卷核销-1&#34;&gt;优惠卷核销
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241121093153982.png&#34;
	width=&#34;965&#34;
	height=&#34;712&#34;
	srcset=&#34;https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241121093153982_hu526413733025393269.png 480w, https://example.com/p/%E4%BC%98%E6%83%A0%E5%8D%B7/index.assets/image-20241121093153982_hu12616436777187240555.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241121093153982&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;135&#34;
		data-flex-basis=&#34;325px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;数据流&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2024/png/1169676/1709717251919-097417e0-5f91-47d9-8e55-dcf23f981986.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_60%2Ctext_5rK554K45bCP5rOi%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fformat%2Cwebp%2Fresize%2Cw_937%2Climit_0&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正向和逆向&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;分布式事务&#34;&gt;分布式事务
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;本地事务&lt;/li&gt;
&lt;li&gt;分布式事务
&lt;ul&gt;
&lt;li&gt;跨服务&lt;/li&gt;
&lt;li&gt;跨数据源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下单时核销优惠卷为例，订单服务&lt;strong&gt;先&lt;/strong&gt;向优惠卷发起核销请求，核销成功后&lt;strong&gt;再&lt;/strong&gt;写入订单。但假如优惠卷核销成功，但之后订单服务发生异常导致订单回滚，优惠卷实际上没有回滚，需要&lt;strong&gt;通过分布式事务来控制二者统一回滚&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;事务特性&lt;strong&gt;ACID&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A：原子性&lt;/li&gt;
&lt;li&gt;C：一致性&lt;/li&gt;
&lt;li&gt;I：隔离性&lt;/li&gt;
&lt;li&gt;D：持久性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cap原理&#34;&gt;CAP原理
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;C：一致性&lt;/li&gt;
&lt;li&gt;A：可用性&lt;/li&gt;
&lt;li&gt;P：分区容错性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CAP三点无法同时满足、默认满足P分布式容错&lt;/p&gt;
&lt;h1 id=&#34;相关问题&#34;&gt;相关问题
&lt;/h1&gt;&lt;h2 id=&#34;q1如果我要优惠卷折扣或满减是分阶段的怎么办&#34;&gt;Q1：如果我要优惠卷折扣或满减是分阶段的怎么办
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;我的天功能都写好了，产品突然变更需求一下子干蒙了；想起资源控制里在资源表里维护树形结构，于是在这里我们在活动表中维护链表结构来满足阶段性折扣，&lt;strong&gt;只多了一个字段的代价，非常的划算&lt;/strong&gt;（当然也可以再多一张表做关联也行，这样减少了活动表的数据量，也很不错）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们功能都实现了，但是需求有变更，那可以这么处理&lt;/p&gt;
&lt;p&gt;这里必须要做优惠卷活动表字段的变动，增加一个字段&lt;strong&gt;存储优惠卷活动的id&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;即：阶段性折扣的优惠卷活动变成了&lt;strong&gt;链型存储&lt;/strong&gt;（可以都存根id，根id存1表示为根活动，存0则表示这个活动不是根活动（是一个普通），存某一个活动的id则表示是该id活动的&lt;strong&gt;子活动&lt;/strong&gt;），即一个活动包含子活动（对用户子活动无感知，我们只展示根活动）&lt;/p&gt;
&lt;p&gt;（可以子节点统一储存根结点，也可以存储上一个阶段结点，应该还是统一存根好，可以一次查询取出）&lt;/p&gt;
&lt;p&gt;然后前端的请求增加一个字段表示当前添加的活动是普通优惠卷活动还是分阶段的优惠卷活动，controller层做区分，service写多一个方法即可&lt;/p&gt;
&lt;p&gt;还有一个问题待解决，这里我们活动表做了链型结构，但优惠卷表还是只存一个记录的（一个优惠卷哪怕分阶段也是一次性用完的），所以其他的相关操作大致不需要改变，就只需要在订单&lt;strong&gt;计算优惠金额的时候加上分阶段计算的逻辑&lt;/strong&gt;即可&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;或者还有一个无痛的处理方式，就是抢到分阶段的优惠卷时自动追加发放分级优惠卷，但这样观感是在太差了，毫无疑问的垃圾方案&lt;/p&gt;
&lt;p&gt;而且还是没解决分段折扣如何存储的问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;当然也可以把这个分阶段的需求拆分，就类似京东的分阶段优惠它其实不是靠优惠卷机制，而是另外的，需要和产品沟通&lt;/p&gt;
&lt;p&gt;但存在一个问题，如果这个分阶段折扣或满减也是需要抢的，会存在大量的逻辑重复，和优惠卷整体太过相似，还不如多维护一个字段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;总之，只靠多维护一个字段的代价，避免了产品设计的变更、避免了高度重复的功能代码、避免了更大范围的数据表结构变化&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;q2定时更新活动状态任务执行频次高且如果根据q1的表结构活动表将是一个数据量较大的表可能会出现定时任务执行时间相对较长的情况其实小电商平台里基本不可能出现&#34;&gt;Q2：定时更新活动状态任务执行频次高，且如果根据Q1的表结构活动表将是一个数据量较大的表，可能会出现定时任务执行时间相对较长的情况（其实小电商平台里基本不可能出现）
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;前端倒计时+后端根据时间判断状态其实已经可以接受了&lt;/p&gt;
&lt;p&gt;但仍可以参考&lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/7339742783236702271&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;半小时到秒级，京东零售定时任务优化怎么做的？本文通过一个真实的线上案例总结了针对海量数据批处理任务的一些通用优化方法，除 - 掘金 (juejin.cn)&lt;/a&gt;多说些，因为&lt;strong&gt;一个健康的系统是不允许cpu常态占用高的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定位问题：任务执行时间长且CPU利用率高&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;q3是否有高负载的风险&#34;&gt;Q3：是否有高负载的风险？
&lt;/h2&gt;&lt;p&gt;当前抢卷是交由redis集群处理，对于优惠卷管理、结果同步到mysql是优惠卷服务器做的，相对来说热点事件做了分离，不容易产生高负载。并且对于整个抢卷模块来说，优先增加的是redis集群的机器（要应对高峰期的用户抢卷请求），因为redis是用来消费这些抢卷请求的，服务器本身只是做个请求转发，抢卷处理逻辑在redis，所以对于服务器的cpu负载是不高的（抢卷这里对优惠卷服务器是网络IO密集），但仍需要注意OOM，同时要考虑将优惠卷服务器和redis客户端luttce解耦，用异步回调的方式&lt;/p&gt;
</description>
        </item>
        <item>
        <title>分布式缓存</title>
        <link>https://example.com/p/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98/</link>
        <pubDate>Thu, 14 Nov 2024 20:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98/</guid>
        <description>&lt;h1 id=&#34;分布式缓存&#34;&gt;分布式缓存
&lt;/h1&gt;&lt;h2 id=&#34;redis持久化数据丢失数据可靠性&#34;&gt;Redis持久化、数据丢失、数据可靠性
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;RDB：数据快照，把内存所有数据都存到磁盘&lt;/li&gt;
&lt;li&gt;AOF：记录每一次写操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rdb&#34;&gt;RDB
&lt;/h3&gt;&lt;p&gt;fork子线程、copy-on-write，通过创建副本，写操作操作副本，读操作读原来的，读完之后就删掉原来的，fork之后就指向了副本&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98/index.assets/image-20241115095901067.png&#34;
	width=&#34;1561&#34;
	height=&#34;880&#34;
	srcset=&#34;https://example.com/p/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98/index.assets/image-20241115095901067_hu5385396567918865765.png 480w, https://example.com/p/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98/index.assets/image-20241115095901067_hu3276114745978763737.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241115095901067&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;425px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;二进制文件，体积小，磁盘IO和COW性能消耗大&lt;/p&gt;
&lt;p&gt;有丢失风险&lt;/p&gt;
&lt;h3 id=&#34;aof&#34;&gt;AOF
&lt;/h3&gt;&lt;p&gt;刷盘策略：always、everySec、no&lt;/p&gt;
&lt;p&gt;AOF重写：只记录同一个key的最后一次写操作&lt;/p&gt;
&lt;h2 id=&#34;redis内存淘汰策略&#34;&gt;Redis内存淘汰策略
&lt;/h2&gt;&lt;h2 id=&#34;redis主从&#34;&gt;redis主从
&lt;/h2&gt;&lt;p&gt;slaveof指定作为谁的从结点&lt;/p&gt;
&lt;h3 id=&#34;数据同步原理&#34;&gt;数据同步原理
&lt;/h3&gt;&lt;p&gt;主从第一次同步时是全量同步&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第一阶段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;slave请求同步master（默认请求增量）&lt;/li&gt;
&lt;li&gt;master判断是否第一次同步（第一次时master将不允许增量同步，而是全量同步）&lt;/li&gt;
&lt;li&gt;是第一次则返回master版本信息&lt;/li&gt;
&lt;li&gt;slave保存版本信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二阶段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;master执行bgsave，生成rdb
&lt;ul&gt;
&lt;li&gt;执行rdb期间主节点可能会有写入操作，会用repl_baklog做补偿&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;发送rdb文件&lt;/li&gt;
&lt;li&gt;slave清空本地数据，加载rdb（全量）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三阶段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;master用repl_baklog同步给slave&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;slave重启后同步，执行增量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一阶段
&lt;ul&gt;
&lt;li&gt;slave请求（offset）&lt;/li&gt;
&lt;li&gt;master判断id是否一致&lt;/li&gt;
&lt;li&gt;一致则继续&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第二阶段
&lt;ul&gt;
&lt;li&gt;master去repl_baklog获取offset后的数据（能找到offset时做增量，被覆盖时做全量同步）&lt;/li&gt;
&lt;li&gt;master发送offset后的命令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;repl_baklog&lt;/strong&gt;大小有上限，写满后会覆盖最早数据。slave追不上的时候，不能再增量同步了，只能做&lt;strong&gt;全量同步&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;主从同步优化&#34;&gt;主从同步优化
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;master启用无磁盘复制，避免全量同步时的磁盘io&lt;/li&gt;
&lt;li&gt;redis单节点内存占用不能太大，减少rdb导致的过多磁盘io&lt;/li&gt;
&lt;li&gt;适当提高repl_baklog大小，slave宕机时尽快恢复&lt;/li&gt;
&lt;li&gt;master的从结点过多时，采用主从从的链式结构减少master压力&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;redis哨兵模式&#34;&gt;Redis哨兵模式
&lt;/h2&gt;&lt;p&gt;哨兵可以监控我们当前redis集群状态&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;监控&lt;/li&gt;
&lt;li&gt;故障恢复&lt;/li&gt;
&lt;li&gt;通知&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;服务监控&#34;&gt;服务监控
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;主观下线：若某sentinel结点发现某实例（主节点）没有规定时间内响应则认为主观下线&lt;/li&gt;
&lt;li&gt;客观下线：若超过指定数量（quorum）的sentinel都认为该实例主观下线，则客观下线&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;故障恢复选举新主结点&#34;&gt;故障恢复（选举新主结点）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;现在先在哨兵中选举一个决策哨兵做决策（选举流程）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后决策哨兵&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选定一个slave作为新的master，执行slaveof no one（新老大）&lt;/li&gt;
&lt;li&gt;然后让所有节点都执行slaveof 新master（拜新老大）&lt;/li&gt;
&lt;li&gt;修改故障节点（挂掉的master）配置，添加slaveof 新master&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;选举流程&#34;&gt;选举流程
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;首先会判断每个slave与master断开时间长短，过长会排除该slave的资格&lt;/li&gt;
&lt;li&gt;判断slave结点的&lt;strong&gt;slave-priority值&lt;/strong&gt;，越小优先级越高，0为不参加选举&lt;/li&gt;
&lt;li&gt;优先级一致的情况下，&lt;strong&gt;判断offset，越大说明数据越新，优先级越高&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;判断slave结点运行id大小，越小优先级越高&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;redis分片群&#34;&gt;Redis分片群
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;集群中有多个master结点，每个master根据插槽映射保存不同的数据&lt;/li&gt;
&lt;li&gt;每个master有多个slave&lt;/li&gt;
&lt;li&gt;master之间通过ping检测彼此健康状态&lt;/li&gt;
&lt;li&gt;客户端请求可以访问任意集群结点，请求会在内部转发&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;散列插槽&#34;&gt;散列插槽
&lt;/h3&gt;&lt;p&gt;redis把每个master映射到0~16383个插槽&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;key中包含&amp;quot;{}&amp;quot;，根据&amp;quot;{}&amp;ldquo;计算插槽值&lt;/li&gt;
&lt;li&gt;key中不包含&amp;rdquo;{}&amp;quot;，整个key计算&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CRC16计算hash对16384取余&lt;/p&gt;
&lt;h3 id=&#34;集群伸缩&#34;&gt;集群伸缩
&lt;/h3&gt;&lt;p&gt;添加新结点到redis时，默认是一个master，但插槽并没有分配，需要&lt;strong&gt;转移插槽&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;故障转移&#34;&gt;故障转移
&lt;/h2&gt;&lt;h3 id=&#34;自动故障转移&#34;&gt;自动故障转移
&lt;/h3&gt;&lt;h3 id=&#34;手动故障转移&#34;&gt;手动故障转移
&lt;/h3&gt;</description>
        </item>
        <item>
        <title>云岚到家</title>
        <link>https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/</link>
        <pubDate>Sun, 10 Nov 2024 16:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/</guid>
        <description>&lt;h1 id=&#34;云岚到家&#34;&gt;云岚到家
&lt;/h1&gt;&lt;h2 id=&#34;项目介绍&#34;&gt;项目介绍
&lt;/h2&gt;&lt;h3 id=&#34;项目背景&#34;&gt;项目背景
&lt;/h3&gt;&lt;p&gt;互联网+家政&lt;/p&gt;
&lt;h3 id=&#34;运营模式&#34;&gt;运营模式
&lt;/h3&gt;&lt;p&gt;B2B2C与C2B2C的区别是：B2B2C中服务提供者是家政服务中介公司，在C2B2C中是服务提供者是拥有服务技能的服务人员（散户）。&lt;/p&gt;
&lt;h3 id=&#34;业务流程&#34;&gt;业务流程
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2024/png/1169676/1708411471272-69144ed7-f8fa-48c9-9598-6c6caa85b7b6.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_28%2Ctext_5rK554K45bCP5rOi%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fformat%2Cwebp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;核心流程就是：平台发布服务项目&amp;gt;用户端选择项目并下单、支付&amp;gt;散户、机构抢单&amp;gt;实施服务&amp;gt;完成服务、评价&lt;/p&gt;
&lt;h2 id=&#34;开发区域服务模块&#34;&gt;开发区域服务模块
&lt;/h2&gt;&lt;h3 id=&#34;查询区域服务&#34;&gt;查询区域服务
&lt;/h3&gt;&lt;h4 id=&#34;接口设计&#34;&gt;接口设计
&lt;/h4&gt;&lt;p&gt;分页查询接口设计&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基础参数：pageNum、pageSize、orderBy、isAsc&lt;/li&gt;
&lt;li&gt;业务参数：动态查询的条件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;添加接口设计&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分析目标数据表中每个字段的数据来源，决定传入参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;修改接口设计&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过页面原型分析有哪些数据可以修改，然后找到表中的数据源以及和它们有关联的数据&lt;/li&gt;
&lt;li&gt;修改接口需要针对具体的某一条数据，所以肯定有id、除此之外还有各种需要更改的字段&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;客户管理&#34;&gt;客户管理
&lt;/h2&gt;&lt;h3 id=&#34;登录验证码如何区分业务类型&#34;&gt;登录验证码如何区分业务类型
&lt;/h3&gt;&lt;p&gt;用的String做key，存到redis，过期时间是5分钟&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241112104745561.png&#34;
	width=&#34;434&#34;
	height=&#34;139&#34;
	srcset=&#34;https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241112104745561_hu6372995650428578565.png 480w, https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241112104745561_hu4896460843427156462.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241112104745561&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;312&#34;
		data-flex-basis=&#34;749px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241112104813999.png&#34;
	width=&#34;411&#34;
	height=&#34;120&#34;
	srcset=&#34;https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241112104813999_hu6369788312700890884.png 480w, https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241112104813999_hu8223155841627023516.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241112104813999&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;342&#34;
		data-flex-basis=&#34;822px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;短信发送&#34;&gt;短信发送
&lt;/h3&gt;&lt;p&gt;开通短信服务&amp;gt;导入阿里的sdk&amp;gt;提供电话号码、短信签名、模板编号（有流控）&lt;/p&gt;
&lt;h3 id=&#34;机构端登录注册实现&#34;&gt;机构端登录、注册实现
&lt;/h3&gt;&lt;p&gt;机构端限定账号密码登录&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前端输入账号密码，发送请求&lt;/li&gt;
&lt;li&gt;后端校验数据完整性、正确性、是否禁用
&lt;ul&gt;
&lt;li&gt;密码匹配&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;生成token返回&lt;/li&gt;
&lt;li&gt;后续请求携带token（header中）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注册时需要提供手机号和验证码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;校验验证码
&lt;ul&gt;
&lt;li&gt;手机号、业务类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;校验当前手机号是否已经被注册&lt;/li&gt;
&lt;li&gt;密码加密方式BCrypt（B、C、rypt）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;机构账号密码找回&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;入参
&lt;ul&gt;
&lt;li&gt;手机号、业务验证码、新密码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;校验手机号账号是否存在&lt;/li&gt;
&lt;li&gt;验证码是否正确&lt;/li&gt;
&lt;li&gt;密码加密（BCrypt）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;用户端定位交互流程&#34;&gt;用户端定位交互流程
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;小程序端调用微信方法获取经纬度返回给后端&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后端调用高德地图接口返回详细信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;region表的city_code是提前从高德地图上下载的全国区域信息，转为json交由前端保存&lt;/p&gt;
&lt;p&gt;在添加区域时直接从json中展示所有的区域列表&lt;/p&gt;
&lt;h3 id=&#34;地址簿&#34;&gt;地址簿
&lt;/h3&gt;&lt;p&gt;新增地址簿&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前端调用手机定位获取当前位置&lt;/li&gt;
&lt;li&gt;然后提交经纬度获取地址的详细信息&lt;/li&gt;
&lt;li&gt;将地理位置的信息、联系人的信息一起传给新增地址接口&lt;/li&gt;
&lt;li&gt;后端执行新增地址逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查询、编辑、删除、设置默认地址&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;略&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;我的账户设置&#34;&gt;我的账户设置
&lt;/h3&gt;&lt;p&gt;跳过&lt;/p&gt;
&lt;h2 id=&#34;小程序门户-缓存&#34;&gt;小程序门户-缓存
&lt;/h2&gt;&lt;p&gt;门户的要求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动态更新&lt;/li&gt;
&lt;li&gt;加载速度快、访问频率高&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Web门户&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将门户页面生成静态页面发布到CDN服务器&lt;/li&gt;
&lt;li&gt;将静态资源也都放到&lt;strong&gt;CDN&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;html的动态数据通过异步请求后端&lt;strong&gt;缓存服务器&lt;/strong&gt;（reids）&lt;/li&gt;
&lt;li&gt;负载均衡，多个&lt;strong&gt;nginx&lt;/strong&gt;共同提供服务（高可用、高性能）&lt;/li&gt;
&lt;li&gt;前端也做缓存
&lt;ul&gt;
&lt;li&gt;LocalStorage&lt;/li&gt;
&lt;li&gt;SessionStorage&lt;/li&gt;
&lt;li&gt;Cookie&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;移动应用门户&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;缓存技术方案&#34;&gt;缓存技术方案
&lt;/h3&gt;&lt;p&gt;有哪些信息需要缓存&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首页的各种列表和列表中的不同项目&lt;/li&gt;
&lt;li&gt;热门的列表&lt;/li&gt;
&lt;li&gt;类型列表&lt;/li&gt;
&lt;li&gt;服务详细信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;spring-cache&#34;&gt;Spring Cache
&lt;/h3&gt;&lt;p&gt;集成Lettuce客户端与Redis服务器通信，基于AOP&lt;/p&gt;
&lt;p&gt;cacheManager&lt;/p&gt;
&lt;p&gt;@CacheEvict、@CachePut、@EnableCaching&lt;/p&gt;
&lt;h3 id=&#34;缓存穿透击穿雪崩&#34;&gt;缓存穿透、击穿、雪崩
&lt;/h3&gt;&lt;p&gt;穿透&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;校验、缓存空值、布隆过滤器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;击穿：热点数据失效后瞬间请求打到数据库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用锁
&lt;ul&gt;
&lt;li&gt;分布式锁控制只有一个线程与查询数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;热点数据不过期&lt;/li&gt;
&lt;li&gt;缓存预热
&lt;ul&gt;
&lt;li&gt;提前预热、定时预热&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;热点数据查询降级处理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;雪崩&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;过期时间+随机值&lt;/li&gt;
&lt;li&gt;定时预热&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;缓存不一致&#34;&gt;缓存不一致
&lt;/h3&gt;&lt;p&gt;写数据库和写缓存不一致即&lt;strong&gt;双写一致&lt;/strong&gt;（网络卡顿导致并发写的场景下写入旧值）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用分布式锁&lt;/li&gt;
&lt;li&gt;延迟双删
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;先删除缓存&lt;/strong&gt;再写数据库然后&lt;strong&gt;再次删除缓存&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;异步同步
&lt;ul&gt;
&lt;li&gt;Canal+MQ异步任务方式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;服务搜索&#34;&gt;服务搜索
&lt;/h2&gt;&lt;h3 id=&#34;服务搜索技术方案&#34;&gt;服务搜索技术方案
&lt;/h3&gt;&lt;p&gt;分词关键字搜索&lt;/p&gt;
&lt;p&gt;Elasticsearch是基于倒排索引的原理，正排索引是从文章中找词，倒排索引是根据词去找文章&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2024/jpeg/1169676/1708766787224-7366260f-49cb-4189-b153-c51c65bff3c7.jpeg?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_34%2Ctext_5rK554K45bCP5rOi%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fformat%2Cwebp%2Fresize%2Cw_937%2Climit_0%2Finterlace%2C1&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;索引同步方案&#34;&gt;索引同步方案
&lt;/h3&gt;&lt;p&gt;方案1：添加服务信息维护索引&lt;/p&gt;
&lt;p&gt;在Service方法中添加维护ES索引的代码&lt;/p&gt;
&lt;p&gt;方案2：使用Canal+MQ&lt;/p&gt;
&lt;p&gt;Mysql主从数据同步原理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;master、slave&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主从数据同步是一种数据库复制技术&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写数据先向主服务器写&lt;/li&gt;
&lt;li&gt;写成功后同步到从服务器&lt;/li&gt;
&lt;li&gt;主从数据库同步流程
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241113194338480.png&#34;
	width=&#34;944&#34;
	height=&#34;796&#34;
	srcset=&#34;https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241113194338480_hu9558839266934732661.png 480w, https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241113194338480_hu7544216915693610526.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241113194338480&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;118&#34;
		data-flex-basis=&#34;284px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Canal实现原理&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241113194456751.png&#34;
	width=&#34;834&#34;
	height=&#34;724&#34;
	srcset=&#34;https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241113194456751_hu6855926193138491222.png 480w, https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241113194456751_hu3096571901932341757.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241113194456751&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;115&#34;
		data-flex-basis=&#34;276px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;索引同步方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241113194927402.png&#34;
	width=&#34;937&#34;
	height=&#34;682&#34;
	srcset=&#34;https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241113194927402_hu5694483979435074512.png 480w, https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241113194927402_hu5711922681188395428.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241113194927402&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;137&#34;
		data-flex-basis=&#34;329px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在这个过程中MQ必须保证可靠性&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mq技术方案&#34;&gt;MQ技术方案
&lt;/h2&gt;&lt;h3 id=&#34;保证生产消息可靠性&#34;&gt;保证生产消息可靠性
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;本地失败重试&lt;/li&gt;
&lt;li&gt;失败消息入库（达到失败次数入库）&lt;/li&gt;
&lt;li&gt;失败消息人工处理、失败消息自动处理任务调度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2024/svg/1169676/1708767028738-d30ce85a-2065-4e62-a549-ae8b68530e74.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;14.svg&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;@Retryable注解实现执行失败进行重试&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Retryable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MqException&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 抛出指定异常时重试&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;		&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;maxAttempts&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 最大重试次数、默认三次&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;		&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backoff&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Backoff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mutiplier&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 重试等待策略（每次重试乘以系数）&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;		&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recover&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;saveFailMag&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 设置回调方法名，重试耗尽时执行&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;ConfirmCallback：消息成功投递到交换机会返回ack，失败会返回nack&lt;/p&gt;
&lt;p&gt;Return回调：消息成功到达交换机，但没到队列，调用回调方法&lt;/p&gt;
&lt;h3 id=&#34;保证消费信息可靠性&#34;&gt;保证消费信息可靠性
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设置消息持久化，发送消息设置deliveryMode = 2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;none模式下，消息投递是不可靠的，可能丢失&lt;/li&gt;
&lt;li&gt;auto模式类似事务机制，出现异常时返回nack，消息回滚到mq；没有异常，返回ack&lt;/li&gt;
&lt;li&gt;manual：自己根据业务情况，判断什么时候该ack&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动ack模式，失败重试三次后投递到失败队列&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;保证消息幂等性&#34;&gt;保证消息幂等性
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;幂等性是指不论执行多少次，其结果一致&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;针对不同场景，不同解决方案&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询操作：本身具有幂等性&lt;/li&gt;
&lt;li&gt;添加操作：有可能会重复添加记录，通过设置唯一约束老保证&lt;/li&gt;
&lt;li&gt;更新操作：更新操作应当只允许更新成功一次，使用token机制
&lt;ul&gt;
&lt;li&gt;发送消息前生成一个token写入redis，收到消息后解析出token，从redis查询token&lt;/li&gt;
&lt;li&gt;查询到则说明没有消费，此时更新，更新成功后删除token缓存&lt;/li&gt;
&lt;li&gt;当重复消费时，token会被删除，所以不会执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;删除操作：与更新类似&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置数据同步环境&#34;&gt;配置数据同步环境
&lt;/h2&gt;&lt;h2 id=&#34;索引同步&#34;&gt;索引同步
&lt;/h2&gt;&lt;h3 id=&#34;canalmq的同步流程&#34;&gt;Canal+MQ的同步流程
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241115082555270.png&#34;
	width=&#34;981&#34;
	height=&#34;857&#34;
	srcset=&#34;https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241115082555270_hu18432325639566652077.png 480w, https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241115082555270_hu13589876325029673290.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241115082555270&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;114&#34;
		data-flex-basis=&#34;274px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;cananlmq数据同步&#34;&gt;Cananl+MQ数据同步
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2024/png/1169676/1708767364420-5d7c378e-f72b-47e5-aba2-63b65bb84d14.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_69%2Ctext_5rK554K45bCP5rOi%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fformat%2Cwebp%2Fresize%2Cw_937%2Climit_0&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;whiteboard_exported_image (23).png&#34;
	
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务管理不仅向serve、serve_item、serve_type表写数据，同时也向serve_sync表写数据，serve_sync用于Canal同步数据使用。&lt;/li&gt;
&lt;li&gt;向serve_sync写数据产生binlog&lt;/li&gt;
&lt;li&gt;Canal请求读取binlog，并解析出serve_sync表的数据更新日志，并发送至MQ的数据同步队列。&lt;/li&gt;
&lt;li&gt;异步同步程序监听MQ的数据同步队列，收到消息后解析出serve_sync表的更新日志。&lt;/li&gt;
&lt;li&gt;异步同步程序根据serve_sync表的更新日志请求Elasticsearch添加、更新、删除索引文档。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最终实现了将MySQL中的serve_sync表的数据同步至Elasticsearch&lt;/p&gt;
&lt;h2 id=&#34;支付服务&#34;&gt;支付服务
&lt;/h2&gt;</description>
        </item>
        <item>
        <title>JVM相关面试题</title>
        <link>https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
        <pubDate>Sat, 09 Nov 2024 16:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
        <description>&lt;h1 id=&#34;jvm相关面试题&#34;&gt;JVM相关面试题
&lt;/h1&gt;&lt;h2 id=&#34;1-jvm组成&#34;&gt;1 JVM组成
&lt;/h2&gt;&lt;h3 id=&#34;11-jvm由那些部分组成运行流程是什么&#34;&gt;1.1 JVM由那些部分组成，运行流程是什么？
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220903233627146.png&#34;
	width=&#34;1113&#34;
	height=&#34;522&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220903233627146_hu471400069268057499.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220903233627146_hu8490872863058708578.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220903233627146&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;213&#34;
		data-flex-basis=&#34;511px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;从图中可以看出 JVM 的主要组成部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ClassLoader（类加载器）&lt;/li&gt;
&lt;li&gt;Runtime Data Area（运行时数据区，内存分区）&lt;/li&gt;
&lt;li&gt;Execution Engine（执行引擎）&lt;/li&gt;
&lt;li&gt;Native Method Library（本地库接口）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运行流程：&lt;/p&gt;
&lt;p&gt;（1）类加载器（ClassLoader）把Java代码转换为字节码&lt;/p&gt;
&lt;p&gt;（2）运行时数据区（Runtime Data Area）把字节码加载到内存中，而字节码文件只是JVM的一套指令集规范，并不能直接交给底层系统去执行，而是有执行引擎运行&lt;/p&gt;
&lt;p&gt;（3）执行引擎（Execution Engine）将字节码翻译为底层系统指令，再交由CPU执行去执行，此时需要调用其他语言的本地库接口（Native Method Library）来实现整个程序的功能。&lt;/p&gt;
&lt;h3 id=&#34;12-说一下-jvm-运行时数据区&#34;&gt;1.2 说一下 JVM 运行时数据区
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;组成部分：堆、方法区、栈、本地方法栈、程序计数器&lt;/p&gt;
&lt;p&gt;1、堆解决的是对象实例存储的问题，垃圾回收器管理的主要区域。
2、方法区可以认为是堆的一部分，用于存储已被虚拟机加载的信息，常量、静态变量、即时编译器编译后的代码。
3、栈解决的是程序运行的问题，栈里面存的是栈帧，栈帧里面存的是局部变量表、操作数栈、动态链接、方法出口等信息。
4、本地方法栈与栈功能相同，本地方法栈执行的是本地方法，一个Java调用非Java代码的接口。
5、程序计数器（PC寄存器）程序计数器中存放的是当前线程所执行的字节码的行数。JVM工作时就是通过改变这个计数器的值来选取下一个需要执行的字节码指令。&lt;/p&gt;
&lt;h3 id=&#34;13-什么是程序计数器&#34;&gt;1.3 什么是程序计数器？
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;线程私有的。内部保存的字节码的行号。用于记录正在执行的字节码指令的地址。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;javap -verbose  xx.class    打印堆栈大小，局部变量的数量和方法的参数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220826235336379.png&#34;
	width=&#34;1308&#34;
	height=&#34;678&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220826235336379_hu18145343218829279438.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220826235336379_hu8108815346314262955.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220826235336379&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;192&#34;
		data-flex-basis=&#34;463px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;​	java虚拟机对于多线程是通过线程轮流切换并且分配线程执行时间。在任何的一个时间点上，一个处理器只会处理执行一个线程，如果当前被执行的这个线程它所分配的执行时间用完了【挂起】。处理器会切换到另外的一个线程上来进行执行。并且这个线程的执行时间用完了，接着处理器就会又来执行被挂起的这个线程。&lt;/p&gt;
&lt;p&gt;​	那么现在有一个问题就是，当前处理器如何能够知道，对于这个被挂起的线程，它上一次执行到了哪里？那么这时就需要从程序计数器中来回去到当前的这个线程他上一次执行的行号，然后接着继续向下执行。&lt;/p&gt;
&lt;p&gt;​	程序计数器是JVM规范中唯一一个没有规定出现OOM的区域，所以这个空间也不会进行GC。&lt;/p&gt;
&lt;h3 id=&#34;14-你能给我详细的介绍java堆吗&#34;&gt;1.4 你能给我详细的介绍Java堆吗?
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;线程共享的区域&lt;/strong&gt;。主要用来保存&lt;strong&gt;对象实例，数组&lt;/strong&gt;等，当堆中没有内存空间可分配给实例，也无法再扩展时，则抛出OutOfMemoryError异常。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220903222719878.png&#34;
	width=&#34;1349&#34;
	height=&#34;478&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220903222719878_hu189897339195508553.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220903222719878_hu6430123009936787906.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220903222719878&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;282&#34;
		data-flex-basis=&#34;677px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;​	在JAVA7中堆内会存在&lt;strong&gt;年轻代、老年代和方法区(永久代)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​	1）Young区被划分为三部分，Eden区和两个大小严格相同的Survivor区，其中，Survivor区间中，某一时刻只有其中一个是被使用的，另外一个留做垃圾收集时复制对象用。在Eden区变满的时候， GC就会将存活的对象移到空闲的Survivor区间中，根据JVM的策略，在经过几次垃圾收集后，任然存活于Survivor的对象将被移动到Tenured区间。&lt;/p&gt;
&lt;p&gt;​	2）Tenured区主要保存生命周期长的对象，一般是一些老的对象，当一些对象在Young复制转移一定的次数以后，对象就会被转移到Tenured区。&lt;/p&gt;
&lt;p&gt;​	3）Perm代主要保存&lt;strong&gt;保存的类信息、静态变量、常量、编译后的代码&lt;/strong&gt;，在java7中堆上方法区会受到GC的管理的。方法区【永久代】是有一个大小的限制的。如果大量的动态生成类，就会放入到方法区【永久代】，很容易造成OOM。&lt;/p&gt;
&lt;p&gt;​	为了避免方法区出现OOM，所以在java8中将堆上的方法区【永久代】给移动到了本地内存上，重新开辟了一块空间，叫做&lt;strong&gt;元空间&lt;/strong&gt;。那么现在就可以避免掉OOM的出现了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;扩展：&lt;/p&gt;
&lt;h5 id=&#34;元空间metaspace介绍&#34;&gt;元空间(MetaSpace)介绍
&lt;/h5&gt;&lt;p&gt;​	在 HotSpot JVM 中，永久代（ ≈ 方法区）中用于存放类和方法的元数据以及常量池，比如Class 和 Method。每当一个类初次被加载的时候，它的元数据都会放到永久代中。&lt;/p&gt;
&lt;p&gt;​	永久代是有大小限制的，因此如果加载的类太多，很有可能导致永久代内存溢出，即OutOfMemoryError，为此不得不对虚拟机做调优。&lt;/p&gt;
&lt;p&gt;​	那么，Java 8 中 PermGen 为什么被移出 HotSpot JVM 了？&lt;/p&gt;
&lt;p&gt;官网给出了解释：http://openjdk.java.net/jeps/122&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;This is part of the JRockit and Hotspot convergence effort. JRockit customers do not need to configure the permanent generation (since JRockit does not have a permanent generation) and are accustomed to not configuring the permanent generation.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;移除永久代是为融合HotSpot JVM与 JRockit VM而做出的努力，因为JRockit没有永久代，不需要配置永久代。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;1）由于 PermGen 内存经常会溢出，引发OutOfMemoryError，因此 JVM 的开发者希望这一块内存可以更灵活地被管理，不要再经常出现这样的 OOM。&lt;/p&gt;
&lt;p&gt;2）移除 PermGen 可以促进 HotSpot JVM 与 JRockit VM 的融合，因为 JRockit 没有永久代。&lt;/p&gt;
&lt;p&gt;​	准确来说，Perm 区中的字符串常量池被移到了堆内存中是在 Java7 之后，Java 8 时，PermGen 被元空间代替，其他内容比如&lt;strong&gt;类元信息、字段、静态属性、方法、常量&lt;/strong&gt;等都移动到元空间区。比如 java/lang/Object 类元信息、静态属性 System.out、整型常量等。&lt;/p&gt;
&lt;p&gt;​	元空间的本质和永久代类似，都是对 JVM 规范中方法区的实现。不过元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存限制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;15-能不能解释一下方法区&#34;&gt;1.5 能不能解释一下方法区？
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;方法区类似于传统语言的编译代码的存储区，它存储每个类的结构，例如运行时常量池、字段和方法数据，以及方法和构造函数的代码，包括类和实例初始化和接口初始化中使用 的特殊方法&lt;/p&gt;
&lt;p&gt;方法区是在虚拟机启动时创建的。尽管方法区在逻辑上是堆的一部分，但简单的实现可能会选择不进行垃圾收集或压缩它。本规范不要求方法区域的位置或用于管理已编译代码的策略。方法区域可以是固定大小，也可以根据计算需要扩大，如果不需要更大的方法区域，可以缩小。方法区的内存不需要是连续的。&lt;/p&gt;
&lt;p&gt;Java 虚拟机实现可以为程序员或用户提供对方法区域初始大小的控制，以及在方法区域大小可变的情况下，对最大和最小方法区域大小的控制。&lt;/p&gt;
&lt;p&gt;以下异常情况与方法区相关：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果方法区域中的内存无法满足分配请求，Java 虚拟机将抛出一个&lt;code&gt;OutOfMemoryError&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;16-你听过直接内存吗&#34;&gt;1.6 你听过直接内存吗？
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不受 JVM 内存回收管理，是虚拟机的系统内存，常见于 NIO 操作时，用于数据缓冲区，分配回收成本较高，但读写性能高，不受 JVM 内存回收管理&lt;/p&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;p&gt;需求，在本地电脑中的一个较大的文件（超过100m）从一个磁盘挪到另外一个磁盘&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * 演示 ByteBuffer 作用
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Demo1_9&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;E:\\编程资料\\第三方教学视频\\youtube\\Getting Started with Spring Boot-sbPSjI4tt10.mp4&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TO&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;E:\\a.mp4&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_1Mb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// io 用时：1535.586957 1766.963399 1359.240226&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;directBuffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// directBuffer 用时：479.295165 702.291454 562.56592&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;directBuffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;nanoTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FileChannel&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FileInputStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getChannel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;             &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FileChannel&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FileOutputStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getChannel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ByteBuffer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ByteBuffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;allocateDirect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_1Mb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;flip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;clear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;nanoTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;directBuffer 用时：&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1000_000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;nanoTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FileInputStream&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FileInputStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;             &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FileOutputStream&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FileOutputStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_1Mb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;nanoTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;io 用时：&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1000_000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可以发现，使用传统的IO的时间要比NIO操作的时间长了很多了，也就说NIO的读性能更好。&lt;/p&gt;
&lt;p&gt;这个是跟我们的JVM的直接内存是有一定关系，如下图，是传统阻塞IO的数据传输流程&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220907174151925.png&#34;
	width=&#34;825&#34;
	height=&#34;594&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220907174151925_hu4000586279237720933.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220907174151925_hu12322853207929336964.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220907174151925&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;138&#34;
		data-flex-basis=&#34;333px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;下图是NIO传输数据的流程，在这个里面主要使用到了一个直接内存，不需要在堆中开辟空间进行数据的拷贝，jvm可以直接操作直接内存，从而使数据读写传输更快。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220907174308262.png&#34;
	width=&#34;809&#34;
	height=&#34;591&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220907174308262_hu11023090600962366037.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220907174308262_hu17316853833250233280.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220907174308262&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;136&#34;
		data-flex-basis=&#34;328px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;17-什么是虚拟机栈&#34;&gt;1.7 什么是虚拟机栈
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​	描述的是方法执行时的内存模型,是线程私有的，生命周期与线程相同,每个方法被执行的同时会创建&lt;strong&gt;栈桢&lt;/strong&gt;。保存执行方法时的&lt;strong&gt;局部变量、动态连接信息、方法返回地址信息&lt;/strong&gt;等等。方法开始执行的时候会进栈，方法执行完会出栈【相当于清空了数据】，所以这块区域&lt;strong&gt;不需要进行 GC&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;18-堆栈的区别是什么&#34;&gt;1.8 堆栈的区别是什么？
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、栈内存一般会用来存储局部变量和方法调用，但堆内存是用来存储Java对象和数组的的。堆会GC垃圾回收，而栈不会。&lt;/p&gt;
&lt;p&gt;2、栈内存是线程私有的，而堆内存是线程共有的。&lt;/p&gt;
&lt;p&gt;3,、两者异常错误不同，但如果栈内存或者堆内存不足都会抛出异常。&lt;/p&gt;
&lt;p&gt;栈空间不足：java.lang.StackOverFlowError。&lt;/p&gt;
&lt;p&gt;堆空间不足：java.lang.OutOfMemoryError。&lt;/p&gt;
&lt;h2 id=&#34;2-类加载器&#34;&gt;2 类加载器
&lt;/h2&gt;&lt;h3 id=&#34;21-什么是类加载器类加载器有哪些&#34;&gt;2.1 什么是类加载器，类加载器有哪些?
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要想理解类加载器的话，务必要先清楚对于一个Java文件，它从编译到执行的整个过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220903233627146.png&#34;
	width=&#34;1113&#34;
	height=&#34;522&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220903233627146_hu471400069268057499.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220903233627146_hu8490872863058708578.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;213&#34;
		data-flex-basis=&#34;511px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类加载器：用于装载字节码文件(.class文件)&lt;/li&gt;
&lt;li&gt;运行时数据区：用于分配存储空间&lt;/li&gt;
&lt;li&gt;执行引擎：执行字节码文件或本地方法&lt;/li&gt;
&lt;li&gt;垃圾回收器：用于对JVM中的垃圾内容进行回收&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;类加载器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JVM只会运行二进制文件，而类加载器（ClassLoader）的主要作用就是将&lt;strong&gt;字节码文件加载到JVM中&lt;/strong&gt;，从而让Java程序能够启动起来。现有的类加载器基本上都是java.lang.ClassLoader的子类，该类的只要职责就是用于将指定的类找到或生成对应的字节码文件，同时类加载器还会负责加载程序所需要的资源&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;类加载器种类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;类加载器根据各自加载范围的不同，划分为四种类加载器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;启动类加载器(BootStrap ClassLoader)：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该类并不继承ClassLoader类，其是由C++编写实现。用于加载&lt;strong&gt;JAVA_HOME/jre/lib&lt;/strong&gt;目录下的类库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;扩展类加载器(ExtClassLoader)：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该类是ClassLoader的子类，主要加载&lt;strong&gt;JAVA_HOME/jre/lib/ext&lt;/strong&gt;目录中的类库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;应用类加载器(AppClassLoader)：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该类是ClassLoader的子类，主要用于加载&lt;strong&gt;classPath&lt;/strong&gt;下的类，也就是加载开发者自己编写的Java类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;自定义类加载器：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;开发者自定义类继承ClassLoader，实现自定义类加载规则。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述三种类加载器的层次结构如下如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904003215993.png&#34;
	width=&#34;458&#34;
	height=&#34;762&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904003215993_hu17553560900465832100.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904003215993_hu9261540229248691043.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220904003215993&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;60&#34;
		data-flex-basis=&#34;144px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;类加载器的体系并不是“继承”体系，而是&lt;strong&gt;委派体系&lt;/strong&gt;，类加载器首先会到自己的parent中查找类或者资源，如果找不到才会到自己本地查找。类加载器的委托行为动机是为了避免相同的类被加载多次。&lt;/p&gt;
&lt;h3 id=&#34;22-说一下类装载的执行过程&#34;&gt;2.2 说一下类装载的执行过程？
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;类从加载到虚拟机中开始，直到卸载为止，它的整个生命周期包括了：加载、验证、准备、解析、初始化、使用和卸载这7个阶段。其中，验证、准备和解析这三个部分统称为连接（linking）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904003730785.png&#34;
	width=&#34;955&#34;
	height=&#34;390&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904003730785_hu14922210423059460295.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904003730785_hu14385389697415372549.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220904003730785&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;244&#34;
		data-flex-basis=&#34;587px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;类加载过程详解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.加载&lt;/p&gt;
&lt;p&gt;查找和导入class文件&lt;/p&gt;
&lt;p&gt;(1)获取类的二进制字节流 ,将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构
(2)在Java堆中生成一个Class对象，作为方法区中这些数据的访问入口&lt;/p&gt;
&lt;p&gt;2.验证&lt;/p&gt;
&lt;p&gt;保证加载类的准确性&lt;/p&gt;
&lt;p&gt;(1)文件格式验证:是否符合Class文件的规范
(2)元数据验证
这个类是否有父类（除了Object这个类之外，其余的类都应该有父类）
这个类是否继承（extends）了被final修饰过的类（被final修饰过的类表示类不能被继承）
类中的字段、方法是否与父类产生矛盾。（被final修饰过的方法或字段是不能覆盖的）					
(3)字节码验证
主要的目的是通过对数据流和控制流的分析，确定程序语义是合法的、符合逻辑的。
(4)符号引用验证：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;比如：int i = 3;
字面量：3
符号引用：i&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3.准备&lt;/p&gt;
&lt;p&gt;为类变量分配内存并设置类变量初始值&lt;/p&gt;
&lt;p&gt;Java 中的变量有&amp;quot;类变量&amp;quot;和&amp;quot;类成员变量&amp;quot;两种类型
类变量:指的是被 静态（static） 修饰的变量
类成员变量:指的是非静态修饰的变量
在准备阶段，JVM 只会为&amp;quot;类变量&amp;quot;分配内存，而不会为&amp;quot;类成员变量&amp;quot;分配内存
&amp;ldquo;类成员变量&amp;rdquo;：内存分配需要等到 类加载的初始化 阶段才开始。&lt;/p&gt;
&lt;p&gt;4.解析&lt;/p&gt;
&lt;p&gt;把类中的符号引用转换为直接引用&lt;/p&gt;
&lt;p&gt;比如方法中调用了其他方法，方法名可以理解为符号引用，而直接引用就是使用指针直接指向方法。&lt;/p&gt;
&lt;p&gt;5.初始化&lt;/p&gt;
&lt;p&gt;对类的静态变量，静态代码块执行初始化操作&lt;/p&gt;
&lt;p&gt;只对静态（static）修饰的变量或语句块进行初始化。如果初始化一个类的时候，其父类尚未初始化，则优先初始化其父类。如果同时包含多个静态变量和静态代码块，则按照自上而下的顺序依次执行。&lt;/p&gt;
&lt;p&gt;6.使用&lt;/p&gt;
&lt;p&gt;JVM 开始从入口方法开始执行用户的程序代码&lt;/p&gt;
&lt;p&gt;7.卸载&lt;/p&gt;
&lt;p&gt;当用户程序代码执行完毕后，JVM 便开始销毁创建的 Class 对象，最后负责运行的 JVM 也退出内存&lt;/p&gt;
&lt;h3 id=&#34;23-什么是双亲委派模型&#34;&gt;2.3 什么是双亲委派模型？
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果一个类加载器在接到加载类的请求时，它首先不会自己尝试去加载这个类，而是把这个请求任务委托给父类加载器去完成，依次递归，如果父类加载器可以完成类加载任务，就返回成功；只有父类加载器无法完成此加载任务时，才由下一级去加载。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904004306359.png&#34;
	width=&#34;947&#34;
	height=&#34;711&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904004306359_hu8375340113160557691.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904004306359_hu11373771628220181631.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220904004306359&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;319px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;24-jvm为什么采用双亲委派机制&#34;&gt;2.4 JVM为什么采用双亲委派机制
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;（1）通过双亲委派机制可以避免某一个类被重复加载，当父类已经加载后则无需重复加载，保证唯一性。&lt;/p&gt;
&lt;p&gt;（2）为了安全，保证类库API不会被修改&lt;/p&gt;
&lt;p&gt;在工程中新建java.lang包，接着在该包下新建String类，并定义main函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;demo info&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	此时执行main函数，会出现异常，在类 java.lang.String 中找不到 main 方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220903144547378.png&#34;
	width=&#34;934&#34;
	height=&#34;144&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220903144547378_hu258715849314340661.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220903144547378_hu13253271977043666323.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220903144547378&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;648&#34;
		data-flex-basis=&#34;1556px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;​	出现该信息是因为由双亲委派的机制，java.lang.String的在启动类加载器(Bootstrap classLoader)得到加载，因为在核心jre库中有其相同名字的类文件，但该类中并没有main方法。这样就能防止恶意篡改核心API库。&lt;/p&gt;
&lt;h2 id=&#34;3-垃圾收回&#34;&gt;3 垃圾收回
&lt;/h2&gt;&lt;h3 id=&#34;31-简述java垃圾回收机制gc是什么为什么要gc&#34;&gt;3.1 简述Java垃圾回收机制？（GC是什么？为什么要GC）
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了让程序员更专注于代码的实现，而不用过多的考虑内存释放的问题，所以，在Java语言中，有了自动的垃圾回收机制，也就是我们熟悉的GC(Garbage Collection)。&lt;/p&gt;
&lt;p&gt;有了垃圾回收机制后，程序员只需要关心内存的申请即可，内存的释放由系统自动识别完成。&lt;/p&gt;
&lt;p&gt;在进行垃圾回收时，不同的对象引用类型，GC会采用不同的回收时机&lt;/p&gt;
&lt;p&gt;换句话说，自动的垃圾回收的算法就会变得非常重要了，如果因为算法的不合理，导致内存资源一直没有释放，同样也可能会导致内存溢出的。&lt;/p&gt;
&lt;p&gt;当然，除了Java语言，C#、Python等语言也都有自动的垃圾回收机制。&lt;/p&gt;
&lt;h3 id=&#34;32-强引用软引用弱引用虚引用的区别&#34;&gt;3.2 强引用、软引用、弱引用、虚引用的区别？
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;321-强引用&#34;&gt;3.2.1 强引用
&lt;/h4&gt;&lt;p&gt;最为普通的引用方式，表示一个对象处于&lt;strong&gt;有用且必须&lt;/strong&gt;的状态，如果一个对象具有强引用，则GC并不会回收它。即便堆中内存不足了，宁可出现OOM，也不会对其进行回收&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;322-软引用&#34;&gt;3.2.2 软引用
&lt;/h4&gt;&lt;p&gt;表示一个对象处于&lt;strong&gt;有用且非必须&lt;/strong&gt;状态，如果一个对象处于软引用，在内存空间足够的情况下，GC机制并不会回收它，而在内存空间不足时，则会在OOM异常出现之间对其进行回收。但值得注意的是，因为GC线程优先级较低，软引用并不会立即被回收。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SoftReference&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;softReference&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SoftReference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;323-弱引用&#34;&gt;3.2.3 弱引用
&lt;/h4&gt;&lt;p&gt;表示一个对象处于&lt;strong&gt;可能有用且非必须&lt;/strong&gt;的状态。在GC线程扫描内存区域时，一旦发现弱引用，就会回收到弱引用相关联的对象。对于弱引用的回收，无关内存区域是否足够，一旦发现则会被回收。同样的，因为GC线程优先级较低，所以弱引用也并不是会被立刻回收。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WeakReference&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weakReference&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WeakReference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;延伸话题：ThreadLocal内存泄漏问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ThreadLocal用的就是弱引用，看以下源码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Entry&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WeakReference&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ThreadLocal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Entry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ThreadLocal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//强引用，不会被回收&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;Entry&lt;/code&gt;的key是当前ThreadLocal，value值是我们要设置的数据。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WeakReference&lt;/code&gt;表示的是弱引用，当JVM进行GC时，一旦发现了只具有弱引用的对象，不管当前内存空间是否足够，都会回收它的内存。但是&lt;code&gt;value&lt;/code&gt;是强引用，它不会被回收掉。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ThreadLocal使用建议：使用完毕后注意调用清理方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;324-虚引用&#34;&gt;3.2.4 虚引用
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;例如： PhantomReference a = new PhantomReference(new A(), referenceQueue);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;必须配合引用队列一起使用，当虚引用所引用的对象被回收时，由 Reference Handler 线程将虚引用对象入队，这样就可以知道哪些对象被回收，从而对它们关联的资源做进一步处理&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;com.itheima.basic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;java.lang.ref.PhantomReference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;java.lang.ref.ReferenceQueue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;java.util.ArrayList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;java.util.List&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TestPhantomReference&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InterruptedException&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReferenceQueue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;queue&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReferenceQueue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyResourse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyResourse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;queue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyResourse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;queue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyResourse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;queue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;gc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ref&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ref&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;queue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;poll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ref&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;instanceof&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyResourse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyResourse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;clean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MyResourse&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PhantomReference&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;MyResourse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;referent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReferenceQueue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;referent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//释放外部资源的方法&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;clean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;clean&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;33-对象什么时候可以被垃圾器回收&#34;&gt;3.3 对象什么时候可以被垃圾器回收
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单一句就是：如果一个或多个对象没有任何的引用指向它了，那么这个对象现在就是垃圾，如果定位了垃圾，则有可能会被垃圾回收器回收。&lt;/p&gt;
&lt;p&gt;如果要定位什么是垃圾，有两种方式来确定，第一个是引用计数法，第二个是可达性分析算法&lt;/p&gt;
&lt;h4 id=&#34;331-引用计数法&#34;&gt;3.3.1 引用计数法
&lt;/h4&gt;&lt;p&gt;​	一个对象被引用了一次，在当前的对象头上递增一次引用次数，如果这个对象的引用次数为0，代表这个对象可回收&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904005802025.png&#34;
	width=&#34;563&#34;
	height=&#34;360&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904005802025_hu4695453624529905715.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904005802025_hu4643775362911274175.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220904005802025&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;156&#34;
		data-flex-basis=&#34;375px&#34;
	
&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904010012624.png&#34;
	width=&#34;559&#34;
	height=&#34;359&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904010012624_hu17004253884902951973.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904010012624_hu12259658304254035683.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220904010012624&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;373px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;当对象间出现了循环引用的话，则引用计数法就会失效&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904010201496.png&#34;
	width=&#34;544&#34;
	height=&#34;399&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904010201496_hu12215200484790110668.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904010201496_hu8094484597998279836.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220904010201496&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;136&#34;
		data-flex-basis=&#34;327px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220903144622508.png&#34;
	width=&#34;1038&#34;
	height=&#34;307&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220903144622508_hu15860450294891348260.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220903144622508_hu5921241159633819054.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220903144622508&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;338&#34;
		data-flex-basis=&#34;811px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;虽然a和b都为null，但是由于a和b存在循环引用，这样a和b永远都不会被回收。&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实时性较高，无需等到内存不够的时候，才开始回收，运行时根据对象的计数器是否为0，就可以直接回收。&lt;/li&gt;
&lt;li&gt;在垃圾回收过程中，应用无需挂起。如果申请内存时，内存不足，则立刻报OOM错误。&lt;/li&gt;
&lt;li&gt;区域性，更新对象的计数器时，只是影响到该对象，不会扫描全部对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每次对象被引用时，都需要去更新计数器，有一点时间开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;浪费CPU资源&lt;/strong&gt;，即使内存够用，仍然在运行时进行计数器的统计。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无法解决循环引用问题，会引发内存泄露&lt;/strong&gt;。（最大的缺点）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;331-可达性分析算法&#34;&gt;3.3.1 可达性分析算法
&lt;/h4&gt;&lt;p&gt;​	现在的虚拟机采用的都是通过可达性分析算法来确定哪些内容是垃圾。&lt;/p&gt;
&lt;p&gt;​	会存在一个根节点【GC Roots】，引出它下面指向的下一个节点，再以下一个节点节点开始找出它下面的节点，依次往下类推。直到所有的节点全部遍历完毕。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;根对象是那些肯定不能当做垃圾回收的对象，就可以当做根对象&lt;/p&gt;
&lt;p&gt;局部变量，静态方法，静态变量，类信息&lt;/p&gt;
&lt;p&gt;核心是：判断某对象是否与根对象有直接或间接的引用，如果没有被引用，则可以当做垃圾回收&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904010634153.png&#34;
	width=&#34;436&#34;
	height=&#34;593&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904010634153_hu3764381488458764579.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904010634153_hu17478693232302430119.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220904010634153&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;73&#34;
		data-flex-basis=&#34;176px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;​	X,Y这两个节点是可回收的，但是&lt;strong&gt;并不会马上的被回收！！&lt;/strong&gt; 对象中存在一个方法【finalize】。当对象被标记为可回收后，当发生GC时，首先&lt;strong&gt;会判断这个对象是否执行了finalize方法&lt;/strong&gt;，如果这个方法还没有被执行的话，那么就会先来执行这个方法，接着在这个方法执行中，可以设置当前这个对象与GC ROOTS产生关联，那么这个方法执行完成之后，GC会再次判断对象是否可达，如果仍然不可达，则会进行回收，如果可达了，则不会进行回收。&lt;/p&gt;
&lt;p&gt;​	finalize方法对于每一个对象来说，只会执行一次。如果第一次执行这个方法的时候，设置了当前对象与RC ROOTS关联，那么这一次不会进行回收。 那么等到这个对象第二次被标记为可回收时，那么该对象的finalize方法就不会再次执行了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GC ROOTS：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虚拟机栈（栈帧中的本地变量表）中引用的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * demo是栈帧中的本地变量，当 demo = null 时，由于此时 demo 充当了 GC Root 的作用，demo与原来指向的实例 new Demo() 断开了连接，对象被回收。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Demo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    	&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Demo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Demo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    	&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;方法区中类静态属性引用的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * 当栈帧中的本地变量 b = null 时，由于 b 原来指向的对象与 GC Root (变量 b) 断开了连接，所以 b 原来指向的对象会被回收，而由于我们给 a 赋值了变量的引用，a在此时是类静态属性引用，充当了 GC Root 的作用，它指向的对象依然存活!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Demo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Demo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Demo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Demo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Demo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;方法区中常量引用的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * 常量 a 指向的对象并不会因为 demo 指向的对象被回收而回收
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Demo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Demo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Demo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Demo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Demo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;本地方法栈中 JNI（即一般说的 Native 方法）引用的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;34-jvm-垃圾回收算法有哪些&#34;&gt;3.4 JVM 垃圾回收算法有哪些？
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;341-标记清除算法&#34;&gt;3.4.1 标记清除算法
&lt;/h4&gt;&lt;p&gt;标记清除算法，是将垃圾回收分为2个阶段，分别是&lt;strong&gt;标记和清除&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;1.根据可达性分析算法得出的垃圾进行标记&lt;/p&gt;
&lt;p&gt;2.对这些标记为可回收的内容进行垃圾回收&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200802123228945.png&#34;
	width=&#34;829&#34;
	height=&#34;318&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200802123228945_hu12045542225829190304.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200802123228945_hu16564462800967935327.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200802123228945&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;260&#34;
		data-flex-basis=&#34;625px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200802123241536.png&#34;
	width=&#34;813&#34;
	height=&#34;326&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200802123241536_hu12368913952809115282.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200802123241536_hu5101128133235320117.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200802123241536&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;249&#34;
		data-flex-basis=&#34;598px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看到，标记清除算法解决了引用计数算法中的循环引用的问题，没有从root节点引用的对象都会被回收。&lt;/p&gt;
&lt;p&gt;同样，标记清除算法也是有缺点的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;效率较低，&lt;strong&gt;标记和清除两个动作都需要遍历所有的对象&lt;/strong&gt;，并且在GC时，&lt;strong&gt;需要停止应用程序&lt;/strong&gt;，对于交互性要求比较高的应用而言这个体验是非常差的。&lt;/li&gt;
&lt;li&gt;（&lt;strong&gt;重要&lt;/strong&gt;）通过标记清除算法清理出来的内存，碎片化较为严重，因为被回收的对象可能存在于内存的各个角落，所以清理出来的内存是不连贯的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;342-复制算法&#34;&gt;3.4.2 复制算法
&lt;/h4&gt;&lt;p&gt;​	复制算法的核心就是，&lt;strong&gt;将原有的内存空间一分为二，每次只用其中的一块&lt;/strong&gt;，在垃圾回收时，将正在使用的对象复制到另一个内存空间中，然后将该内存空间清空，交换两个内存的角色，完成垃圾的回收。&lt;/p&gt;
&lt;p&gt;​	如果内存中的垃圾对象较多，需要复制的对象就较少，这种情况下适合使用该方式并且效率比较高，反之，则不适合。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200802123304797.png&#34;
	width=&#34;831&#34;
	height=&#34;370&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200802123304797_hu3526249304905870937.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200802123304797_hu9209231639457811669.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200802123304797&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;224&#34;
		data-flex-basis=&#34;539px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200802123315514.png&#34;
	width=&#34;810&#34;
	height=&#34;241&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200802123315514_hu5836517905791757966.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200802123315514_hu16953442273952169073.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200802123315514&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;336&#34;
		data-flex-basis=&#34;806px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;1）将内存区域分成两部分，每次操作其中一个。&lt;/p&gt;
&lt;p&gt;2）当进行垃圾回收时，将正在使用的内存区域中的存活对象移动到未使用的内存区域。当移动完对这部分内存区域一次性清除。&lt;/p&gt;
&lt;p&gt;3）周而复始。&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在垃圾对象多的情况下，效率较高&lt;/li&gt;
&lt;li&gt;清理后，内存无碎片&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分配的2块内存空间，在同一个时刻，只能使用一半，内存使用率较低&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;343-标记整理算法&#34;&gt;3.4.3 标记整理算法
&lt;/h4&gt;&lt;p&gt;​	标记压缩算法是在标记清除算法的基础之上，做了优化改进的算法。和标记清除算法一样，也是从根节点开始，对对象的引用进行标记，在清理阶段，并不是简单的直接清理可回收对象，而是将存活对象都向内存另一端移动，然后清理边界以外的垃圾，从而解决了碎片化的问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200802124108240.png&#34;
	width=&#34;815&#34;
	height=&#34;379&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200802124108240_hu4174324305278878600.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200802124108240_hu17730246484435996795.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200802124108240&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;215&#34;
		data-flex-basis=&#34;516px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200802124119931.png&#34;
	width=&#34;810&#34;
	height=&#34;411&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200802124119931_hu11676845123714050458.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200802124119931_hu1685819547622355597.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200802124119931&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;197&#34;
		data-flex-basis=&#34;472px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;1）标记垃圾。&lt;/p&gt;
&lt;p&gt;2）需要清除向右边走，不需要清除的向左边走。&lt;/p&gt;
&lt;p&gt;3）清除边界以外的垃圾。&lt;/p&gt;
&lt;p&gt;优缺点同标记清除算法，解决了标记清除算法的碎片化的问题，同时，标记压缩算法多了一步，对象移动内存位置的步骤，其效率也有有一定的影响。&lt;/p&gt;
&lt;p&gt;与复制算法对比：复制算法标记完就复制，但标记整理算法得等把所有存活对象都标记完毕，再进行整理&lt;/p&gt;
&lt;h4 id=&#34;344-分代收集算法&#34;&gt;3.4.4 分代收集算法
&lt;/h4&gt;&lt;p&gt;在java8时，堆被分为了两份：&lt;strong&gt;新生代和老年代【1：2】&lt;/strong&gt;，在java7时，还存在一个永久代。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200825231704058.png&#34;
	width=&#34;738&#34;
	height=&#34;316&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200825231704058_hu18074622252264459125.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200825231704058_hu13005918833785138037.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200825231704058&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;233&#34;
		data-flex-basis=&#34;560px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;对于新生代，内部又被分为了三个区域。Eden区，S0区，S1区【8：1：1】&lt;/p&gt;
&lt;p&gt;当对新生代产生GC：MinorGC【young GC】&lt;/p&gt;
&lt;p&gt;当对老年代代产生GC：Major GC&lt;/p&gt;
&lt;p&gt;当对新生代和老年代产生FullGC： 新生代 + 老年代完整垃圾回收，暂停时间长，&lt;strong&gt;应尽力避免&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;3441-工作机制&#34;&gt;3.4.4.1 工作机制
&lt;/h5&gt;&lt;p&gt;1）当创建一个对象的时候，那么这个对象会被分配在新生代的Eden区。当Eden区要满了时候，触发YoungGC。&lt;/p&gt;
&lt;p&gt;2）当进行YoungGC后，此时在Eden区存活的对象被移动到S0区，并且&lt;strong&gt;当前对象的年龄会加1&lt;/strong&gt;，清空Eden区。&lt;/p&gt;
&lt;p&gt;3）当再一次触发YoungGC的时候，会把Eden区中存活下来的对象和S0中的对象，移动到S1区中，这些对象的年龄会加1，清空Eden区和S0区。&lt;/p&gt;
&lt;p&gt;4）当再一次触发YoungGC的时候，会把Eden区中存活下来的对象和S1中的对象，移动到S0区中，这些对象的年龄会加1，清空Eden区和S1区。&lt;/p&gt;
&lt;h5 id=&#34;3442-对象何时晋升到老年代&#34;&gt;3.4.4.2 对象何时晋升到老年代
&lt;/h5&gt;&lt;p&gt;1）对象的年龄达到了某一个限定的值（&lt;strong&gt;默认15岁&lt;/strong&gt;  ），那么这个对象就会进入到老年代中。&lt;/p&gt;
&lt;p&gt;2）大对象。&lt;/p&gt;
&lt;p&gt;3）如果在Survivor区中相同年龄的对象的所有大小之和超过Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代。&lt;/p&gt;
&lt;p&gt;当老年代满了之后，&lt;strong&gt;触发FullGC&lt;/strong&gt;。&lt;strong&gt;FullGC同时回收新生代和老年代&lt;/strong&gt;，当前只会存在一个FullGC的线程进行执行，其他的线程全部会被挂起。&lt;/p&gt;
&lt;h3 id=&#34;35-讲一下新生代老年代永久代的区别&#34;&gt;3.5 讲一下新生代、老年代、永久代的区别？
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;新生代&lt;/strong&gt;主要用来存放新生的对象。一般占据堆空间的1/3。在新生代中，保存着大量的刚刚创建的对象，但是大部分的对象都是朝生夕死，所以在新生代中会频繁的进行MinorGC，进行垃圾回收。新生代又细分为三个区：Eden区、SurvivorFrom、ServivorTo区，三个区的默认比例为：8：1：1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;老年代&lt;/strong&gt;主要存放应用中生命周期长的内存对象。老年代比较稳定，不会频繁的进行MajorGC。而在MaiorGC之前才会先进行一次MinorGc，使得新生的对象进入老年代而导致空间不够才会触发。当无法找到足够大的连续空间分配给新创建的较大对象也会提前触发一次MajorGC进行垃圾回收腾出空间&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;永久代&lt;/strong&gt;指的是永久保存区域。主要存放Class和Meta（元数据）的信息。Classic在被加载的时候被放入永久区域，它和存放的实例的区域不同，在Java8中，永久代已经被移除，取而代之的是一个称之为“元数据区”（&lt;strong&gt;元空间&lt;/strong&gt;）的区域。元空间和永久代类似，都是对JVM中规范中方法的实现。不过元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存的限制。&lt;/p&gt;
&lt;h3 id=&#34;36-说一下-jvm-有哪些垃圾回收器&#34;&gt;3.6 说一下 JVM 有哪些垃圾回收器？
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在jvm中，实现了多种垃圾收集器，包括：串行垃圾收集器、并行垃圾收集器、CMS（并发）垃圾收集器、G1垃圾收集器&lt;/p&gt;
&lt;h4 id=&#34;361-serial收集器&#34;&gt;3.6.1 Serial收集器
&lt;/h4&gt;&lt;p&gt;​	&lt;strong&gt;串行垃圾收集器&lt;/strong&gt;，作用于&lt;strong&gt;新生代&lt;/strong&gt;。是指使用单线程进行垃圾回收，&lt;strong&gt;采用复制算法&lt;/strong&gt;。垃圾回收时，只有一个线程在工作，并且java应用中的所有线程都要暂停，等待垃圾回收的完成。这种现象称之为STW（Stop-The-World）。&lt;strong&gt;其应用在年轻代&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	对于交互性较强的应用而言，这种垃圾收集器是不能够接受的。因此一般在Javaweb应用中是不会采用该收集器的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200802214415076.png&#34;
	width=&#34;718&#34;
	height=&#34;525&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200802214415076_hu5817478131401585325.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200802214415076_hu6892518155445528777.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200802214415076&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;136&#34;
		data-flex-basis=&#34;328px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;362-parallelnew收集器&#34;&gt;3.6.2 ParallelNew收集器
&lt;/h4&gt;&lt;p&gt;​	&lt;strong&gt;并行垃圾收集器&lt;/strong&gt;在串行垃圾收集器的基础之上做了改进，&lt;strong&gt;采用复制算法&lt;/strong&gt;。将单线程改为了多线程进行垃圾回收，这样可以缩短垃圾回收的时间。（这里是指，并行能力较强的机器）。但是对于其他的行为（收集算法、stop the world、对象分配规则、回收策略等）同Serial收集器一样。其也是应用在年轻代。&lt;strong&gt;JDK8默认使用此垃圾回收器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	当然了，并行垃圾收集器在收集的过程中也会暂停应用程序，这个和串行垃圾回收器是一样的，只是并行执行，速度更快些，暂停的时间更短一些。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200802215543670.png&#34;
	width=&#34;785&#34;
	height=&#34;527&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200802215543670_hu1064824265238432624.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200802215543670_hu4570722109745406036.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200802215543670&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;148&#34;
		data-flex-basis=&#34;357px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;363-parallel-scavenge收集器&#34;&gt;3.6.3 Parallel Scavenge收集器
&lt;/h4&gt;&lt;p&gt;​	其是一个应用于&lt;strong&gt;新生代&lt;/strong&gt;的&lt;strong&gt;并行&lt;/strong&gt;垃圾回收器，&lt;strong&gt;采用复制算法&lt;/strong&gt;。它的目标是达到一个可控的吞吐量（吞吐量=运行用户代码时间 /（运行用户代码时间+垃圾收集时间））即虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，吞吐量就是99%。这样可以高效率的利用CPU时间，尽快完成程序的运算任务，适合在后台运算而不需要太多交互的任务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;停顿时间越短对于需要与用户交互的程序来说越好，良好的响应速度能提升用户的体验。&lt;/li&gt;
&lt;li&gt;高吞吐量可以最高效率地利用CPU时间，尽快地完成程序的运算任务，主要适合在后台运算而不太需要太多交互的任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;364-serial-old收集器&#34;&gt;3.6.4 Serial Old收集器
&lt;/h4&gt;&lt;p&gt;​	其是运行于&lt;strong&gt;老年代的单线程&lt;/strong&gt;Serial收集器，&lt;strong&gt;采用标记-整理算法&lt;/strong&gt;，主要是给Client模式下的虚拟机使用。&lt;/p&gt;
&lt;h4 id=&#34;365-parallel-old收集器&#34;&gt;3.6.5 Parallel Old收集器
&lt;/h4&gt;&lt;p&gt;​	其是一个应用于老年代的并行垃圾回收器，&lt;strong&gt;采用标记-整理算法&lt;/strong&gt;。在注重吞吐量及CPU资源敏感的场合，都可以优先考虑Parallel Scavenge+Parallel Old收集器。&lt;/p&gt;
&lt;h4 id=&#34;366-cms垃圾收集器&#34;&gt;3.6.6 CMS垃圾收集器
&lt;/h4&gt;&lt;p&gt;​	CMS全称 Concurrent Mark Sweep，是一款&lt;strong&gt;并发&lt;/strong&gt;的、使用&lt;strong&gt;标记-清除&lt;/strong&gt;算法的垃圾回收器，该回收器是&lt;strong&gt;针对老年代垃圾回收的&lt;/strong&gt;，是一款以获取最短回收停顿时间为目标的收集器，停顿时间短，用户体验就好。&lt;strong&gt;其最大特点是在进行垃圾回收时，应用仍然能正常运行。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CMS垃圾回收器的执行过程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200802222734870.png&#34;
	width=&#34;592&#34;
	height=&#34;367&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200802222734870_hu419312911035212086.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20200802222734870_hu6431868400868235550.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20200802222734870&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;161&#34;
		data-flex-basis=&#34;387px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1)初始标记(Initial Mark)&lt;/strong&gt;：仅仅标记GC Roots能直接关联到的对象，速度快，但是需要“Stop The World”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2)并发标记(Concurrent Mark)&lt;/strong&gt;：就是进行追踪引用链的过程，可以和用户线程并发执行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3)重新标记(Remark)&lt;/strong&gt;：修正并发标记阶段因用户线程继续运行而导致标记发生变化的那部分对象的标记记录，比初始标记时间长但远比并发标记时间短，需要“Stop The World”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4)并发清除(Concurrent Sweep)&lt;/strong&gt;：清除标记为可以回收对象，可以和用户线程并发执行&lt;/p&gt;
&lt;p&gt;​	由于整个过程耗时最长的并发标记和并发清除都可以和用户线程一起工作，所以总体上来看，CMS收集器的内存回收过程和用户线程是并发执行的。&lt;/p&gt;
&lt;h4 id=&#34;367-g1垃圾收集器&#34;&gt;3.6.7 G1垃圾收集器
&lt;/h4&gt;&lt;h5 id=&#34;3671-概述&#34;&gt;3.6.7.1 概述
&lt;/h5&gt;&lt;p&gt;​	对于垃圾回收器来说，前面的三种要么一次性回收年轻代，要么一次性回收老年代。而且现代服务器的堆空间已经可以很大了。为了更加优化GC操作，所以出现了G1。&lt;/p&gt;
&lt;p&gt;​	它是一款**同时应用于新生代和老年代、采用标记-整理算法、软实时、低延迟、可设定目标(最大STW停顿时间)**的垃圾回收器，用于代替CMS，适用于较大的堆(&amp;gt;4~6G)，&lt;strong&gt;在JDK9之后默认使用G1&lt;/strong&gt;。&lt;/p&gt;
&lt;h5 id=&#34;3672-g1的内存布局&#34;&gt;3.6.7.2 G1的内存布局
&lt;/h5&gt;&lt;p&gt;​	G1垃圾收集器相对比其他收集器而言，最大的区别在于它&lt;strong&gt;取消了年轻代、老年代的物理划分&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/20161222153407_691.png&#34;
	width=&#34;510&#34;
	height=&#34;314&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/20161222153407_691_hu11055803484760886240.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/20161222153407_691_hu5551950474864354552.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;162&#34;
		data-flex-basis=&#34;389px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;​	取而代之的是将堆划分为&lt;strong&gt;若干个区域（Region）&lt;/strong&gt;，这些区域中包含了有&lt;strong&gt;逻辑上的年轻代、老年代区域&lt;/strong&gt;。这样做的好处就是，我们再也不用单独的空间对每个代进行设置了，不用担心每个代内存是否足够。&lt;/p&gt;
&lt;p&gt;​	此时可以看到，现在出现了一个&lt;strong&gt;新的区域Humongous&lt;/strong&gt;，它本身属于老年代区。当现在出现了一个巨大的对象，超出了分区容量的一半，则这个对象会进入到该区域。如果一个H区装不下一个巨型对象，那么G1会寻找连续的H分区来存储。为了能找到连续的H区 ，有时候不得不启动Full GC。&lt;/p&gt;
&lt;p&gt;​	同时G1会估计每个Region中的垃圾比例，优先回收垃圾较多的区域。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/20161222153407_471.png&#34;
	width=&#34;681&#34;
	height=&#34;280&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/20161222153407_471_hu2627771045477135861.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/20161222153407_471_hu14889648910458465310.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;243&#34;
		data-flex-basis=&#34;583px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;​	在G1划分的区域中，年轻代的垃圾收集依然采用&lt;strong&gt;暂停所有应用线程的方式&lt;/strong&gt;，将存活对象拷贝到老年代或者Survivor空间，G1收集器通过将&lt;strong&gt;对象从一个区域复制到另外一个区域，完成了清理工作&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​	这就意味着，在正常的处理过程中，G1完成了堆的压缩（至少是部分堆的压缩），这样也就不会有cms内存碎片问题的存在了。&lt;/p&gt;
&lt;h5 id=&#34;3673-垃圾回收模式&#34;&gt;3.6.7.3 垃圾回收模式
&lt;/h5&gt;&lt;p&gt;其提供了三种模式垃圾回收模式： &lt;strong&gt;young GC、Mixed GC、Full GC&lt;/strong&gt;。在不同的条件下被触发。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Young GC&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	发生在年轻代的GC算法，一般对象（除了巨型对象）都是在eden region中分配内存，当所有eden region被耗尽无法申请内存时，就会触发一次young gc，这种触发机制和之前的young gc差不多，执行完一次young gc，活跃对象会被拷贝到survivor region或者晋升到old region中，空闲的region会被放入空闲列表中，等待下次被使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mixed GC&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	当越来越多的对象晋升到老年代old region时，为了避免堆内存被耗尽，虚拟机会触发一个混合的垃圾收集器，即&lt;strong&gt;mixed gc&lt;/strong&gt;，该算法并不是一个old gc，除了回收整个young region，还会回收一部分的old region，这里需要注意：&lt;strong&gt;是一部分老年代，而不是全部老年代&lt;/strong&gt;，可以选择哪些old region进行收集，从而可以对垃圾回收的耗时时间进行控制。&lt;/p&gt;
&lt;p&gt;​	在CMS中，当老年代的使用率达到80%就会触发一次cms gc。在G1中，mixed gc也可以通过&lt;code&gt;-XX:InitiatingHeapOccupancyPercent&lt;/code&gt;设置阈值，&lt;strong&gt;默认为45%&lt;/strong&gt;。当老年代大小占整个堆大小百分比达到该阈值，则触发mixed gc。&lt;/p&gt;
&lt;p&gt;其执行过程和cms类似：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;initial mark: 初始标记过程，整个过程STW，标记了从GC Root可达的对象。&lt;/li&gt;
&lt;li&gt;concurrent marking: 并发标记过程，整个过程gc collector线程与应用线程可以并行执行，标记出GC Root可达对象衍生出去的存活对象，并收集各个Region的存活对象信息。&lt;/li&gt;
&lt;li&gt;remark: 最终标记过程，整个过程STW，标记出那些在并发标记过程中遗漏的，或者内部引用发生变化的对象。&lt;/li&gt;
&lt;li&gt;clean up: 垃圾清除过程，如果发现一个Region中没有存活对象，则把该Region加入到空闲列表中。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;full-gc&#34;&gt;&lt;strong&gt;Full GC&lt;/strong&gt;
&lt;/h5&gt;&lt;p&gt;​	如果对象内存分配速度过快，mixed gc来不及回收，导致老年代被填满，就会触发一次full gc，G1的full gc算法就是单线程执行的serial old gc，会导致异常长时间的暂停时间，需要进行不断的调优，尽可能的避免full gc.&lt;/p&gt;
&lt;h3 id=&#34;37-minor-gcmajor-gcfull-gc是什么&#34;&gt;3.7 Minor GC、Major GC、Full GC是什么
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Minor GC 发生在新生代的垃圾回收，暂停时间短&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Major GC 老年代区域的垃圾回收，老年代空间不足时，会先尝试触发Minor GC。Minor GC之后空间还不足，则会触发Major GC，Major GC速度比较慢，暂停时间长&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Full GC 新生代 + 老年代完整垃圾回收，暂停时间长，&lt;strong&gt;应尽力避免&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-jvm实践调优&#34;&gt;4 JVM实践（调优）
&lt;/h2&gt;&lt;h3 id=&#34;41-jvm-调优的参数可以在哪里设置参数值&#34;&gt;4.1 JVM 调优的参数可以在哪里设置参数值？
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;411-tomcat的设置vm参数&#34;&gt;4.1.1 tomcat的设置vm参数
&lt;/h4&gt;&lt;p&gt;修改TOMCAT_HOME/bin/catalina.sh文件，如下图&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JAVA_OPTS=&amp;quot;-Xms512m -Xmx1024m&amp;quot; &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904151948778.png&#34;
	width=&#34;1667&#34;
	height=&#34;555&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904151948778_hu17235353610560091925.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904151948778_hu11778561851956804891.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220904151948778&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;300&#34;
		data-flex-basis=&#34;720px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;412-springboot项目jar文件启动&#34;&gt;4.1.2 springboot项目jar文件启动
&lt;/h4&gt;&lt;p&gt;通常在linux系统下直接加参数启动springboot项目&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nohup java -Xms512m -Xmx1024m -jar xxxx.jar --spring.profiles.active&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;prod &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;nohup  :  用于在系统后台不挂断地运行命令，退出终端不会影响程序的运行&lt;/p&gt;
&lt;p&gt;参数 &lt;strong&gt;&amp;amp;&lt;/strong&gt;  ：让命令在后台执行，终端退出后命令仍旧执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;42-用的-jvm-调优的参数都有哪些&#34;&gt;4.2 用的 JVM 调优的参数都有哪些？
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​	对于JVM调优，主要就是调整年轻代、年老大、元空间的内存空间大小及使用的垃圾回收器类型。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.oracle.com/java/technologies/javase/vmoptions-jsp.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.oracle.com/java/technologies/javase/vmoptions-jsp.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1）设置堆的初始大小和最大大小，为了防止垃圾收集器在初始大小、最大大小之间收缩堆而产生额外的时间，通常把最大、初始大小设置为相同的值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-Xms：设置堆的初始化大小
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-Xmx：设置堆的最大大小
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2） 设置年轻代中Eden区和两个Survivor区的大小比例。该值如果不设置，则默认比例为8:1:1。Java官方通过增大Eden区的大小，来减少YGC发生的次数，但有时我们发现，虽然次数减少了，但Eden区满&lt;/p&gt;
&lt;p&gt;的时候，由于占用的空间较大，导致释放缓慢，此时STW的时间较长，因此需要按照程序情况去调优。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XXSurvivorRatio=3，表示年轻代中的分配比率：survivor:eden = 2:3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;3）年轻代和老年代默认比例为1：2。可以通过调整二者空间大小比率来设置两者的大小。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:newSize   设置年轻代的初始大小
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:MaxNewSize   设置年轻代的最大大小，  初始大小和最大大小两个值通常相同
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;4）线程堆栈的设置：&lt;strong&gt;每个线程默认会开启1M的堆栈&lt;/strong&gt;，用于存放栈帧、调用参数、局部变量等，但一般256K就够用。通常减少每个线程的堆栈，可以产生更多的线程，但这实际上还受限于操作系统。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-Xss   对每个线程stack大小的调整,-Xss128k
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;5）一般来说，当survivor区不够大或者占用量达到50%，就会把一些对象放到老年区。通过设置合理的eden区，survivor区及使用率，可以将年轻对象保存在年轻代，从而避免full GC，使用-Xmn设置年轻代的大小&lt;/p&gt;
&lt;p&gt;6）系统CPU持续飙高的话，首先先排查代码问题，如果代码没问题，则咨询运维或者云服务器供应商，通常服务器重启或者服务器迁移即可解决。&lt;/p&gt;
&lt;p&gt;7）对于占用内存比较多的大对象，一般会选择在老年代分配内存。如果在年轻代给大对象分配内存，年轻代内存不够了，就要在eden区移动大量对象到老年代，然后这些移动的对象可能很快消亡，因此导致full GC。通过设置参数：-XX:PetenureSizeThreshold=1000000，单位为B，标明对象大小超过1M时，在老年代(tenured)分配内存空间。&lt;/p&gt;
&lt;p&gt;8）一般情况下，年轻对象放在eden区，当第一次GC后，如果对象还存活，放到survivor区，此后，每GC一次，年龄增加1，当对象的年龄达到阈值，就被放到tenured老年区。这个阈值可以同构-XX:MaxTenuringThreshold设置。如果想让对象留在年轻代，可以设置比较大的阈值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;（1）-XX:+UseParallelGC:年轻代使用并行垃圾回收收集器。这是一个关注吞吐量的收集器，可以尽可能的减少垃圾回收时间。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;（2）-XX:+UseParallelOldGC:设置老年代使用并行垃圾回收收集器。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;9）尝试使用大的内存分页：使用大的内存分页增加CPU的内存寻址能力，从而系统的性能。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:+LargePageSizeInBytes 设置内存页的大小
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;10）使用非占用的垃圾收集器。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-XX:+UseConcMarkSweepGC老年代使用CMS收集器降低停顿。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;43-说一下-jvm-调优的工具&#34;&gt;4.3 说一下 JVM 调优的工具？
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;431-命令工具&#34;&gt;4.3.1 命令工具
&lt;/h4&gt;&lt;h5 id=&#34;4311-jpsjava-process-status&#34;&gt;4.3.1.1 jps（Java Process Status）
&lt;/h5&gt;&lt;p&gt;输出JVM中运行的进程状态信息(现在一般使用jconsole)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904104739581.png&#34;
	width=&#34;278&#34;
	height=&#34;133&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904104739581_hu148043871549956762.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904104739581_hu14756129728331186003.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220904104739581&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;209&#34;
		data-flex-basis=&#34;501px&#34;
	
&gt;&lt;/p&gt;
&lt;h5 id=&#34;4312-jstack&#34;&gt;4.3.1.2 jstack
&lt;/h5&gt;&lt;p&gt;查看java进程内&lt;strong&gt;线程的堆栈&lt;/strong&gt;信息。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;jstack &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;option&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &amp;lt;pid&amp;gt;  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;java案例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;com.heima.jvm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Application&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InterruptedException&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;哈哈哈&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;使用jstack查看进行堆栈运行信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904111059602.png&#34;
	width=&#34;1256&#34;
	height=&#34;792&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904111059602_hu8822512273230902428.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904111059602_hu9362432397864055623.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220904111059602&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;158&#34;
		data-flex-basis=&#34;380px&#34;
	
&gt;&lt;/p&gt;
&lt;h5 id=&#34;4313-jmap&#34;&gt;4.3.1.3 jmap
&lt;/h5&gt;&lt;p&gt;用于生成堆转存快照&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;jmap [options] pid  内存映像信息&lt;/p&gt;
&lt;p&gt;jmap -heap pid   显示Java堆的信息&lt;/p&gt;
&lt;p&gt;jmap -dump format=b,file=heap.hprof pid&lt;/p&gt;
&lt;p&gt;​		format=b表示以hprof二进制格式转储Java堆的内存
​		file=&lt;filename&gt;用于指定快照dump文件的文件名。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例1，显示了某一个java运行的堆信息&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nl&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;yuhon&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jmap&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heap&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;53280&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Attaching&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ID&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;53280&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;please&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Debugger&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;attached&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;successfully&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compiler&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;detected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JVM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;321&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b07&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;using&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;local&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;allocation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parallel&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GC&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//并行的垃圾回收器&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Heap&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Configuration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//堆配置&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MinHeapFreeRatio&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//空闲堆空间的最小百分比&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MaxHeapFreeRatio&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//空闲堆空间的最大百分比&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MaxHeapSize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;8524922880&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;8130&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;0MB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//堆空间允许的最大值&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NewSize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;178257920&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;170&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;0MB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//新生代堆空间的默认值&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MaxNewSize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;               &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2841640960&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2710&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;0MB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//新生代堆空间允许的最大值&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OldSize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;356515840&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;340&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;0MB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//老年代堆空间的默认值&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NewRatio&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                 &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//新生代与老年代的堆空间比值，表示新生代：老年代=1：2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SurvivorRatio&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//两个Survivor区和Eden区的堆空间比值为8,表示S0:S1:Eden=1:1:8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MetaspaceSize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;21807104&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;796875MB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//元空间的默认值&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CompressedClassSpaceSize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1073741824&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;0MB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//压缩类使用空间大小&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MaxMetaspaceSize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;17592186044415&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MB&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//元空间允许的最大值&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;G1HeapRegionSize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;0MB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//在使用 G1 垃圾回收算法时，JVM 会将 Heap 空间分隔为若干个 Region，该参数用来指定每个 Region 空间的大小。&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Heap&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Usage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Young&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Generation&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Eden&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Space&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//Eden使用情况&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;capacity&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;134217728&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;0MB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;used&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;10737496&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;240074157714844MB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;123480232&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;117&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;75992584228516MB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;000057935714722&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;used&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;From&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Space&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//Survivor-From 使用情况&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;capacity&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;22020096&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;0MB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;used&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;0MB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;22020096&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;0MB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;used&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;To&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Space&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//Survivor-To 使用情况&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;capacity&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;22020096&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;0MB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;used&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;0MB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;22020096&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;0MB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;used&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Old&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Generation&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//老年代 使用情况&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;capacity&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;356515840&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;340&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;0MB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;used&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;0MB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;356515840&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;340&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;0MB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;used&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3185&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;interned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Strings&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;occupying&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;261264&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h5 id=&#34;4314-jhat&#34;&gt;4.3.1.4 jhat
&lt;/h5&gt;&lt;p&gt;用于分析jmap生成的堆转存快照（一般不推荐使用，而是使用Ecplise Memory Analyzer）&lt;/p&gt;
&lt;h5 id=&#34;4315-jstat&#34;&gt;4.3.1.5 jstat
&lt;/h5&gt;&lt;p&gt;是JVM统计监测工具。可以用来显示垃圾回收信息、类加载信息、新生代统计信息等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常见参数&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;①总结垃圾回收统计&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;jstat -gcutil pid
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904114511854.png&#34;
	width=&#34;827&#34;
	height=&#34;74&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904114511854_hu6269354257811570190.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904114511854_hu10163568702101554540.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220904114511854&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1117&#34;
		data-flex-basis=&#34;2682px&#34;
	
&gt;&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;字段&lt;/th&gt;
          &lt;th&gt;含义&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;S0&lt;/td&gt;
          &lt;td&gt;幸存1区当前使用比例&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;S1&lt;/td&gt;
          &lt;td&gt;幸存2区当前使用比例&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;E&lt;/td&gt;
          &lt;td&gt;伊甸园区使用比例&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;O&lt;/td&gt;
          &lt;td&gt;老年代使用比例&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;M&lt;/td&gt;
          &lt;td&gt;元数据区使用比例&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;CCS&lt;/td&gt;
          &lt;td&gt;压缩使用比例&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;YGC&lt;/td&gt;
          &lt;td&gt;年轻代垃圾回收次数&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;YGCT&lt;/td&gt;
          &lt;td&gt;年轻代垃圾回收消耗时间&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;FGC&lt;/td&gt;
          &lt;td&gt;老年代垃圾回收次数&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;FGCT&lt;/td&gt;
          &lt;td&gt;老年代垃圾回收消耗时间&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;GCT&lt;/td&gt;
          &lt;td&gt;垃圾回收消耗总时间&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;②垃圾回收统计&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;jstat -gc pid
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904115157363.png&#34;
	width=&#34;1385&#34;
	height=&#34;78&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904115157363_hu197455487302321022.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904115157363_hu16518530250394342066.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220904115157363&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1775&#34;
		data-flex-basis=&#34;4261px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;432-可视化工具&#34;&gt;4.3.2 可视化工具
&lt;/h4&gt;&lt;h5 id=&#34;4321-jconsole&#34;&gt;4.3.2.1 jconsole
&lt;/h5&gt;&lt;p&gt;用于对jvm的内存，线程，类 的监控，是一个基于 jmx 的 GUI 性能监控工具&lt;/p&gt;
&lt;p&gt;打开方式：java 安装目录 bin目录下 直接启动 jconsole.exe 就行&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904115936095.png&#34;
	width=&#34;890&#34;
	height=&#34;753&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904115936095_hu6642333735254886024.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904115936095_hu7968342978178439839.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220904115936095&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;118&#34;
		data-flex-basis=&#34;283px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;可以内存、线程、类等信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904120057211.png&#34;
	width=&#34;897&#34;
	height=&#34;750&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904120057211_hu11574614898712742852.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904120057211_hu4344457567527843385.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220904120057211&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;119&#34;
		data-flex-basis=&#34;287px&#34;
	
&gt;&lt;/p&gt;
&lt;h5 id=&#34;4322-visualvm故障处理工具&#34;&gt;4.3.2.2 VisualVM：故障处理工具
&lt;/h5&gt;&lt;p&gt;能够监控线程，内存情况，查看方法的CPU时间和内存中的对 象，已被GC的对象，反向查看分配的堆栈&lt;/p&gt;
&lt;p&gt;打开方式：java 安装目录 bin目录下 直接启动 jvisualvm.exe就行&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904120356174.png&#34;
	width=&#34;980&#34;
	height=&#34;750&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904120356174_hu17842521489104890720.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904120356174_hu1820170407740282177.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220904120356174&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;130&#34;
		data-flex-basis=&#34;313px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;监控程序运行情况&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904132011289.png&#34;
	width=&#34;1911&#34;
	height=&#34;968&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904132011289_hu11647631114533593433.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904132011289_hu14150461917566665868.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220904132011289&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;197&#34;
		data-flex-basis=&#34;473px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;查看运行中的dump&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904132134095.png&#34;
	width=&#34;1521&#34;
	height=&#34;566&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904132134095_hu1683408823750691797.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904132134095_hu11198012518187640223.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220904132134095&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;268&#34;
		data-flex-basis=&#34;644px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;查看堆中的信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904132346495.png&#34;
	width=&#34;1066&#34;
	height=&#34;900&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904132346495_hu13872948613203328710.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904132346495_hu11817954910292059015.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220904132346495&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;118&#34;
		data-flex-basis=&#34;284px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;44-java内存泄露的排查思路&#34;&gt;4.4 java内存泄露的排查思路？
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、通过jmap指定打印他的内存快照 dump&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有的情况是内存溢出之后程序则会直接中断，而jmap只能打印在运行中的程序，所以建议通过参数的方式的生成dump文件，配置如下：&lt;/p&gt;
&lt;p&gt;-XX:+HeapDumpOnOutOfMemoryError
-XX:HeapDumpPath=/home/app/dumps/      指定生成后文件的保存目录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、通过工具， VisualVM（Ecplise MAT）去分析 dump文件&lt;/p&gt;
&lt;p&gt;VisualVM可以加载离线的dump文件，如下图&lt;/p&gt;
&lt;p&gt;文件&amp;ndash;&amp;gt;装入&amp;mdash;&amp;gt;选择dump文件即可查看堆快照信息&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果是linux系统中的程序，则需要把dump文件下载到本地（windows环境）下，打开VisualVM工具分析。VisualVM目前只支持在windows环境下运行可视化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904132925812.png&#34;
	width=&#34;430&#34;
	height=&#34;435&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904132925812_hu13583541672726810282.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904132925812_hu13030342047904265640.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220904132925812&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;98&#34;
		data-flex-basis=&#34;237px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;3、通过查看堆信息的情况，可以大概定位内存溢出是哪行代码出了问题&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904133722905.png&#34;
	width=&#34;874&#34;
	height=&#34;770&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904133722905_hu16584616344377275225.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904133722905_hu15818620757265147061.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220904133722905&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;113&#34;
		data-flex-basis=&#34;272px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;4、找到对应的代码，通过阅读上下文的情况，进行修复即可&lt;/p&gt;
&lt;h3 id=&#34;45-cpu飙高排查方案与思路&#34;&gt;4.5 CPU飙高排查方案与思路？
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1.使用top命令查看占用cpu的情况&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904161818255.png&#34;
	width=&#34;963&#34;
	height=&#34;378&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904161818255_hu7177102466871094397.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904161818255_hu4439763637189614672.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220904161818255&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;254&#34;
		data-flex-basis=&#34;611px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;2.通过top命令查看后，可以查看是哪一个进程占用cpu较高，上图所示的进程为：30978&lt;/p&gt;
&lt;p&gt;3.查看当前线程中的进程信息&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ps H -eo pid,tid,%cpu &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;m&#34;&gt;30978&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;pid  进行id&lt;/p&gt;
&lt;p&gt;tid   进程中的线程id&lt;/p&gt;
&lt;p&gt;%  cpu使用率&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904162117022.png&#34;
	width=&#34;631&#34;
	height=&#34;339&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904162117022_hu16858786872131165532.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904162117022_hu13316636879651659357.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220904162117022&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;186&#34;
		data-flex-basis=&#34;446px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;4.通过上图分析，在进程30978中的线程30979占用cpu较高&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：上述的线程id是一个十进制，我们需要把这个线程id转换为16进制才行，因为通常在日志中展示的都是16进制的线程id名称&lt;/p&gt;
&lt;p&gt;转换方式：&lt;/p&gt;
&lt;p&gt;在linux中执行命令&lt;/p&gt;
&lt;p&gt;&lt;code&gt;printf &amp;quot;%x\n&amp;quot; 30979&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904162654928.png&#34;
	width=&#34;454&#34;
	height=&#34;106&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904162654928_hu11851779829336670613.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904162654928_hu12337331514488442293.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220904162654928&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;428&#34;
		data-flex-basis=&#34;1027px&#34;
	
&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;5.可以根据线程 id 找到有问题的线程，进一步定位到问题代码的源码行号&lt;/p&gt;
&lt;p&gt;执行命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;jstack &lt;span class=&#34;m&#34;&gt;30978&lt;/span&gt;   此处是进程id
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904162941977.png&#34;
	width=&#34;1056&#34;
	height=&#34;577&#34;
	srcset=&#34;https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904162941977_hu251831166255625837.png 480w, https://example.com/p/jvm%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20220904162941977_hu17829236348136901240.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220904162941977&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;183&#34;
		data-flex-basis=&#34;439px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;5面试现场&#34;&gt;5.面试现场
&lt;/h2&gt;&lt;h3 id=&#34;51-jvm组成&#34;&gt;5.1 JVM组成
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：JVM由那些部分组成，运行流程是什么？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，好的~~&lt;/p&gt;
&lt;p&gt;在JVM中共有四大部分，分别是ClassLoader（类加载器）、Runtime Data Area（运行时数据区，内存分区）、Execution Engine（执行引擎）、Native Method Library（本地库接口）&lt;/p&gt;
&lt;p&gt;它们的运行流程是：&lt;/p&gt;
&lt;p&gt;第一，类加载器（ClassLoader）把Java代码转换为字节码&lt;/p&gt;
&lt;p&gt;第二，运行时数据区（Runtime Data Area）把字节码加载到内存中，而字节码文件只是JVM的一套指令集规范，并不能直接交给底层系统去执行，而是有执行引擎运行&lt;/p&gt;
&lt;p&gt;第三，执行引擎（Execution Engine）将字节码翻译为底层系统指令，再交由CPU执行去执行，此时需要调用其他语言的本地库接口（Native Method Library）来实现整个程序的功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：好的，你能详细说一下 JVM 运行时数据区吗？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，好~&lt;/p&gt;
&lt;p&gt;运行时数据区包含了堆、方法区、栈、本地方法栈、程序计数器这几部分，每个功能作用不一样。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;堆解决的是对象实例存储的问题，垃圾回收器管理的主要区域。&lt;/li&gt;
&lt;li&gt;方法区可以认为是堆的一部分，用于存储已被虚拟机加载的信息，常量、静态变量、即时编译器编译后的代码。&lt;/li&gt;
&lt;li&gt;栈解决的是程序运行的问题，栈里面存的是栈帧，栈帧里面存的是局部变量表、操作数栈、动态链接、方法出口等信息。&lt;/li&gt;
&lt;li&gt;本地方法栈与栈功能相同，本地方法栈执行的是本地方法，一个Java调用非Java代码的接口。&lt;/li&gt;
&lt;li&gt;程序计数器（PC寄存器）程序计数器中存放的是当前线程所执行的字节码的行数。JVM工作时就是通过改变这个计数器的值来选取下一个需要执行的字节码指令。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：好的，你再详细介绍一下程序计数器的作用？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，是这样~~&lt;/p&gt;
&lt;p&gt;java虚拟机对于多线程是通过线程轮流切换并且分配线程执行时间。在任何的一个时间点上，一个处理器只会处理执行一个线程，如果当前被执行的这个线程它所分配的执行时间用完了【挂起】。处理器会切换到另外的一个线程上来进行执行。并且这个线程的执行时间用完了，接着处理器就会又来执行被挂起的这个线程。这时候程序计数器就起到了关键作用，程序计数器在来回切换的线程中记录他上一次执行的行号，然后接着继续向下执行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：你能给我详细的介绍Java堆吗?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;好的~&lt;/p&gt;
&lt;p&gt;Java中的堆术语线程共享的区域。主要用来保存&lt;strong&gt;对象实例，数组&lt;/strong&gt;等，当堆中没有内存空间可分配给实例，也无法再扩展时，则抛出OutOfMemoryError异常。&lt;/p&gt;
&lt;p&gt;​	在JAVA8中堆内会存在年轻代、老年代&lt;/p&gt;
&lt;p&gt;​	1）Young区被划分为三部分，Eden区和两个大小严格相同的Survivor区，其中，Survivor区间中，某一时刻只有其中一个是被使用的，另外一个留做垃圾收集时复制对象用。在Eden区变满的时候， GC就会将存活的对象移到空闲的Survivor区间中，根据JVM的策略，在经过几次垃圾收集后，任然存活于Survivor的对象将被移动到Tenured区间。&lt;/p&gt;
&lt;p&gt;​	2）Tenured区主要保存生命周期长的对象，一般是一些老的对象，当一些对象在Young复制转移一定的次数以后，对象就会被转移到Tenured区。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：能不能解释一下方法区？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;好的~&lt;/p&gt;
&lt;p&gt;与虚拟机栈类似。本地方法栈是为虚拟机&lt;strong&gt;执行本地方法时提供服务的&lt;/strong&gt;。不需要进行GC。本地方法一般是由其他语言编写。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：你听过直接内存吗？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯~~&lt;/p&gt;
&lt;p&gt;它又叫做&lt;strong&gt;堆外内存&lt;/strong&gt;，&lt;strong&gt;线程共享的区域&lt;/strong&gt;，在 Java 8 之前有个&lt;strong&gt;永久代&lt;/strong&gt;的概念，实际上指的是 HotSpot 虚拟机上的永久代，它用永久代实现了 JVM 规范定义的方法区功能，&lt;strong&gt;主要存储类的信息，常量，静态变量&lt;/strong&gt;，即时编译器编译后代码等，这部分由于是在堆中实现的，受 GC 的管理，不过由于永久代有 -XX:MaxPermSize 的上限，所以如果大量动态生成类（将类信息放入永久代），很容易造成 OOM，有人说可以把永久代设置得足够大，但很难确定一个合适的大小，受类数量，常量数量的多少影响很大。&lt;/p&gt;
&lt;p&gt;​	所以在 Java 8 中就把方法区的实现移到了本地内存中的元空间中，这样方法区就不受 JVM 的控制了,也就不会进行 GC，也因此提升了性能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：什么是虚拟机栈&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虚拟机栈是描述的是方法执行时的内存模型,是线程私有的，生命周期与线程相同,每个方法被执行的同时会创建&lt;strong&gt;栈桢&lt;/strong&gt;。保存执行方法时的&lt;strong&gt;局部变量、动态连接信息、方法返回地址信息&lt;/strong&gt;等等。方法开始执行的时候会进栈，方法执行完会出栈【相当于清空了数据】，所以这块区域&lt;strong&gt;不需要进行 GC&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：能说一下堆栈的区别是什么吗？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，好的，有这几个区别&lt;/p&gt;
&lt;p&gt;第一，栈内存一般会用来存储局部变量和方法调用，但堆内存是用来存储Java对象和数组的的。堆会GC垃圾回收，而栈不会。&lt;/p&gt;
&lt;p&gt;第二、栈内存是线程私有的，而堆内存是线程共有的。&lt;/p&gt;
&lt;p&gt;第三、两者异常错误不同，但如果栈内存或者堆内存不足都会抛出异常。&lt;/p&gt;
&lt;p&gt;栈空间不足：java.lang.StackOverFlowError。&lt;/p&gt;
&lt;p&gt;堆空间不足：java.lang.OutOfMemoryError。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;52-类加载器&#34;&gt;5.2 类加载器
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：什么是类加载器，类加载器有哪些?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，是这样的&lt;/p&gt;
&lt;p&gt;JVM只会运行二进制文件，而类加载器（ClassLoader）的主要作用就是将&lt;strong&gt;字节码文件加载到JVM中&lt;/strong&gt;，从而让Java程序能够启动起来。&lt;/p&gt;
&lt;p&gt;常见的类加载器有4个&lt;/p&gt;
&lt;p&gt;第一个是启动类加载器(BootStrap ClassLoader)：其是由C++编写实现。用于加载JAVA_HOME/jre/lib目录下的类库。&lt;/p&gt;
&lt;p&gt;第二个是扩展类加载器(ExtClassLoader)：该类是ClassLoader的子类，主要加载JAVA_HOME/jre/lib/ext目录中的类库。&lt;/p&gt;
&lt;p&gt;第三个是应用类加载器(AppClassLoader)：该类是ClassLoader的子类，主要用于加载classPath下的类，也就是加载开发者自己编写的Java类。&lt;/p&gt;
&lt;p&gt;第四个是自定义类加载器：开发者自定义类继承ClassLoader，实现自定义类加载规则。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：说一下类装载的执行过程？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，这个过程还是挺多的。&lt;/p&gt;
&lt;p&gt;类从加载到虚拟机中开始，直到卸载为止，它的整个生命周期包括了：加载、验证、准备、解析、初始化、使用和卸载这7个阶段。其中，验证、准备和解析这三个部分统称为连接（linking）&lt;/p&gt;
&lt;p&gt;1.加载：查找和导入class文件&lt;/p&gt;
&lt;p&gt;2.验证：保证加载类的准确性&lt;/p&gt;
&lt;p&gt;3.准备：为类变量分配内存并设置类变量初始值&lt;/p&gt;
&lt;p&gt;4.解析：把类中的符号引用转换为直接引用&lt;/p&gt;
&lt;p&gt;5.初始化：对类的静态变量，静态代码块执行初始化操作&lt;/p&gt;
&lt;p&gt;6.使用：JVM 开始从入口方法开始执行用户的程序代码&lt;/p&gt;
&lt;p&gt;7.卸载：当用户程序代码执行完毕后，JVM 便开始销毁创建的 Class 对象，最后负责运行的 JVM 也退出内存&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：什么是双亲委派模型？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，它是是这样的。&lt;/p&gt;
&lt;p&gt;如果一个类加载器收到了类加载的请求，它首先不会自己尝试加载这个类，而是把这请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传说到顶层的启动类加载器中，只有当父类加载器返回自己无法完成这个加载请求（它的搜索返回中没有找到所需的类）时，子类加载器才会尝试自己去加载&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：JVM为什么采用双亲委派机制&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主要有两个原因。&lt;/p&gt;
&lt;p&gt;第一、通过双亲委派机制可以避免某一个类被重复加载，当父类已经加载后则无需重复加载，保证唯一性。&lt;/p&gt;
&lt;p&gt;第二、为了安全，保证类库API不会被修改&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;53-垃圾回收&#34;&gt;5.3 垃圾回收
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：简述Java垃圾回收机制？（GC是什么？为什么要GC）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，是这样~~&lt;/p&gt;
&lt;p&gt;为了让程序员更专注于代码的实现，而不用过多的考虑内存释放的问题，所以，在Java语言中，有了自动的垃圾回收机制，也就是我们熟悉的GC(Garbage Collection)。&lt;/p&gt;
&lt;p&gt;有了垃圾回收机制后，程序员只需要关心内存的申请即可，内存的释放由系统自动识别完成。&lt;/p&gt;
&lt;p&gt;在进行垃圾回收时，不同的对象引用类型，GC会采用不同的回收时机&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：强引用、软引用、弱引用、虚引用的区别？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯嗯~&lt;/p&gt;
&lt;p&gt;强引用最为普通的引用方式，表示一个对象处于&lt;strong&gt;有用且必须&lt;/strong&gt;的状态，如果一个对象具有强引用，则GC并不会回收它。即便堆中内存不足了，宁可出现OOM，也不会对其进行回收&lt;/p&gt;
&lt;p&gt;软引用表示一个对象处于&lt;strong&gt;有用且非必须&lt;/strong&gt;状态，如果一个对象处于软引用，在内存空间足够的情况下，GC机制并不会回收它，而在内存空间不足时，则会在OOM异常出现之间对其进行回收。但值得注意的是，因为GC线程优先级较低，软引用并不会立即被回收。&lt;/p&gt;
&lt;p&gt;弱引用表示一个对象处于&lt;strong&gt;可能有用且非必须&lt;/strong&gt;的状态。在GC线程扫描内存区域时，一旦发现弱引用，就会回收到弱引用相关联的对象。对于弱引用的回收，无关内存区域是否足够，一旦发现则会被回收。同样的，因为GC线程优先级较低，所以弱引用也并不是会被立刻回收。&lt;/p&gt;
&lt;p&gt;虚引用表示一个对象处于&lt;strong&gt;无用&lt;/strong&gt;的状态。在任何时候都有可能被垃圾回收。虚引用的使用必须和引用队列Reference Queue联合使用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：对象什么时候可以被垃圾器回收&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;思考一会~~&lt;/p&gt;
&lt;p&gt;如果一个或多个对象没有任何的引用指向它了，那么这个对象现在就是垃圾，如果定位了垃圾，则有可能会被垃圾回收器回收。&lt;/p&gt;
&lt;p&gt;如果要定位什么是垃圾，有两种方式来确定，第一个是引用计数法，第二个是可达性分析算法&lt;/p&gt;
&lt;p&gt;通常都使用可达性分析算法来确定是不是垃圾&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;： JVM 垃圾回收算法有哪些？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我记得一共有四种，分别是标记清除算法、复制算法、标记整理算法、分代回收&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;： 你能详细聊一下分代回收吗？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关于分代回收是这样的&lt;/p&gt;
&lt;p&gt;在java8时，堆被分为了两份：新生代和老年代，它们默认空间占用比例是1:2&lt;/p&gt;
&lt;p&gt;对于新生代，内部又被分为了三个区域。Eden区，S0区，S1区默认空间占用比例是8:1:1&lt;/p&gt;
&lt;p&gt;具体的工作机制是有些情况：&lt;/p&gt;
&lt;p&gt;1）当创建一个对象的时候，那么这个对象会被分配在新生代的Eden区。当Eden区要满了时候，触发YoungGC。&lt;/p&gt;
&lt;p&gt;2）当进行YoungGC后，此时在Eden区存活的对象被移动到S0区，并且&lt;strong&gt;当前对象的年龄会加1&lt;/strong&gt;，清空Eden区。&lt;/p&gt;
&lt;p&gt;3）当再一次触发YoungGC的时候，会把Eden区中存活下来的对象和S0中的对象，移动到S1区中，这些对象的年龄会加1，清空Eden区和S0区。&lt;/p&gt;
&lt;p&gt;4）当再一次触发YoungGC的时候，会把Eden区中存活下来的对象和S1中的对象，移动到S0区中，这些对象的年龄会加1，清空Eden区和S1区。&lt;/p&gt;
&lt;p&gt;5）对象的年龄达到了某一个限定的值（&lt;strong&gt;默认15岁&lt;/strong&gt;  ），那么这个对象就会进入到老年代中。&lt;/p&gt;
&lt;p&gt;当然也有特殊情况，如果进入Eden区的是一个大对象，在触发YoungGC的时候，会直接存放到老年代&lt;/p&gt;
&lt;p&gt;当老年代满了之后，&lt;strong&gt;触发FullGC&lt;/strong&gt;。&lt;strong&gt;FullGC同时回收新生代和老年代&lt;/strong&gt;，当前只会存在一个FullGC的线程进行执行，其他的线程全部会被挂起。  我们在程序中要尽量避免FullGC的出现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：讲一下新生代、老年代、永久代的区别？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯！是这样的，简单说就是&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新生代&lt;/strong&gt;主要用来存放新生的对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;老年代&lt;/strong&gt;主要存放应用中生命周期长的内存对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;永久代&lt;/strong&gt;指的是永久保存区域。主要存放Class和Meta（元数据）的信息。在Java8中，永久代已经被移除，取而代之的是一个称之为“元数据区”（&lt;strong&gt;元空间&lt;/strong&gt;）的区域。元空间和永久代类似，不过元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存的限制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：说一下 JVM 有哪些垃圾回收器？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在jvm中，实现了多种垃圾收集器，包括：串行垃圾收集器、并行垃圾收集器（JDK8默认）、CMS（并发）垃圾收集器、G1垃圾收集器（JDK9默认）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：Minor GC、Major GC、Full GC是什么&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，其实它们指的是不同代之间的垃圾回收&lt;/p&gt;
&lt;p&gt;Minor GC 发生在新生代的垃圾回收，暂停时间短&lt;/p&gt;
&lt;p&gt;Major GC 老年代区域的垃圾回收，老年代空间不足时，会先尝试触发Minor GC。Minor GC之后空间还不足，则会触发Major GC，Major GC速度比较慢，暂停时间长&lt;/p&gt;
&lt;p&gt;Full GC 新生代 + 老年代完整垃圾回收，暂停时间长，&lt;strong&gt;应尽力避免&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;54-jvm实践调优&#34;&gt;5.4 JVM实践（调优）
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：JVM 调优的参数可以在哪里设置参数值？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们当时的项目是springboot项目，可以在项目启动的时候，java -jar中加入参数就行了&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：用的 JVM 调优的参数都有哪些？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，这些参数是比较多的&lt;/p&gt;
&lt;p&gt;我记得当时我们设置过堆的大小，像-Xms和-Xmx&lt;/p&gt;
&lt;p&gt;还有就是可以设置年轻代中Eden区和两个Survivor区的大小比例&lt;/p&gt;
&lt;p&gt;还有就是可以设置使用哪种垃圾回收器等等。具体的指令还真记不太清楚。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：嗯，好的，你们平时调试 JVM都用了哪些工具呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，我们一般都是使用jdk自带的一些工具，比如&lt;/p&gt;
&lt;p&gt;jps 输出JVM中运行的进程状态信息&lt;/p&gt;
&lt;p&gt;jstack查看java进程内&lt;strong&gt;线程的堆栈&lt;/strong&gt;信息。&lt;/p&gt;
&lt;p&gt;jmap 用于生成堆转存快照&lt;/p&gt;
&lt;p&gt;jstat用于JVM统计监测工具&lt;/p&gt;
&lt;p&gt;还有一些可视化工具，像jconsole和VisualVM等&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：假如项目中产生了java内存泄露，你说一下你的排查思路？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，这个我在之前项目排查过&lt;/p&gt;
&lt;p&gt;第一呢可以通过jmap指定打印他的内存快照 dump文件，不过有的情况打印不了，我们会设置vm参数让程序自动生成dump文件&lt;/p&gt;
&lt;p&gt;第二，可以通过工具去分析 dump文件，jdk自带的VisualVM就可以分析&lt;/p&gt;
&lt;p&gt;第三，通过查看堆信息的情况，可以大概定位内存溢出是哪行代码出了问题&lt;/p&gt;
&lt;p&gt;第四，找到对应的代码，通过阅读上下文的情况，进行修复即可&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：好的，那现在再来说一种情况，就是说服务器CPU持续飙高，你的排查方案与思路？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，我思考一下~~&lt;/p&gt;
&lt;p&gt;可以这么做~~&lt;/p&gt;
&lt;p&gt;第一可以使用使用top命令查看占用cpu的情况&lt;/p&gt;
&lt;p&gt;第二通过top命令查看后，可以查看是哪一个进程占用cpu较高，记录这个进程id&lt;/p&gt;
&lt;p&gt;第三可以通过ps 查看当前进程中的线程信息，看看哪个线程的cpu占用较高&lt;/p&gt;
&lt;p&gt;第四可以jstack命令打印进行的id，找到这个线程，就可以进一步定位问题代码的行号&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>每日八股</title>
        <link>https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/</link>
        <pubDate>Sat, 09 Nov 2024 16:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/</guid>
        <description>&lt;h1 id=&#34;每日八股持续更新中&#34;&gt;每日八股（持续更新中）
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本文档只记录答题思路，旨在当面试时遇到时能快速切入重点，然后灵活的组织语言回答问题。同时，为了回答的流畅性，应当尽可能的学会怎么读这些英文单词，用英文表达&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;day1&#34;&gt;day1
&lt;/h2&gt;&lt;h3 id=&#34;q1微服务你用到了那些中间件&#34;&gt;Q1：微服务你用到了那些中间件
&lt;/h3&gt;&lt;p&gt;这张图的演变能非常好的描述我们单体结构向微服务转变过程&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241109150514024.png&#34;
	width=&#34;1407&#34;
	height=&#34;532&#34;
	srcset=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241109150514024_hu3403548323223964474.png 480w, https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241109150514024_hu7738992844842760827.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241109150514024&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;264&#34;
		data-flex-basis=&#34;634px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果可以，请从&lt;strong&gt;单体向微服务架构转变&lt;/strong&gt;的思路来回答每个中间件对应的职责（跟面试官说你在公司经历过单体项目向微服务转型的过程，希望以此出发展开回答）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;单体的耦合度太高，同时无法很好的承载高并发，简单的水平拓展成本过高（也不治本），需要&lt;strong&gt;拆分服务&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;而服务与服务之间需要远程调用，需要统一的&lt;strong&gt;注册中心和配置中心&lt;/strong&gt;（人工维护太繁琐）&lt;/li&gt;
&lt;li&gt;服务于服务之间的调用，并不必须同步，可以采取引入&lt;strong&gt;消息队列&lt;/strong&gt;完成异步调用&lt;/li&gt;
&lt;li&gt;用户的请求需要统一的服务网关来路由（注意这里路由是个动词），以及负载均衡，拦截增强（比如鉴权）&lt;/li&gt;
&lt;li&gt;服务集群的增长，带来了更多的数据，对我们的数据、缓存有更高的挑战，所以需要&lt;strong&gt;分布式缓存、分库分表、分布式搜索&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;集群规模增大带来，debug不局限于某一台服务，需要&lt;strong&gt;分布式日志服务&lt;/strong&gt;和&lt;strong&gt;系统监控链路追踪&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;引入自动化部署（DevOps）来做到持续开发、持续交付，降低部署维护成本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有了演变过程，哪些中间件做哪些事情，自然就有了答案&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;思考一个问题：假如一个交易平台对于订单需要严格的排序，需要一个定序系统来生产一个全局唯一的序列号，请问这种情况时候还能做水平拓展？如何容灾？&lt;a class=&#34;link&#34; href=&#34;https://liaoxuefeng.com/books/java/springcloud/sequence/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;设计定序系统 - Java教程 - 廖雪峰的官方网站 (liaoxuefeng.com)&lt;/a&gt;（看文末的**如何在定序器崩溃后自动恢复？**问题，拓展抢锁）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q2nacos注册中心的心跳机制&#34;&gt;Q2：Nacos注册中心的心跳机制
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;注册中心、心跳检测（ping pong）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每个加入nacos的服务都会&lt;strong&gt;注册自己信息&lt;/strong&gt;以及&lt;strong&gt;定时拉取服务列表&lt;/strong&gt;（why？for rpc）&lt;/p&gt;
&lt;p&gt;注册到nacos的服务以及nacos本身都需要通过主动或者被动的方式维持自己的存活（&lt;strong&gt;主动上报或是主动询问&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;类似场景拓展：&lt;a class=&#34;link&#34; href=&#34;https://developer.kookapp.cn/doc/websocket&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Websocket (kookapp.cn)&lt;/a&gt;（看连接流程、重连、连接流程示意图即可）&lt;/p&gt;
&lt;h3 id=&#34;q3常见的负载均衡算法&#34;&gt;Q3：常见的负载均衡算法
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;轮询、权重、响应时间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q4threadlocal&#34;&gt;Q4：ThreadLocal
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;看成一个&lt;strong&gt;全局&lt;code&gt;Map&amp;lt;Thread, Object&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;线程池复用&lt;/strong&gt;会带来污染&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spring是否也需要&lt;/strong&gt;考虑相关问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;基本概念&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实际上，可以把&lt;code&gt;ThreadLocal&lt;/code&gt;看成一个&lt;strong&gt;全局&lt;code&gt;Map&amp;lt;Thread, Object&amp;gt;&lt;/code&gt;&lt;/strong&gt;：每个线程获取&lt;code&gt;ThreadLocal&lt;/code&gt;变量时，总是&lt;strong&gt;使用&lt;code&gt;Thread&lt;/code&gt;自身作为key&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;因此，&lt;code&gt;ThreadLocal&lt;/code&gt;相当于给每个线程都开辟了一个独立的存储空间（上下文语境，学点高级词汇），各个线程的&lt;code&gt;ThreadLocal&lt;/code&gt;关联的实例互不干扰。&lt;/p&gt;
&lt;p&gt;最后，特别注意&lt;code&gt;ThreadLocal&lt;/code&gt;一定要在&lt;code&gt;finally&lt;/code&gt;中remove！！！！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拓展（问就是看过了SpringMVC源码）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;清除非常重要，为什么？&lt;strong&gt;线程池复用&lt;/strong&gt;会带来污染&lt;/p&gt;
&lt;p&gt;再想一个问题，我们有这样的问题需要使用ThreadLocal，&lt;strong&gt;Spring是否也需要&lt;/strong&gt;？结合SpringMVC执行流程&lt;/p&gt;
&lt;p&gt;SpringMVC把每一个请求交给一个独立的线程处理，内部同样用到了线程池、ThreadLocal。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DispatcherServlet和RequestContextHolder&lt;/strong&gt;（注意context这个单词，就是内容或则说上下文的意思）&lt;/p&gt;
&lt;p&gt;RequestContextHolder会存储请求和响应的相关消息，也就是一个请求的上下文，所以毫无疑问SpringMVC同样有使用到ThreadLocal&lt;/p&gt;
&lt;h3 id=&#34;q5聚集索引和非聚集索引&#34;&gt;Q5：聚集索引和非聚集索引
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;数据和索引在一起存储&lt;/p&gt;
&lt;p&gt;数据和索引不在一起&lt;/p&gt;
&lt;p&gt;主动提及回表查询和覆盖查询、索引的维护有代价&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q6如何定位慢查询&#34;&gt;Q6：如何定位慢查询
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;注意慢查询和慢sql&lt;/p&gt;
&lt;p&gt;前端：静态资源丢失&lt;/p&gt;
&lt;p&gt;后端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;redis缓存&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MQ积压&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据库：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;慢日志&lt;/li&gt;
&lt;li&gt;explain
&lt;ul&gt;
&lt;li&gt;key&lt;/li&gt;
&lt;li&gt;key_length&lt;/li&gt;
&lt;li&gt;rows&lt;/li&gt;
&lt;li&gt;extra&lt;/li&gt;
&lt;li&gt;type&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主动提及索引失效的场景&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/968f19d0cd15f17a0275011cd61d40f.png&#34;
	width=&#34;1043&#34;
	height=&#34;655&#34;
	srcset=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/968f19d0cd15f17a0275011cd61d40f_hu3319291941357880734.png 480w, https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/968f19d0cd15f17a0275011cd61d40f_hu4864076192576903339.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;968f19d0cd15f17a0275011cd61d40f&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;382px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;q7java的map&#34;&gt;Q7：Java的Map
&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基本&lt;/p&gt;
&lt;p&gt;HashMap的七七八八，你们懂的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拓展&lt;/p&gt;
&lt;p&gt;HashMap/WeakHashMap优化枚举类预加载（弱引用、垃圾回收器）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里讲讲HashMap/WeakHashMap优化枚举类预加载&lt;/p&gt;
&lt;p&gt;首先，我们使用枚举类往往无法避免valueOf()操作，但这个操作是O(n)的，对这个操作非常常见的优化就是通过static静态代码块在类加载的时候把它们加载到一个Map中，也就是缓存，可以优化查找速度到O(1)。&lt;/p&gt;
&lt;p&gt;用WeakHashMap的原因，就是为了避免OOM（以及把面试官往JVM引导）&lt;/p&gt;
&lt;h2 id=&#34;day2&#34;&gt;day2
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;今天务必要去看一看JVM（看看，挑简单的记，复杂的记大纲），后面的时间可能很难沉下心来去理解，JVM重点关注内存模型和垃圾回收器&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://liaoxuefeng.com/books/java/design-patterns/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;设计模式 - Java教程 - 廖雪峰的官方网站 (liaoxuefeng.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://refactoringguru.cn/design-patterns/factory-method&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;工厂方法设计模式 (refactoringguru.cn)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q1gataway实现原理&#34;&gt;Q1：GataWay实现原理
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;GataWay三大作用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路由（网关就是看门老大爷）、负载（分清楚网关负载和服务调用负载的区别）、拦截（注意拦截范围和之前的拦截器更大）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现原理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring WebFlux、Netty（和传统Servlet有什么区别）&lt;/li&gt;
&lt;li&gt;结合作用讲请求到网关到具体的服务的流程&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;q2你们项目中的远程调用用的什么技术&#34;&gt;Q2：你们项目中的远程调用用的什么技术
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;务必理解当前我们的远程调用就是http请求，那么对于一个http请求我们需要封装交给httpClient发送请求并接收响应&lt;/p&gt;
&lt;p&gt;这种调用往往是同步的，我们还会需要消息队列来达成一些异步调用的操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;openFeign、底层是http客户端、dubbo&lt;/p&gt;
&lt;h3 id=&#34;q3jvm的组成&#34;&gt;Q3：JVM的组成
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;主要组成部分（不会就硬背）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;组成部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;类加载器&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行时数据区&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;方法区&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用于&lt;strong&gt;存储已被加载的类的信息&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;堆&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JVM 管理的最大的一块内存区域，被所有线程共享。&lt;strong&gt;用于存储对象实例和数组&lt;/strong&gt;，几乎所有的对象实例和数组都是在堆中&lt;strong&gt;分配内存&lt;/strong&gt;的。（和垃圾回收器有关）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;程序计数器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当前线程所执行的字节码的&lt;strong&gt;行号指示器&lt;/strong&gt;（学过计组的话会有类似概念）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;虚拟机栈&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行引擎&lt;/p&gt;
&lt;p&gt;两种执行方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;解释执行&lt;/strong&gt;：一条一条地读取字节码指令并执行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;即时编译&lt;/strong&gt;：将热点代码编译成机器码，提高执行效率&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：在一个简单的 Java 循环语句中，刚开始执行时可能是通过解释执行，当循环执行次数足够多，被判定为热点代码后，执行引擎就会对这个循环部分进行即时编译，之后再执行这个循环时就会以更快的机器码形式执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本地库接口&lt;/p&gt;
&lt;p&gt;使得Java能调用Native Method Library（java源码中如果见到native往往指的就是c相关的东西）中的函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;该文章在字节码的层面分析了异常处理，可以看看，作为了解JVM的一个开头&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.aliyun.com/article/1182650&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java异常处理和最佳实践（含案例分析）-阿里云开发者社区 (aliyun.com)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q4类加载机制ai来的详情大家自己ai&#34;&gt;Q4：类加载机制(AI来的，详情大家自己ai)
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;五个过程、三种类加载器（简称五过三类），不行就背小标题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;五个过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;加载（loading）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查找并读取类的字节码文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;三个加载器&lt;/p&gt;
&lt;p&gt;双亲委派模型（&lt;strong&gt;避免用户自定义的类覆盖Java核心类库的类&lt;/strong&gt;）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类加载器收到类加载请求时先找它的父类加载器，再找子加载器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;验证（verification）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;确保符合 Java 虚拟机规范&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;准备（preparation）&lt;/p&gt;
&lt;p&gt;为类的&lt;strong&gt;静态变量分配内存&lt;/strong&gt;并设置初始值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解析（resolution）&lt;/p&gt;
&lt;p&gt;将类、方法、字段等的符号引用&lt;strong&gt;转换为直接引用&lt;/strong&gt;（便于快速访问）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化（initialization）&lt;/p&gt;
&lt;p&gt;主要是执行类的&lt;strong&gt;初始化代码&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三种类加载器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;启动类加载器（&lt;strong&gt;JVM的启动&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;JVM内置，负责加载Java核心类库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拓展类加载器&lt;/p&gt;
&lt;p&gt;负责加载拓展类库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用程序类加载器&lt;/p&gt;
&lt;p&gt;负责加载classpath下的类&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;q5垃圾回收器有哪些你们项目用的是什么&#34;&gt;Q5：垃圾回收器有哪些，你们项目用的是什么
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;G1、CMS，我们用的G1&lt;/p&gt;
&lt;p&gt;1.9开始默认是G1&lt;/p&gt;
&lt;p&gt;先了解GC相关的概念如：FullGC、YoungGC、分代收集、STW&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要了解相关配置参数如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-XX:G1HeapRegionSize=n&lt;/strong&gt;指定分区大小&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-XX:G1NewSizePercent&lt;/strong&gt;设置年轻代在堆中占比&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-XX:MaxGCPauseMillis&lt;/strong&gt;指定回收时最大暂停时间（G1和CMS不同的点很大程度在于G1是规定时间内尽力完成回收：软实时性）这是&lt;strong&gt;最重要的参数之一&lt;/strong&gt;（只记一个那就记这个）&lt;/li&gt;
&lt;li&gt;。。。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分代收集算法（见3.4.4 分代收集算法，先了解，明天背）&lt;/p&gt;
&lt;h3 id=&#34;q6jvm内存模型jmm&#34;&gt;Q6：JVM内存模型（JMM）
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.aliyun.com/article/1586039?spm=a2c6h.14164896.0.0.2a9847c5YKHm42&amp;amp;scm=20140722.S_community@@%e6%96%87%e7%ab%a0@@1586039._.ID_1586039-RL_JMM-LOC_search~UND~community~UND~item-OR_ser-V_4-P0_5&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JUC（8）JMM-阿里云开发者社区 (aliyun.com)&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;俩内存、三关键字&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;主内存&lt;/p&gt;
&lt;p&gt;线程共享&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;工作内存&lt;/p&gt;
&lt;p&gt;线程独有，存储对共享变量的&lt;strong&gt;副本&lt;/strong&gt;（注意是副本）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指令重排序导致数据不一致&lt;/p&gt;
&lt;p&gt;使用volatile修饰变量，&lt;strong&gt;确保变量的修改立即对其他线程可见&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;day3&#34;&gt;day3
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;看设计模式，有时间看看springMVC源码&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://liaoxuefeng.com/books/java/web/mvc-adv/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MVC高级开发 - Java教程 - 廖雪峰的官方网站 (liaoxuefeng.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis面试题选自航哥面试专题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q1docker部署和常用指令&#34;&gt;Q1：Docker部署和常用指令
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;部署：dockerfile和dockercompose&lt;/p&gt;
&lt;p&gt;镜像、容器、数据卷、dockerfile、dockercompose&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;镜像pull、push，docker images，还有docker rmi；还有容器相关的docker run，docker start、docker stop，进入容器的&lt;strong&gt;docker exec -it&lt;/strong&gt; 容器名称 bash，查看日志的&lt;strong&gt;docker logs。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;q2linux指令&#34;&gt;Q2：linux指令
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;chmod、cat info.log | grep &amp;lsquo;关键字&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q3都有哪些设计模式用过哪些具体场景&#34;&gt;Q3：都有哪些设计模式，用过哪些，具体场景？
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;经典的面向对象设计模式：三大类型、23种&lt;/p&gt;
&lt;p&gt;还有领域驱动模型（DDD）：先当成思想和沟通语言去理解（通用语言和限界上下文）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.aliyun.com/article/1583387?spm=a2c6h.14164896.0.0.c8e547c5LlXN3S&amp;amp;scm=20140722.S_community@@%e6%96%87%e7%ab%a0@@1583387._.ID_1583387-RL_DDD-LOC_search~UND~community~UND~item-OR_ser-V_4-P0_19&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DDD基础教程：一文带你读懂DDD分层架构-阿里云开发者社区 (aliyun.com)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;创建型模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工厂模式&lt;/li&gt;
&lt;li&gt;原型&lt;/li&gt;
&lt;li&gt;单例&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结构型模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;适配器&lt;/li&gt;
&lt;li&gt;代理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;行为型模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;责任链（filter）&lt;/p&gt;
&lt;p&gt;责任链模式是一种把多个处理器组合在一起，依次处理请求的模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命令&lt;/p&gt;
&lt;p&gt;把请求封装成一个命令，然后执行该命令。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解释器&lt;/p&gt;
&lt;p&gt;给定一个语言，定义它的&lt;strong&gt;文法&lt;/strong&gt;的一种表示，并定义一个解释器，这个解释器使用该表示来&lt;strong&gt;解释语言中的句子&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;中介&lt;/p&gt;
&lt;p&gt;目的是把多方会谈变成双方会谈，从而实现多方的松耦合。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;观察者模式（发布订阅模式）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;模板方法（template）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DDD&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;了解的不多，但可以在开发和沟通的时候带着领域驱动思想去帮助我思考问题，比如&lt;/li&gt;
&lt;li&gt;通用语言：规定整个项目组（包括开发和产品）当前项目的名词（比如zzyl的PRD的前几页有对护理等级的定义和解释），帮助项目组&lt;strong&gt;提高沟通效率&lt;/strong&gt;（但学习成本相应地提高）&lt;/li&gt;
&lt;li&gt;限界上下文：限界上下文是一个显式的语义和语境上的边界，领域模型便存在于边界之内。&lt;/li&gt;
&lt;li&gt;聚合、聚合根：&lt;/li&gt;
&lt;li&gt;充血模型、贫血模型&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;总的来说DDD不是我们现阶段需要重点关注的，但是能够带着它的思想去开发、分析需求绝对是能体现出个人开发经验的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q4redis数据类型&#34;&gt;Q4：Redis数据类型
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;结合自己业务说，如：云岚面试第八章抢券业务的Redis数据结构用的什么？具体说说&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q5redis三剑客以及如何解决&#34;&gt;Q5：Redis三剑客以及如何解决
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;击穿、穿透、雪崩&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://cloud.tencent.com/developer/article/2407203&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;不用背八股文！一文搞懂redis缓存击穿、穿透、雪崩！-腾讯云开发者社区-腾讯云 (tencent.com)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;击穿：（热点数据过期导致大量请求直接打到数据库）
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;热点数据&lt;/strong&gt;即将过期时，提前异步更新缓存&lt;/li&gt;
&lt;li&gt;设置热点数据永不过期（谨慎使用）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;穿透：（查询一个数据库不存在的值导致每次都要查询数据库，恶意请求）
&lt;ul&gt;
&lt;li&gt;缓存空值&lt;/li&gt;
&lt;li&gt;布隆过滤器，底层是bitmap（查询数据时，先通过布隆过滤器判断键是否可能存在，如果不存在就直接返回空值）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;雪崩：短时间大量的key同时失效
&lt;ul&gt;
&lt;li&gt;key：固定+随机时间&lt;/li&gt;
&lt;li&gt;缓存预热&lt;/li&gt;
&lt;li&gt;redis架构升级&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;q6redis数据持久化&#34;&gt;Q6：Redis数据持久化
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;RDB和AOF&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;RDB&lt;/p&gt;
&lt;p&gt;对redis生成快照（二进制文件），非常快，但有数据丢失风险&lt;/p&gt;
&lt;p&gt;AOF&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将每个写命令追加到AOF文件末尾，恢复时重新执行这些命令&lt;/li&gt;
&lt;li&gt;同步策略
&lt;ul&gt;
&lt;li&gt;always&lt;/li&gt;
&lt;li&gt;everysec（默认这个）&lt;/li&gt;
&lt;li&gt;no&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;q7redis集群方案&#34;&gt;Q7：redis集群方案
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;主从复制、哨兵模式、分片&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;主从：降低读写压力&lt;/p&gt;
&lt;p&gt;哨兵模式：故障恢复（这里有个哨兵选举流程需要展开）&lt;/p&gt;
&lt;p&gt;分片：提高存储上限（hash插槽分配原理）&lt;/p&gt;
&lt;h3 id=&#34;q8springmvc执行流程和常用注解&#34;&gt;Q8：springmvc执行流程和常用注解
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;结合d1q4的拓展点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;day4&#34;&gt;day4
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;看MQ、云岚秒杀、优惠卷&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q1什么场景下你们用mq&#34;&gt;Q1：什么场景下你们用MQ
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;其实就是是否理解异步和同步，以及有它的优点&lt;/p&gt;
&lt;p&gt;扯到异步调用的时候可以去带过一下其他的消息中间件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同步&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113145604595.png&#34;
	width=&#34;900&#34;
	height=&#34;493&#34;
	srcset=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113145604595_hu12931243403802827944.png 480w, https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113145604595_hu16899941488563117361.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241113145604595&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;438px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;异步&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113145632572.png&#34;
	width=&#34;1012&#34;
	height=&#34;359&#34;
	srcset=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113145632572_hu2933011480670642604.png 480w, https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113145632572_hu15731027870915228808.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241113145632572&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;281&#34;
		data-flex-basis=&#34;676px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;异步通信优点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;耦合度低&lt;/li&gt;
&lt;li&gt;吞吐量提升&lt;/li&gt;
&lt;li&gt;故障隔离&lt;/li&gt;
&lt;li&gt;流量削峰&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;依赖于Broker（消息服务器）的可靠性、安全性、吞吐能力&lt;/li&gt;
&lt;li&gt;架构复杂了，业务没有明显的流程线，不好追踪管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;q2你们项目为什么用mq&#34;&gt;Q2：你们项目为什么用MQ
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113145957459.png&#34;
	width=&#34;970&#34;
	height=&#34;382&#34;
	srcset=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113145957459_hu15905244567374609702.png 480w, https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113145957459_hu2657717627631594184.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241113145957459&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;253&#34;
		data-flex-basis=&#34;609px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;q3mq有哪几种交换机模式你们用的哪种&#34;&gt;Q3：MQ有哪几种交换机模式，你们用的哪种
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;FanoutExchanage&lt;/li&gt;
&lt;li&gt;DirectExchanage&lt;/li&gt;
&lt;li&gt;TopicExchanage&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;q4mq如何保证消息不丢失&#34;&gt;Q4：MQ如何保证消息不丢失
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;分为三种情况，发送端、MQ自己、消费端&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.yuque.com/yzxb/index/uhwxnv0n5wcmd226&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;6-MQ篇 (yuque.com)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;发布者确认机制&lt;/li&gt;
&lt;li&gt;发布者回执机制&lt;/li&gt;
&lt;li&gt;MQ持久化&lt;/li&gt;
&lt;li&gt;消费者确认机制，消费者失败重试机制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进一步的放丢失方案&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113151009061.png&#34;
	width=&#34;959&#34;
	height=&#34;292&#34;
	srcset=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113151009061_hu12670985402470632247.png 480w, https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113151009061_hu6009523065227154668.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241113151009061&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;328&#34;
		data-flex-basis=&#34;788px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;q5消息积压如何解决&#34;&gt;Q5：消息积压如何解决
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;提高消费能力&lt;/li&gt;
&lt;li&gt;增加消费者&lt;/li&gt;
&lt;li&gt;扩大队列容积（LazyQueue）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;q6rabbitmq如何保证消费的顺序性-&#34;&gt;Q6：RabbitMQ如何保证消费的顺序性 ?
&lt;/h3&gt;&lt;h3 id=&#34;q7springioc&#34;&gt;Q7：SpringIOC
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;IOC的俩种实现&lt;/p&gt;
&lt;p&gt;相关问题：Bean的生命周期&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;BeanFactory&lt;/li&gt;
&lt;li&gt;ApplicationContext&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;q8springaop&#34;&gt;Q8：SpringAOP
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;CGLIB和JDK的动态代理&lt;/p&gt;
&lt;p&gt;相关问题：AOP相关注解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q9三级缓存循环依赖&#34;&gt;Q9：三级缓存（循环依赖）
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Spring三级缓存主要是为了优雅的解决循环依赖的问题，同时也能通过缓存提高性能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一级缓存&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储&lt;strong&gt;完全初始化好的单例bean&lt;/strong&gt;（已经注入所有的属性，完成初始化方法的操作）&lt;/li&gt;
&lt;li&gt;是一个ConcurrentHashMap&amp;lt;String, Object&amp;gt;，Key是Bean名称，Value是Bean实例&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二级缓存&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储早期创建的单例bean，&lt;strong&gt;还没有完成所有的初始化&lt;/strong&gt;，但已经可以被其他bean引用。&lt;/li&gt;
&lt;li&gt;数据结构同一级缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三级缓存&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储的是创建Bean的工厂对象&lt;/li&gt;
&lt;li&gt;数据结构是一个ConcurrentHashMap&amp;lt;String, Object&amp;gt;，键是 Bean 的名称，值是&lt;code&gt;ObjectFactory&lt;/code&gt;对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以&lt;strong&gt;一个例子来说明三级缓存的执行流程&lt;/strong&gt;：Bean A、Bean B存在A依赖B，B依赖A的情况，此时&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A的创建过程
&lt;ul&gt;
&lt;li&gt;Spring开始创建A的时候，会先检查&lt;strong&gt;一级缓存&lt;/strong&gt;，发现没有A，然后开始实例化A（&lt;strong&gt;调用A的构造函数&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;实例化A后，发现A存在循环依赖的问题，于是把&lt;strong&gt;A的工厂对象放入三级缓存&lt;/strong&gt;中&lt;/li&gt;
&lt;li&gt;然后Spring给A注入属性，发现需要注入B（且三级缓存中没有B的工厂对象），就暂停A的创建，开始创建B&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;B的创建
&lt;ul&gt;
&lt;li&gt;创建B时，先看&lt;strong&gt;一级缓存&lt;/strong&gt;，没有，调用构造函数实例化&lt;/li&gt;
&lt;li&gt;返现B循环依赖，把B的工&lt;strong&gt;厂对象放入三级缓存&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;当给B注入属性时，发现需要A，就去一级缓存找，没有就找二级缓存，也没有就找到三级缓存中A的工厂对象，通过这个工厂对象获取A的早期实例，然后将A放入二级缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;此时B完成创建，放入一级缓存&lt;/li&gt;
&lt;li&gt;回到A，A从一级缓存中拿到B，完成创建，放入一级缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;简单来说，就是B拿了个A的套壳，完成了创建放入一级缓存，然后A就能顺利创建，此时B拿的A也完成了创建&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;q10设计模式&#34;&gt;Q10：设计模式
&lt;/h3&gt;&lt;h3 id=&#34;q11事务失效场景&#34;&gt;Q11：事务失效场景
&lt;/h3&gt;&lt;h3 id=&#34;q12mq消息可靠性&#34;&gt;Q12：MQ消息可靠性
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113202043738.png&#34;
	width=&#34;987&#34;
	height=&#34;674&#34;
	srcset=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113202043738_hu3121173068814285928.png 480w, https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113202043738_hu10766936849562874345.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241113202043738&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;146&#34;
		data-flex-basis=&#34;351px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;q13消息幂等性&#34;&gt;Q13：消息幂等性
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;参照本博客云岚到家的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;q1：服务保护&lt;/p&gt;
&lt;p&gt;Sentinel、GateWay、MQ削峰填谷&lt;/p&gt;
&lt;p&gt;q2：用什么做单元测试&lt;/p&gt;
&lt;p&gt;Junit、MockITO&lt;/p&gt;
&lt;h2 id=&#34;day5&#34;&gt;day5
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;MQ+点赞&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q1怎么保证mq消息不丢失&#34;&gt;Q1：怎么保证MQ消息不丢失
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;三个点&lt;/p&gt;
&lt;p&gt;额外的保证，失败消息落库，定时任务重投，超过重投次数转人工&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;生产者确认机制（每个消息指定为一ID）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;publish-confirm：消息是否到交换机&lt;/li&gt;
&lt;li&gt;publish-return：消息是否到队列&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MQ消息持久化防止MQ宕机&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MQ自身做了队列持久化、消息持久化、交换机持久化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;消费者确认机制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;消费者&lt;strong&gt;获取消息并处理消息&lt;/strong&gt;后发送ACK回执
&lt;ul&gt;
&lt;li&gt;一般auto ack，spring根据是否有异常帮我们决定是ack还是nack&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;q2了解过mq的延迟消息吗&#34;&gt;Q2：了解过MQ的延迟消息吗
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;延迟消息通过官方插件可以实现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;过去我们做过一些&lt;strong&gt;取消超时订单&lt;/strong&gt;的业务场景有实施过这个方案&lt;/p&gt;
&lt;h3 id=&#34;q3那你讲讲取消超时订单的方案&#34;&gt;Q3：那你讲讲取消超时订单的方案
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;RabbitMQ延迟消息、redis过期时间、定时任务（xxljob）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于RabbitMQ延迟消息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建订单时，发送一个带有延迟时间的消息到mq的延迟队列，&lt;strong&gt;当延迟时间结束，就会把消息投到对应的目标队列&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于redis过期时间的方案&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;redis的键可以设置过期时间。&lt;strong&gt;当订单创建的时候&lt;/strong&gt;，以订单ID为键存到redis。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;当键过期时&lt;/strong&gt;，通过redis的过期回调机制、或者定时扫描过期键的方式来触发取消订单的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;xxljob定时任务操订单表，查是否超时，触发取消逻辑&lt;/p&gt;
&lt;p&gt;还可以懒加载的形式触发取消&lt;/p&gt;
&lt;h3 id=&#34;q4如何解决消息积压&#34;&gt;Q4：如何解决消息积压
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;提高消费速度，增加更多消费者&lt;/li&gt;
&lt;li&gt;扩容（最终方案）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;q5redis的set和zset&#34;&gt;Q5：redis的set和zset
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;通过这个问题去了解set和zset的数据结构如何&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;reidis的set：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;以商品id为key，也是就是说，一个商品id对应一个set&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;value存的是点赞用户的id，set里面包含多个userid表示给这个商品点赞的用户，这样就是实现了不重复。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241114170338964.png&#34;
	width=&#34;732&#34;
	height=&#34;217&#34;
	srcset=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241114170338964_hu8965381684585442403.png 480w, https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241114170338964_hu14644127139112320381.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114170338964&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;337&#34;
		data-flex-basis=&#34;809px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;redis的zset：以点赞为例子，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有给文章点赞的，有给评论点赞的，一个点赞类型对应一个zset，key就是：like:wz(业务也是就点赞+类型也就是文章)&lt;/li&gt;
&lt;li&gt;以文章的点赞为例，有多个文章，那么zset的member就存的是文章id，score就是它的点赞数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241114170350123.png&#34;
	width=&#34;748&#34;
	height=&#34;235&#34;
	srcset=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241114170350123_hu14685443581975736989.png 480w, https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241114170350123_hu7544475994254060718.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114170350123&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;318&#34;
		data-flex-basis=&#34;763px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;q6点赞服务设计&#34;&gt;Q6：点赞服务设计
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;先介绍总体设计，然后是消息发送和订阅的交换机队列模型，最后是流程（介绍redis的缓存set点赞，zset点赞数）&lt;/p&gt;
&lt;p&gt;思考问题：同时点赞怎么办，同时一个点赞一个取消怎么办&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;总体设计：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点赞是一个&lt;strong&gt;通用服务&lt;/strong&gt;，不同的系统都需要点赞数，比如我们的商品需要点赞数，评论需要点赞数
&lt;ul&gt;
&lt;li&gt;为了满足点赞的&lt;strong&gt;高频写入特点&lt;/strong&gt;，点赞系统只记录点赞本身的行为数据，对于业务的统计，都交给业务方存储&lt;/li&gt;
&lt;li&gt;为了满足点赞的&lt;strong&gt;通用性&lt;/strong&gt;，我们通过异步的方式，用MQ发布点赞消息（direct、topic交换机），点赞消息包含&lt;strong&gt;业务id和点赞数量&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241114172425041.png&#34;
	width=&#34;672&#34;
	height=&#34;369&#34;
	srcset=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241114172425041_hu8285190696643862037.png 480w, https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241114172425041_hu6871392471419452252.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114172425041&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;437px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;然后是MQ模型的设计（交换机，bingkey）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241114172600190.png&#34;
	width=&#34;735&#34;
	height=&#34;273&#34;
	srcset=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241114172600190_hu10915775714599378998.png 480w, https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241114172600190_hu2800731360242388289.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114172600190&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;269&#34;
		data-flex-basis=&#34;646px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;最后是整个流程（redis的set、zset设计在上一题）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户点赞触发流程开始，前端提交点赞信息给我们后端，&lt;/li&gt;
&lt;li&gt;查询redis缓存看当前这个key（假设是一个文章id）下的member（用户id）是否存在，不存在就新增（俩个线程同时触发点赞，开始都没查到member存在，但写入的时候因为set去重只会有一个写入，所以这里已经实现了幂等）&lt;/li&gt;
&lt;li&gt;统计点赞数量，写到zset里面，通过定时读取缓存的任务发送到mq交给下流业务费统计&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241114174920568.png&#34;
	width=&#34;762&#34;
	height=&#34;530&#34;
	srcset=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241114174920568_hu4495224589648861689.png 480w, https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241114174920568_hu4107003843676993934.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114174920568&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;143&#34;
		data-flex-basis=&#34;345px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;q7定时任务这里为什么要删除bizid和点赞总数&#34;&gt;Q7：定时任务这里为什么要删除bizid和点赞总数
&lt;/h3&gt;&lt;p&gt;为了每次推送的都是变化量，同时可以防止内存溢出&lt;/p&gt;
&lt;h3 id=&#34;q8同时点赞怎么办&#34;&gt;Q8：同时点赞怎么办
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;首先点赞被触发两次其实问题不大，只要记录数对了，就可以，set既然已经完成去重&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q9同时点赞和取消点赞怎么办&#34;&gt;Q9：同时点赞和取消点赞怎么办
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;明确这个问题的后果是什么：可能是先执行点赞后取消也可能先取消后点赞，那么对应同一个操作（把这个操作看作（点赞，取消点赞，时间）为一个操作）会对应俩种结果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Redis pipelining&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这里做了合并写的处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分布式锁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用业务id（文章id、商品id）作为键，生成一个锁标识（比如UUID）。可以使用SETNX命令，如果返回1表示成功获取锁，返回0表示锁被占用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;q10每次点赞成功都会触发查询点赞统计总数如何优化&#34;&gt;Q10：每次点赞成功都会触发查询点赞统计总数，如何优化
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Redis pipelining通过批处理redis命令来优化往返时间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Redis pipelining通过一次发出多个命令而无需等待对每个单独命令的响应来提高性能的技术&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这里还可能涉及到的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;redis容量的问题&lt;/li&gt;
&lt;li&gt;redis持久化频率的问题&lt;/li&gt;
&lt;li&gt;redis相关命令&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;day6&#34;&gt;day6
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;redis、mysql相关问题再来一遍&lt;/p&gt;
&lt;p&gt;优惠卷流程问题&lt;/p&gt;
&lt;p&gt;优惠卷细节问题（不要求非常精确，主要是辅助流程理解）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q1mq怎么防止消息重复消费消息幂等性&#34;&gt;Q1：MQ怎么防止消息重复消费（消息幂等性）
&lt;/h3&gt;&lt;h3 id=&#34;q2缓存一致性&#34;&gt;Q2：缓存一致性
&lt;/h3&gt;&lt;h3 id=&#34;q3优惠卷方案中有几个定时任务&#34;&gt;Q3：优惠卷方案中有几个定时任务
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;俩个，预热和同步&lt;/p&gt;
&lt;p&gt;频次、xxljob相关问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q4优惠卷方案中表设计怎么样的&#34;&gt;Q4：优惠卷方案中表设计怎么样的
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;四张表，如果有分级优惠卷可以升级为五张或则加入根id字段&lt;/p&gt;
&lt;p&gt;每张表都有什么关键字段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;优惠卷活动表&lt;/strong&gt;：记录活动详情、库存&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;活动类型&lt;/li&gt;
&lt;li&gt;发放开始、结束时间&lt;/li&gt;
&lt;li&gt;库存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;优惠卷表&lt;/strong&gt;：记录优惠卷为哪个用户拥有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;活动id、用户id（优惠卷的拥有者）&lt;/li&gt;
&lt;li&gt;优惠卷使用状态&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;优惠卷核销表&lt;/strong&gt;：记录哪个用户的哪个订单使用了哪个优惠卷&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优惠卷id、用户id、活动id、订单号&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;优惠卷退回表&lt;/strong&gt;：记录优惠卷退回记录&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优惠卷id、用户id、退回时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;q4-1优惠卷模块数据流是怎么样的&#34;&gt;Q4-1：优惠卷模块数据流是怎么样的
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2024/png/1169676/1709539597954-02a38eed-e5b2-461f-8aeb-977bf645600a.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_51%2Ctext_5rK554K45bCP5rOi%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fformat%2Cwebp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;whiteboard_exported_image (59).png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;q5优惠卷方案中redis的数据结构是怎么样的&#34;&gt;Q5：优惠卷方案中redis的数据结构是怎么样的
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;四种key，一个String、三个Hash&lt;/p&gt;
&lt;p&gt;大key、小key、value都是什么&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;优惠卷活动信息&lt;/p&gt;
&lt;p&gt;优惠卷活动库存&lt;/p&gt;
&lt;p&gt;优惠卷成功队列&lt;/p&gt;
&lt;p&gt;抢卷成功队列&lt;/p&gt;
&lt;h3 id=&#34;q6优惠卷为了防止超卖超领是怎么做的&#34;&gt;Q6：优惠卷为了防止超卖超领是怎么做的
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;预热、redis+lua&lt;/p&gt;
&lt;p&gt;没有选择的方案&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q7lua脚本的逻辑是怎么样的&#34;&gt;Q7：lua脚本的逻辑是怎么样的
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;首先验证抢卷成功队列中是否有对应的用户id（抢卷成功队列大小key、value是怎么样的）&lt;/li&gt;
&lt;li&gt;然后查询活动库存是否充足（库存大小key、value是怎么样的的），充足则继续&lt;/li&gt;
&lt;li&gt;向成功队列插入数据&lt;/li&gt;
&lt;li&gt;减库存&lt;/li&gt;
&lt;li&gt;写入抢卷同步队列&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;每一步都对应一个错误代码，都是什么&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q8为什么要让这三个key落在同一个redis节点上怎么实现&#34;&gt;Q8：为什么要让这三个key落在同一个redis节点上，怎么实现
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;lua脚本报错，{同样内容}保证这三个key落到一个节点&lt;/p&gt;
&lt;p&gt;redis分片集群的散列插槽&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q9抢卷成功队列如何同步到数据库这里如果消息发送消费失败怎么办&#34;&gt;Q9：抢卷成功队列如何同步到数据库，这里如果消息发送、消费失败怎么办
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;MQ重试&lt;/p&gt;
&lt;p&gt;开启本地重试&lt;/p&gt;
&lt;p&gt;超过重试次数落库，人工处理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;抢卷完可能马上就去秒杀了，要在这里做数据分析错开时间&lt;/p&gt;
&lt;h3 id=&#34;q10通过定时任务修改活动状态有延迟怎么解决的&#34;&gt;Q10：通过定时任务修改活动状态有延迟，怎么解决的
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;前端控制&lt;/p&gt;
&lt;p&gt;后端判断&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q11你们的优惠卷活动有做预约吗&#34;&gt;Q11：你们的优惠卷活动有做预约吗
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;预约方案怎么做&lt;/p&gt;
&lt;p&gt;预约方案有什么好处&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1LHDFY4Eka/?spm_id_from=333.880.my_history.page.click&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;预约机制对秒杀系统的重要性_哔哩哔哩_bilibili&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;qfinal优惠卷怎么组织语言回答&#34;&gt;QFinal：优惠卷怎么组织语言回答
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;上述诸多问题如何组织回答问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;相关如何组织问题的核心在于：如何抽象逻辑&lt;/strong&gt;（也是如何抽象出通解的过程）&lt;/p&gt;
&lt;p&gt;对于当前优惠卷的问题，无非就是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义系统的资源模型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;资源的产出&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;资源的争抢&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;资源的使用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于分布式环境下，争抢无疑是最需要重点关注的一点&lt;/p&gt;
&lt;p&gt;资源模型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表结构、关键字段&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;资源产出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何管理的问题：优惠卷管理问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;资源的争抢&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;争抢的应对
&lt;ul&gt;
&lt;li&gt;预热，系统的高效性保证：预热任务问题&lt;/li&gt;
&lt;li&gt;争抢的正确性保证：分布式环境下资源分配串行化、一致性、高效性
&lt;ul&gt;
&lt;li&gt;高效性：redis缓存&lt;/li&gt;
&lt;li&gt;串行化（正确性）：lua原子操作&lt;/li&gt;
&lt;li&gt;一致性：异步同步&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;上述步骤中分离了数据，所以需要保障系统的一致性问题（资源分布带来的一致性挑战）：异步同步程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;资源的使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;订单、核销、退回&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;剩下的无非就是逐步细化这个问题的拆分&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;day7&#34;&gt;day7
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;分布式事务控制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q1cap和base理论了解吗&#34;&gt;Q1：CAP和Base理论了解吗
&lt;/h3&gt;&lt;h3 id=&#34;q1-1nacos作为注册中心是cp还是ap作为配置中心呢&#34;&gt;Q1-1：Nacos作为注册中心是CP还是AP，作为配置中心呢
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241117094418870.png&#34;
	width=&#34;787&#34;
	height=&#34;269&#34;
	srcset=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241117094418870_hu14324993689648444282.png 480w, https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241117094418870_hu11370265517840344424.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241117094418870&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;292&#34;
		data-flex-basis=&#34;702px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;q2seata的xa模式&#34;&gt;Q2：Seata的XA模式
&lt;/h3&gt;&lt;h3 id=&#34;q3seata的at模式&#34;&gt;Q3：Seata的AT模式
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;和XA最大的区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;区别在于rm执行完先提交，通过生成undo_log（更新前后快照）来做恢复&lt;/p&gt;
&lt;h3 id=&#34;q3-1at模式的脏写问题&#34;&gt;Q3-1：AT模式的脏写问题
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;提交和恢复不在一块，不再具有原子性&lt;/p&gt;
&lt;p&gt;全局锁&lt;/p&gt;
&lt;p&gt;非seata事务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241117114259966.png&#34;
	width=&#34;776&#34;
	height=&#34;408&#34;
	srcset=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241117114259966_hu18057114111707664139.png 480w, https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241117114259966_hu14486896802311061655.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241117114259966&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;190&#34;
		data-flex-basis=&#34;456px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;全局锁和db锁存在死锁阶段，通过快速重试然后失败处理来打破状态&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241117114244928.png&#34;
	width=&#34;1418&#34;
	height=&#34;770&#34;
	srcset=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241117114244928_hu5089890677670959133.png 480w, https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241117114244928_hu6270007950472462285.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241117114244928&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;184&#34;
		data-flex-basis=&#34;441px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;q3-2at脏读问题&#34;&gt;Q3-2：AT脏读问题
&lt;/h3&gt;&lt;h3 id=&#34;q4tcc模式&#34;&gt;Q4：TCC模式
&lt;/h3&gt;&lt;h2 id=&#34;day8&#34;&gt;day8
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;ELK技术&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;day9&#34;&gt;day9
&lt;/h2&gt;&lt;h3 id=&#34;q1redis中hash一个个拉取key中的数据太慢了如何批量拉取&#34;&gt;Q1：redis中hash一个个拉取key中的数据太慢了，如何批量拉取
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;redis的游标scan，减少往返成本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q2原生的redis加锁存在哪些问题&#34;&gt;Q2：原生的redis加锁存在哪些问题
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;超时、误删、业务续期&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;1、锁误删&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;俩个线程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程1获取锁执行完后准备释放&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;但是释放的操作被阻塞了&lt;/strong&gt;，导致锁被超时释放&lt;/li&gt;
&lt;li&gt;此时线程2可以获取锁，然后获取成功，执行任务中&lt;/li&gt;
&lt;li&gt;线程1此时醒来，继续释放锁，结果把2的锁给放掉&lt;/li&gt;
&lt;li&gt;然后马上线程3就来获取&lt;/li&gt;
&lt;li&gt;最后导致并发安全问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何解决：操作锁的时候判断线程标识是不是自己的，是才删除&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SET lock thread1 NX/EX 10&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;NX：not exists&lt;/p&gt;
&lt;p&gt;EX：exists&lt;/p&gt;
&lt;h3 id=&#34;q3如何对接高德地图&#34;&gt;Q3：如何对接高德地图
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;先从高德地图拉取城市列表和它对应的编号，前端保存json便于解析，后端落库便于查询匹配，在前后端交互的时候就直接传城市编号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;比如说前端现在地图选了一个点，对应有它的经纬度，然后向我们的公共服务模块发起请求调用高德地图返回对应的城市编号，然后再和后端交互的时候就用这个编号来交互&lt;/p&gt;
&lt;p&gt;以新增地址簿为例，现在定位界面选择对应位置，然后与public服务交互获取对应城市编号，然后回显程序信息，最后新增落库的时候存入城市编码&lt;/p&gt;
&lt;h2 id=&#34;day10&#34;&gt;day10
&lt;/h2&gt;</description>
        </item>
        <item>
        <title>RabbitMQ</title>
        <link>https://example.com/p/rabbitmq/</link>
        <pubDate>Fri, 08 Nov 2024 20:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/rabbitmq/</guid>
        <description>&lt;h1 id=&#34;mq&#34;&gt;MQ
&lt;/h1&gt;&lt;h2 id=&#34;发送者的可靠性&#34;&gt;发送者的可靠性
&lt;/h2&gt;&lt;h2 id=&#34;mq可靠性&#34;&gt;MQ可靠性
&lt;/h2&gt;&lt;h3 id=&#34;数据持久化&#34;&gt;数据持久化
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;交换机持久化
&lt;ul&gt;
&lt;li&gt;Durable 持久化模式&lt;/li&gt;
&lt;li&gt;Transient 临时模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;队列持久化
&lt;ul&gt;
&lt;li&gt;Durable 持久化模式&lt;/li&gt;
&lt;li&gt;Transient 临时模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;消息持久化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在开启持久化机制以后，如果同时还开启了生产者确认，那么MQ会在消息持久化以后才发送ACK回执，进一步确保消息的可靠性。&lt;/p&gt;
&lt;p&gt;不过出于性能考虑，为了减少IO次数，发送到MQ的消息并不是逐条持久化到数据库的，而是每隔一段时间批量持久化。一般间隔在100毫秒左右，这就会导致ACK有一定的延迟，因此建议生产者确认全部采用异步方式。&lt;/p&gt;
&lt;h3 id=&#34;lazyqueue解决消息积压&#34;&gt;LazyQueue（解决消息积压）
&lt;/h3&gt;&lt;p&gt;导致消息积压&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;消费者宕机或网络故障&lt;/li&gt;
&lt;li&gt;发送量激增&lt;/li&gt;
&lt;li&gt;消费者处理业务发送阻塞&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了解决这个问题，从RabbitMQ的3.6.0版本开始，就增加了Lazy Queues的模式，也就是惰性队列。惰性队列的特征如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收到消息后直接存入磁盘而非内存&lt;/li&gt;
&lt;li&gt;消费者要消费消息时才会从磁盘中读取并加载到内存（也就是懒加载）&lt;/li&gt;
&lt;li&gt;支持数百万条的消息存储&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;消费者的可靠性&#34;&gt;消费者的可靠性
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;消费者确认&lt;/strong&gt;：告知RabbitMQ自己消息处理状态。回执有三种可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ack：成功处理消息，RabbitMQ从队列中删除该消息&lt;/li&gt;
&lt;li&gt;nack：消息处理失败，RabbitMQ需要再次投递消息&lt;/li&gt;
&lt;li&gt;reject：消息处理失败并拒绝该消息，RabbitMQ从队列中删除该消&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ACK的处理方式&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;none&lt;/code&gt;&lt;/strong&gt;：不处理。即消息投递给消费者后立刻ack，消息会立刻从MQ删除。非常不安全，不建议使用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;manual&lt;/code&gt;&lt;/strong&gt;：手动模式。需要自己在业务代码中调用api，发送&lt;code&gt;ack&lt;/code&gt;或&lt;code&gt;reject&lt;/code&gt;，存在业务入侵，但更灵活&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/strong&gt;：自动模式。SpringAMQP利用AOP对我们的消息处理逻辑做了环绕增强，当业务正常执行时则自动返回&lt;code&gt;ack&lt;/code&gt;.  当业务出现异常时，根据异常判断返回不同结果：
&lt;ul&gt;
&lt;li&gt;如果是&lt;strong&gt;业务异常&lt;/strong&gt;，会自动返回&lt;code&gt;nack&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;如果是&lt;strong&gt;消息处理或校验异常&lt;/strong&gt;，自动返回&lt;code&gt;reject&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;失败重试机制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当消费者出现异常后，消息会不断requeue（重入队）到队列，再重新发送给消费者。&lt;/p&gt;
&lt;p&gt;极端情况会出现一直requeue&lt;/p&gt;
&lt;p&gt;spring支持在消费者出现异常时利用本地重试&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;失败处理策略&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Spring允许我们自定义重试次数耗尽后的消息处理策略&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;业务幂等性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;业务重复执行结果仍然不变&lt;/p&gt;
</description>
        </item>
        <item>
        <title>G1垃圾回收器</title>
        <link>https://example.com/p/g1%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</link>
        <pubDate>Thu, 31 Oct 2024 10:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/g1%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</guid>
        <description>&lt;h1 id=&#34;g1垃圾回收器详解&#34;&gt;G1垃圾回收器详解
&lt;/h1&gt;&lt;p&gt;G1和CMS要求的内存模型不同&lt;/p&gt;
&lt;p&gt;G1具有软实时性，即用户可以指定垃圾回收的限时，G1会努力在这个时限内完成gc。通常设定一个合理的目标让90%的垃圾回收时间都在这个时限内。&lt;/p&gt;
&lt;h1 id=&#34;g1的内存模型&#34;&gt;G1的内存模型
&lt;/h1&gt;&lt;h2 id=&#34;分区概念&#34;&gt;分区概念
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://example.com/p/g1%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/index.assets/f0bdbd9f9088d335a702739798e1e25a.png&#34;
	width=&#34;589&#34;
	height=&#34;292&#34;
	srcset=&#34;https://example.com/p/g1%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/index.assets/f0bdbd9f9088d335a702739798e1e25a_hu11936586203969620188.png 480w, https://example.com/p/g1%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/index.assets/f0bdbd9f9088d335a702739798e1e25a_hu1772571718479536578.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;G1分区示意图&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;201&#34;
		data-flex-basis=&#34;484px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;分区region&#34;&gt;分区Region
&lt;/h3&gt;&lt;p&gt;G1采用分区的类似，将堆空间分为若干个大小相等的内存区域，每次分配对象空间将逐段地使用内存。可以通过&lt;code&gt;-XX:G1HeapRegionSize=n&lt;/code&gt;指定分区大小(1MB~32MB，且必须是2的幂)，默认分为2048个分区。&lt;/p&gt;
&lt;h3 id=&#34;卡片card&#34;&gt;卡片Card
&lt;/h3&gt;&lt;p&gt;分区内部又会分为若干个大小为512 Byte 的卡片，全局卡片表记录了所有分区的卡片信息。每个卡片在全局卡片表中都有一个对应的条目。&lt;/p&gt;
&lt;h3 id=&#34;堆heap&#34;&gt;堆Heap
&lt;/h3&gt;&lt;p&gt;通过-Xms/-Xmx指定堆大小。当发送ygc或者mixgc，通过计算gc与应用的耗时比，自动调整对空间大小。gc频率过高则增加堆尺寸来减少gc频率。&lt;/p&gt;
&lt;p&gt;-XX:GCTimeRatio即为GC与应用的耗时比。&lt;/p&gt;
&lt;p&gt;空间不足时，g1会首先尝试增加堆空间，如果扩容失败则发起fullgc。&lt;/p&gt;
&lt;h2 id=&#34;分代模型&#34;&gt;分代模型
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://example.com/p/g1%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/index.assets/78ca8aa4b7a360c7b7e794c803dcf05c.png&#34;
	width=&#34;518&#34;
	height=&#34;315&#34;
	srcset=&#34;https://example.com/p/g1%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/index.assets/78ca8aa4b7a360c7b7e794c803dcf05c_hu11960976990673088892.png 480w, https://example.com/p/g1%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/index.assets/78ca8aa4b7a360c7b7e794c803dcf05c_hu6866350095950060920.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;28345836009_65a54854be_z.jpg&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;164&#34;
		data-flex-basis=&#34;394px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;分代&#34;&gt;分代
&lt;/h3&gt;&lt;p&gt;Young代和Old代，Young代又包括Eden空间和Survivor空间。&lt;/p&gt;
&lt;p&gt;整个Young代内存占用初始空间&lt;code&gt;-XX:G1NewSizePercent&lt;/code&gt;（默认整堆5%）与最大空间（默认60%）&lt;/p&gt;
&lt;h3 id=&#34;local-alloction-buffer-lab&#34;&gt;Local alloction buffer （Lab）
&lt;/h3&gt;&lt;p&gt;应用线程占用TLAB来创建对象，而大部分都会落入Eden；&lt;/p&gt;
&lt;p&gt;每次gc时，每个gc线程同样可以独占一个GCLAB用来转移对象，每次回收会将对象复制到Suvivor空间或老年代空间；&lt;/p&gt;
&lt;p&gt;对于Eden/Survivor空间晋升（Promption）到Survivor/老年代空间的对象，同样有GC独占PLAB&lt;/p&gt;
&lt;p&gt;这些缓冲区就是每个线程认领的内存分配，可以减少同步时间，提升GC效率&lt;/p&gt;
&lt;h2 id=&#34;分区模型&#34;&gt;分区模型
&lt;/h2&gt;</description>
        </item>
        <item>
        <title>微信登录对接</title>
        <link>https://example.com/p/%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95%E5%AF%B9%E6%8E%A5/</link>
        <pubDate>Wed, 23 Oct 2024 16:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95%E5%AF%B9%E6%8E%A5/</guid>
        <description>&lt;h1 id=&#34;微信登录&#34;&gt;微信登录
&lt;/h1&gt;&lt;p&gt;小程序调用 wx.login 获得 jscode，然后交给服务器后端程序，然后后端调用 code2session 换取会话密钥&lt;/p&gt;
</description>
        </item>
        <item>
        <title>服务保护和分布式事务</title>
        <link>https://example.com/p/%E6%9C%8D%E5%8A%A1%E4%BF%9D%E6%8A%A4%E5%92%8C%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</link>
        <pubDate>Tue, 22 Oct 2024 16:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/%E6%9C%8D%E5%8A%A1%E4%BF%9D%E6%8A%A4%E5%92%8C%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</guid>
        <description>&lt;p&gt;远程调用的过程中，需要解决几个问题：&lt;/p&gt;
&lt;p&gt;1、业务健壮性：服务本身没有问题但受到下游服务影响导致异常&lt;/p&gt;
&lt;p&gt;2、级联失败：单个服务的故障会进而影响上游的所有服务&lt;/p&gt;
&lt;h1 id=&#34;微服务保护&#34;&gt;微服务保护
&lt;/h1&gt;&lt;h2 id=&#34;服务保护方案&#34;&gt;服务保护方案
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;请求限流：降低了并发上线&lt;/li&gt;
&lt;li&gt;线程隔离：降低了可用资源数量&lt;/li&gt;
&lt;li&gt;服务熔断：降低了服务的完整度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些方案都会导致体验上略有下降，属于降级方案。&lt;/p&gt;
&lt;h3 id=&#34;111请求限流&#34;&gt;1.1.1请求限流
&lt;/h3&gt;&lt;p&gt;用于解决并发太高或者说突高的问题，避免服务因流量激增而出现故障&lt;/p&gt;
&lt;h3 id=&#34;112线程隔离&#34;&gt;1.1.2线程隔离
&lt;/h3&gt;&lt;p&gt;限定每个接口可用使用的资源范围，避免某个接口故障或压力过大导致整个服务不可用&lt;/p&gt;
&lt;h3 id=&#34;113服务熔断&#34;&gt;1.1.3服务熔断
&lt;/h3&gt;&lt;p&gt;线程隔离避免了雪崩，但故障服务依然会拖慢上游服务的响应速度&lt;/p&gt;
&lt;p&gt;1、服务调用失败后，做降级处理，如抛出异常或者是友好提示或者是默认数据&lt;/p&gt;
&lt;p&gt;2、统计服务提供方的异常比例，比例过高表示该接口会影响到其他服务，应该拒绝继续调用该接口，直接降级处理&lt;/p&gt;
&lt;h3 id=&#34;sentinel&#34;&gt;Sentinel
&lt;/h3&gt;&lt;p&gt;配置Sentinel把请求方式+请求路径作为簇点源名&lt;/p&gt;
&lt;p&gt;1、请求限流&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://b11et3un53m.feishu.cn/wiki/QfVrw3sZvihmnPkmALYcUHIDnff#share-DgvJdKYf1ot2R1xdlV8cQ1sknTd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://b11et3un53m.feishu.cn/wiki/QfVrw3sZvihmnPkmALYcUHIDnff#share-DgvJdKYf1ot2R1xdlV8cQ1sknTd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;流控效果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快速失败&lt;/li&gt;
&lt;li&gt;warm up&lt;/li&gt;
&lt;li&gt;排队等待&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、线程隔离&lt;/p&gt;
&lt;p&gt;隔离故障服务的调用，避免雪崩&lt;/p&gt;
&lt;p&gt;因为我们是用 OpenFeign 作远程调用的，所以在 OpenFeign整合Sentinel&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;feign&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;sentinel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 开启feign对sentinel的支持&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;SpringBoot项目的tomcat最大线程数是200，运行的最大连接数是8192&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%9C%8D%E5%8A%A1%E4%BF%9D%E6%8A%A4%E5%92%8C%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/index.assets/image-20241023203953152.png&#34;
	width=&#34;706&#34;
	height=&#34;385&#34;
	srcset=&#34;https://example.com/p/%E6%9C%8D%E5%8A%A1%E4%BF%9D%E6%8A%A4%E5%92%8C%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/index.assets/image-20241023203953152_hu13368086718067410155.png 480w, https://example.com/p/%E6%9C%8D%E5%8A%A1%E4%BF%9D%E6%8A%A4%E5%92%8C%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/index.assets/image-20241023203953152_hu74998059682179672.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241023203953152&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;183&#34;
		data-flex-basis=&#34;440px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;限制并发线程数&lt;/strong&gt;，即五个线程数和qps无直接关系，实际的qps跟接口响应速度有关&lt;/p&gt;
&lt;p&gt;3、服务熔断&lt;/p&gt;
&lt;p&gt;先编写降级逻辑，然后做服务熔断&lt;/p&gt;
&lt;h4 id=&#34;降级逻辑&#34;&gt;降级逻辑
&lt;/h4&gt;&lt;p&gt;给FeignClien编写失败后的降级逻辑&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方式一：&lt;strong&gt;FallbackClass&lt;/strong&gt;，无法对远程调用的异常做处理&lt;/li&gt;
&lt;li&gt;方式二：&lt;strong&gt;FallbackFactory&lt;/strong&gt;，可以对远程调用的异常做处理，一般选择这种&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;step1:在hm-api模块中给itemclient定义降级处理类，实现FallbackFactory&lt;/p&gt;
&lt;p&gt;step2:在hm-api模块中的DefaultFeignConfig类中将ItemClientFallback注册为一个Bean&lt;/p&gt;
&lt;p&gt;step3:在hm-api模块中的ItemClient接口中使用ItemClientFallbackFactory&lt;/p&gt;
&lt;h4 id=&#34;服务熔断&#34;&gt;服务熔断
&lt;/h4&gt;&lt;p&gt;Sentinel的断路器可以统计慢请求比例和异常请求比例，超出阈值时，就会熔断该接口，即拦截该接口的一切请求，降级处理；当该接口回复正常时，再放行对于该接口的请求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%9C%8D%E5%8A%A1%E4%BF%9D%E6%8A%A4%E5%92%8C%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/index.assets/image-20241023214240138.png&#34;
	width=&#34;1379&#34;
	height=&#34;579&#34;
	srcset=&#34;https://example.com/p/%E6%9C%8D%E5%8A%A1%E4%BF%9D%E6%8A%A4%E5%92%8C%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/index.assets/image-20241023214240138_hu11469942736559844470.png 480w, https://example.com/p/%E6%9C%8D%E5%8A%A1%E4%BF%9D%E6%8A%A4%E5%92%8C%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/index.assets/image-20241023214240138_hu9982794407809568267.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241023214240138&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;238&#34;
		data-flex-basis=&#34;571px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这个断路器的用状态机来描述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;closed&lt;/li&gt;
&lt;li&gt;open&lt;/li&gt;
&lt;li&gt;half-open&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%9C%8D%E5%8A%A1%E4%BF%9D%E6%8A%A4%E5%92%8C%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/index.assets/image-20241023214554399.png&#34;
	width=&#34;681&#34;
	height=&#34;413&#34;
	srcset=&#34;https://example.com/p/%E6%9C%8D%E5%8A%A1%E4%BF%9D%E6%8A%A4%E5%92%8C%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/index.assets/image-20241023214554399_hu6950853826645507944.png 480w, https://example.com/p/%E6%9C%8D%E5%8A%A1%E4%BF%9D%E6%8A%A4%E5%92%8C%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/index.assets/image-20241023214554399_hu4351095248471864839.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241023214554399&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;164&#34;
		data-flex-basis=&#34;395px&#34;
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;分布式事务&#34;&gt;分布式事务
&lt;/h1&gt;&lt;p&gt;本地事务&lt;/p&gt;
&lt;p&gt;分支事务&lt;/p&gt;
&lt;p&gt;全局事务&lt;/p&gt;
&lt;p&gt;业务跨多个服务实现，跨多个数据源实现，就会产生分布式事务问题&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Spring Cloud</title>
        <link>https://example.com/p/spring-cloud/</link>
        <pubDate>Thu, 26 Sep 2024 16:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/spring-cloud/</guid>
        <description>&lt;h1 id=&#34;spring-cloud-config&#34;&gt;Spring Cloud Config
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Spring Cloud Config 读取配置文件的步骤&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、启动 XxxApplication 时，读取自身的 application.yml，获得 name 和 Config Server 地址；&lt;/p&gt;
&lt;p&gt;2、根据 name、profile 和 Config Server 地址，获取一个或多个由优先级的配置文件；&lt;/p&gt;
&lt;p&gt;3、按优先级合并配置项；&lt;/p&gt;
&lt;p&gt;4、如果配置项中存在环境变量，则使用 Xxx 应用本身的环境变量去替换占位符。&lt;/p&gt;
&lt;h1 id=&#34;网关&#34;&gt;网关
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;创建网关微服务&lt;/li&gt;
&lt;li&gt;引入 SpringCloudGateway、NacosDiscovery 依赖&lt;/li&gt;
&lt;li&gt;编写启动类&lt;/li&gt;
&lt;li&gt;配置网关路由&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;网关路由配置&#34;&gt;网关路由配置
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cloud&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gateway&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;routes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 路由规则id，自定义，唯一&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;lb://item-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 路由的目标服务，lb代表负载均衡，会从注册中心拉取服务列表&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;predicates&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 路由断言，判断当前请求是否符合当前规则，符合则路由到目标服务&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;Path=/items/**,/search/**&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 这里是以请求路径作为判断规则&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;GatewayProperties 读取配置，通过一个 List&lt;RouteDefinition&gt; 来保存，
每个 RouteDefinition 就是具体的路由规则定义。
包含四个常见属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;id：路由唯一标识&lt;/li&gt;
&lt;li&gt;predicates：路由断言，就是匹配条件&lt;/li&gt;
&lt;li&gt;filters：路由过滤条件&lt;/li&gt;
&lt;li&gt;uri：路由目标地址，&lt;code&gt;lb://&lt;/code&gt;代表负载均衡，从注册中心获取目标微服务的实例列表，并且负载均衡选择一个访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;网关是所有微服务的入口，将登录校验的工作放到网关。在网关和用户服务保存密钥。&lt;/p&gt;
&lt;p&gt;网关过滤器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GatewayFilter：路由过滤器&lt;/li&gt;
&lt;li&gt;GlobalFilter：全局过滤器&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;微服务获取用户&#34;&gt;微服务获取用户
&lt;/h1&gt;&lt;p&gt;网关通过请求头获取用户身份信息，继续通过http请求发送到微服务，这样就可以把用户信息传递到下游微服务。&lt;/p&gt;
&lt;p&gt;通过微服务的拦截器，存放到 ThreadLocal 中来提供服务内部用户信息的上下文&lt;/p&gt;
&lt;p&gt;微服务之间通过OpenFeign传递用户&lt;/p&gt;
&lt;p&gt;Feign提供一个拦截器接口 feign.RequestInterceptor&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;com.hmall.api.config.DefaultFeignConfig&lt;/code&gt;中添加一个Bean&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;@Bean
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;public RequestInterceptor userInfoRequestInterceptor(){
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    return new RequestInterceptor() {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        @Override
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        public void apply(RequestTemplate template) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            // 获取登录用户
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            Long userId = UserContext.getUser();
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            if(userId == null) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                // 如果为空则直接跳过
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                return;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            // 如果不为空则放入请求头中，传递给下游微服务
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            template.header(&amp;#34;user-info&amp;#34;, userId.toString());
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    };
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;配置管理&#34;&gt;配置管理
&lt;/h1&gt;&lt;h2 id=&#34;配置共享&#34;&gt;配置共享
&lt;/h2&gt;&lt;p&gt;共享的配置抽取到Nacos统一管理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在nacos添加共享配置&lt;/li&gt;
&lt;li&gt;微服务拉取配置&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;312拉取共享配置&#34;&gt;3.1.2.拉取共享配置
&lt;/h3&gt;&lt;p&gt;接下来，我们要在微服务拉取共享配置。将拉取到的共享配置与本地的&lt;code&gt;application.yaml&lt;/code&gt;配置合并，完成项目上下文的初始化。&lt;/p&gt;
&lt;p&gt;不过，需要注意的是，读取Nacos配置是SpringCloud上下文（&lt;code&gt;ApplicationContext&lt;/code&gt;）初始化时处理的，发生在项目的引导阶段。然后才会初始化SpringBoot上下文，去读取&lt;code&gt;application.yaml&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;也就是说引导阶段，&lt;code&gt;application.yaml&lt;/code&gt;文件尚未读取，根本不知道nacos 地址，该如何去加载nacos中的配置文件呢？&lt;/p&gt;
&lt;p&gt;SpringCloud在初始化上下文的时候会先读取一个名为&lt;code&gt;bootstrap.yaml&lt;/code&gt;(或者&lt;code&gt;bootstrap.properties&lt;/code&gt;)的文件，如果我们将nacos地址配置到&lt;code&gt;bootstrap.yaml&lt;/code&gt;中，那么在项目引导阶段就可以读取nacos中的配置了。&lt;/p&gt;
&lt;h2 id=&#34;32配置热更新&#34;&gt;3.2.配置热更新
&lt;/h2&gt;&lt;h2 id=&#34;33动态路由&#34;&gt;3.3.动态路由
&lt;/h2&gt;&lt;p&gt;路由配置是在项目启动时由org.springframework.cloud.gateway.route.CompositeRouteDefinitionLocator加载，一经加载就缓存到内存中的路由表中。&lt;/p&gt;
&lt;h3 id=&#34;331监听nacos配置变更&#34;&gt;3.3.1.监听nacos配置变更
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;创建ConfigService，目的是连接到nacos&lt;/li&gt;
&lt;li&gt;添加配置监听器，编写配置变更的通知和处理逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过自动装配，实际上ConfigService已经创建好了，我们只需要通过NacosConfigManager去getConfigservice就可以了&lt;/p&gt;
&lt;p&gt;项目第一次启动时不仅仅要添加监听器，也要读取配置，所以我们用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;getConfigAndSignListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dataId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 配置文件id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 配置组，走默认&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timeoutMs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 读取配置的超时时间&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Listener&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;listener&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 监听器&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NacosException&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这个api，既可以配置监听器，也可以根据dataId和group读取配置并返回。&lt;/p&gt;
&lt;h3 id=&#34;332更新路由&#34;&gt;3.3.2.更新路由
&lt;/h3&gt;&lt;p&gt;监听了配置，就需要用到&lt;code&gt;org.springframework.cloud.gateway.route.RouteDefinitionWriter&lt;/code&gt;这个接口来更新路由也就是RouteDefinition&lt;/p&gt;
&lt;h3 id=&#34;333实现动态路由&#34;&gt;3.3.3.实现动态路由
&lt;/h3&gt;</description>
        </item>
        <item>
        <title>springMVC</title>
        <link>https://example.com/p/springmvc/</link>
        <pubDate>Sat, 21 Sep 2024 16:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/springmvc/</guid>
        <description>&lt;h1 id=&#34;q1&#34;&gt;Q1
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;json 传输的过程中，如果想要限制一个属性只能写或者只能读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@JsonProperty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;access&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JsonProperty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Access&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;WRITE_ONLY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@JsonProperty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;access&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JsonProperty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Access&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;READ_ONLY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;加在字段和加在方法上有区别&lt;/p&gt;
&lt;p&gt;加在字段上直接控制字段的序列化和反序列化行为&lt;/p&gt;
&lt;p&gt;加载方法上控制方法的调用来影响序列化和反序列化，通常用在有自定义逻辑时&lt;/p&gt;
&lt;h1 id=&#34;q2&#34;&gt;Q2
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Interceptor 和 Filter 的作用范围&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Interceptor 的拦截范围其实就是 Controller 方法，它实际上就相当于基于 AOP 的方法拦截。
因为 Interceptor 只拦截 Controller 方法，所以返回 ModelAndView 并渲染后，后续处理就脱离了 Interceptor 的拦截范围（虚线框）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/springmvc/index.assets/image-20240922091131626.png&#34;
	width=&#34;370&#34;
	height=&#34;728&#34;
	srcset=&#34;https://example.com/p/springmvc/index.assets/image-20240922091131626_hu6237817612943823597.png 480w, https://example.com/p/springmvc/index.assets/image-20240922091131626_hu433611942901679742.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20240922091131626&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;50&#34;
		data-flex-basis=&#34;121px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Filter 的拦截范围&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/springmvc/index.assets/image-20240922091203996.png&#34;
	width=&#34;342&#34;
	height=&#34;631&#34;
	srcset=&#34;https://example.com/p/springmvc/index.assets/image-20240922091203996_hu2986680621646032377.png 480w, https://example.com/p/springmvc/index.assets/image-20240922091203996_hu4072659808437627556.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20240922091203996&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;54&#34;
		data-flex-basis=&#34;130px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;好处&#34;&gt;好处
&lt;/h2&gt;&lt;p&gt;使用Interceptor的好处是Interceptor本身是Spring管理的Bean，因此注入任意Bean都非常简单。此外，可以应用多个Interceptor，并通过简单的&lt;code&gt;@Order&lt;/code&gt;指定顺序。&lt;/p&gt;
&lt;p&gt;Spring作为老牌全能型框架，要想拦截请求进行一些统一的处理，我们有Filter、Interceptor、ControllerAdvice、AOP这么多种截面可供选择： Filter——作用在最外层，在请求进入Spring之前就触发，可以用于处理一些网络通信层面的东西； Interceptor——作用在Controller的外层，数据进入Controller层之前，或离开Controller的前后触发； ControllerAdvice——作用在Interceptor之内，数据进入Controller层但还没处理之前触发，用于预处理Controller层的RequestBody和ResponseBody，以及统一异常处理； AOP——作用于自己写的方法。 使用的时候遵循“最小作用域”原理，在保证能统一抽象出来的前提下，选择最近最小的那个截面。&lt;/p&gt;
&lt;h1 id=&#34;t1&#34;&gt;T1
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;DelegatingFilterProxy 是 spring 框架提供的用来让 Servlet 容器实例化的 Filter，间接引用 spring 容器实例化的 Filter&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;比如我们在 spring 中声明一个 Component&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Component&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;AuthFilter&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;implements&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Filter&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Autowired&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UserService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;doFilter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ServletRequest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ServletResponse&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FilterChain&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ServletException&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HttpServletRequest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HttpServletRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 获取Authorization头:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;authHeader&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getHeader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Authorization&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;authHeader&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;authHeader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;startsWith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Basic &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 从Header中提取email和password:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefixFrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;authHeader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;suffixFrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;authHeader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 登录:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;signin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 放入Session:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getSession&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setAttribute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UserController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;KEY_USER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 继续处理请求:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;doFilter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;因为 AuthFilter 只是一个普通的 Bean，Servlet 容器并不知道，所以它不会起作用。&lt;/p&gt;
&lt;p&gt;如果我们直接在&lt;code&gt;web.xml&lt;/code&gt;中声明这个&lt;code&gt;AuthFilter&lt;/code&gt;，注意到&lt;code&gt;AuthFilter&lt;/code&gt;的实例将由Servlet容器而不是Spring容器初始化，因此，&lt;code&gt;@Autowire&lt;/code&gt;根本不生效，用于登录的&lt;code&gt;UserService&lt;/code&gt;成员变量永远是&lt;code&gt;null&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;web-app&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;filter&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;filter-name&amp;gt;&lt;/span&gt;authFilter&lt;span class=&#34;nt&#34;&gt;&amp;lt;/filter-name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;filter-class&amp;gt;&lt;/span&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;span class=&#34;nt&#34;&gt;&amp;lt;/filter-class&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/filter&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;filter-mapping&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;filter-name&amp;gt;&lt;/span&gt;authFilter&lt;span class=&#34;nt&#34;&gt;&amp;lt;/filter-name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/*&lt;span class=&#34;nt&#34;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/filter-mapping&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/web-app&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;实现原理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Servlet容器从&lt;code&gt;web.xml&lt;/code&gt;中读取配置，实例化&lt;code&gt;DelegatingFilterProxy&lt;/code&gt;，注意命名是&lt;code&gt;authFilter&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;Spring容器通过扫描&lt;code&gt;@Component&lt;/code&gt;实例化&lt;code&gt;AuthFilter&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当&lt;code&gt;DelegatingFilterProxy&lt;/code&gt;生效后，它会自动查找注册在&lt;code&gt;ServletContext&lt;/code&gt;上的Spring容器，再试图从容器中查找名为&lt;code&gt;authFilter&lt;/code&gt;的Bean，也就是我们用&lt;code&gt;@Component&lt;/code&gt;声明的&lt;code&gt;AuthFilter&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/springmvc/index.assets/image-20240922084029467.png&#34;
	width=&#34;586&#34;
	height=&#34;252&#34;
	srcset=&#34;https://example.com/p/springmvc/index.assets/image-20240922084029467_hu11415386808655997615.png 480w, https://example.com/p/springmvc/index.assets/image-20240922084029467_hu2227229734490777092.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20240922084029467&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;232&#34;
		data-flex-basis=&#34;558px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>spring</title>
        <link>https://example.com/p/spring/</link>
        <pubDate>Sun, 15 Sep 2024 16:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/spring/</guid>
        <description>&lt;h1 id=&#34;q1-spring-容器由谁来创建&#34;&gt;Q1 Spring 容器由谁来创建
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Web 程序总是由 Servlet 容器创建，那么在一个 Web 程序中，那么，Spring 容器应该由谁创建？在什么时候创建？Spring 容器中的 Controller 又是如何通过 Servlet 调用的？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在Web应用中启动Spring容器有很多种方法，可以通过Listener启动，也可以通过Servlet启动，可以使用XML配置，也可以使用注解配置。这里，我们只介绍一种&lt;em&gt;最简单&lt;/em&gt;的启动Spring容器的方式。&lt;/p&gt;
&lt;p&gt;第一步，我们在&lt;code&gt;web.xml&lt;/code&gt;中配置Spring MVC提供的&lt;code&gt;DispatcherServlet&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;web-app&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;dispatcher&lt;span class=&#34;nt&#34;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;org.springframework.web.servlet.DispatcherServlet&lt;span class=&#34;nt&#34;&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;init-param&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;contextClass&lt;span class=&#34;nt&#34;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;org.springframework.web.context.support.AnnotationConfigWebApplicationContext&lt;span class=&#34;nt&#34;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/init-param&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;init-param&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span class=&#34;nt&#34;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;com.itranswarp.learnjava.AppConfig&lt;span class=&#34;nt&#34;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/init-param&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;load-on-startup&amp;gt;&lt;/span&gt;0&lt;span class=&#34;nt&#34;&gt;&amp;lt;/load-on-startup&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;dispatcher&lt;span class=&#34;nt&#34;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/*&lt;span class=&#34;nt&#34;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/web-app&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;初始化参数&lt;code&gt;contextClass&lt;/code&gt;指定使用注解配置的&lt;code&gt;AnnotationConfigWebApplicationContext&lt;/code&gt;，配置文件的位置参数&lt;code&gt;contextConfigLocation&lt;/code&gt;指向&lt;code&gt;AppConfig&lt;/code&gt;的完整类名，最后，把这个Servlet映射到&lt;code&gt;/*&lt;/code&gt;，即处理所有URL。&lt;/p&gt;
&lt;p&gt;上述配置可以看作一个样板配置，有了这个配置，Servlet容器会首先初始化Spring MVC的&lt;code&gt;DispatcherServlet&lt;/code&gt;，在&lt;code&gt;DispatcherServlet&lt;/code&gt;启动时，它根据配置&lt;code&gt;AppConfig&lt;/code&gt;创建了一个类型是&lt;code&gt;WebApplicationContext&lt;/code&gt;的IoC容器，完成所有Bean的初始化，并将容器绑到&lt;code&gt;ServletContext&lt;/code&gt;上。&lt;/p&gt;
&lt;p&gt;因为&lt;code&gt;DispatcherServlet&lt;/code&gt;持有IoC容器，能从IoC容器中获取所有&lt;code&gt;@Controller&lt;/code&gt;的Bean，因此，&lt;code&gt;DispatcherServlet&lt;/code&gt;接收到所有HTTP请求后，根据Controller方法配置的路径，就可以正确地把请求转发到指定方法，并根据返回的&lt;code&gt;ModelAndView&lt;/code&gt;决定如何渲染页面。&lt;/p&gt;
&lt;h1 id=&#34;q2-spring-bean-的生命周期&#34;&gt;Q2 Spring Bean 的生命周期
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Spring Bean 的生命周期&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下图源自&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1yT411H7YK?p=39&amp;amp;vd_source=88fe7c234173a0985f7a95f5514573fb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;框架篇-05-Spring-bean的生命周期_哔哩哔哩_bilibili&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/spring/index.assets/image-20240925171323819.png&#34;
	width=&#34;866&#34;
	height=&#34;417&#34;
	srcset=&#34;https://example.com/p/spring/index.assets/image-20240925171323819_hu7042304209295925293.png 480w, https://example.com/p/spring/index.assets/image-20240925171323819_hu5059806239178258533.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20240925171323819&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;207&#34;
		data-flex-basis=&#34;498px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;1、首先是 BeanDefinition，见名字知意，&lt;strong&gt;Bean 的定义&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 xml 配置一个 Bean（现在基本不用了）对应需要创建的 ApplictionContext（顶层接口）为 ClassPathXmlApplicationContext（实现类）&lt;/li&gt;
&lt;li&gt;通过注解配置一个 Bean（主流，更简洁），使用 @Bean 标注方法，一般叫做 createXxx（比如要创建数据库连接池的就叫 createDataSource），这种方法是用来告诉 IoC 容器如何创建一个组件，然后对应需要创建 AnnotionApplicationContext&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Spring 容器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ApplicationContext 就是 Spring 容器，它有很多实现类，并且 Spring 还提供了另一种 IoC 容器叫 BeanFactory&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二者的区别&lt;/strong&gt;主要在于 ApplicationContext 会一次性创建所有的 Bean，而 BeanFactory 是按需创建的（很少使用）。ApplicationContext 还有一些额外的功能这里暂不展开&lt;/p&gt;
&lt;p&gt;2、然后是&lt;strong&gt;依赖注入&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注入当前这个组件需要注入的依赖（例如 @AutoWired @Value 标注的属性）&lt;/p&gt;
&lt;p&gt;3、&lt;strong&gt;XxxAware接口和Xxx接口&lt;/strong&gt;（加分点，按照 Aware 接口的设计来说，实际上做事的都是 Xxx，我们直接注入并 Xxx 也可以，但视频中既然体现了这一点，那就展开讲讲）&lt;/p&gt;
&lt;p&gt;该视频从引出了一个不太常见的 Aware 接口的概念，这是一种将&lt;strong&gt;功能实现和使用分离&lt;/strong&gt;的设计：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Xxx 接口：Xxx 接口提供了一组功能定义
&lt;ul&gt;
&lt;li&gt;定义接口&lt;/li&gt;
&lt;li&gt;直接使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;XxxAware 接口：XxxAware 接口允许 Spring 容器向实现该接口的类注入特定的上下文或资源。
&lt;ul&gt;
&lt;li&gt;提供上下文&lt;/li&gt;
&lt;li&gt;获取上下文&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种设计体现的优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;解耦&lt;/p&gt;
&lt;p&gt;Aware 接口的实现类不需要直接依赖于特定的上下文，而是通过接口获取所需要的资源&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;灵活&lt;/p&gt;
&lt;p&gt;实现 XxxAware 接口的类可以在不同的上下文中灵活使用，而无需修改其代码。这使得类的重用性更强。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关注点分离&lt;/p&gt;
&lt;p&gt;通过将功能定义（Xxx 接口）与上下文访问（XxxAware 接口）分离，开发者可以更清晰地关注各自的职责，使代码更加清晰和易读。（笔者注：我们想使用某个东西的时候肯定更希望直接知道怎么用，而不关心它内部是如何实现的）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;易于拓展&lt;/p&gt;
&lt;p&gt;当需要增加新的功能或上下文支持时，只需实现新的 XxxAware 接口，而不需要对现有的业务逻辑做大量修改。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;明白了吗，实际上这里的 Aware 就是要使用 Xxx，我们在这一步通过 Aware 接口把我们需要的上下文注入到这里，就这么简单&lt;/p&gt;
&lt;p&gt;4、before&lt;/p&gt;
&lt;p&gt;&lt;del&gt;不知道具体要干什么，管他呢反正你知道它&lt;/del&gt;是在初始化之前执行的就完事了&lt;/p&gt;
&lt;p&gt;5、初始化方法&lt;/p&gt;
&lt;p&gt;我们在这一阶段会去执行组件的 Init 方法（InitializingBean @PostConstruct），完成类的静态资源的加载&lt;/p&gt;
&lt;p&gt;6、after&lt;/p&gt;
&lt;p&gt;初始化之后，增强这个 Bean&lt;/p&gt;
&lt;p&gt;7、destory&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ConfigurableApplicationContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;close 之后就会触发 Bean 的销毁&lt;/p&gt;
&lt;p&gt;tips：本题的内容可能需要观看 day17 的 Bean 管理内容辅以理解&lt;/p&gt;
</description>
        </item>
        <item>
        <title>数据库</title>
        <link>https://example.com/p/%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
        <pubDate>Sat, 14 Sep 2024 20:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
        <description>&lt;h1 id=&#34;q1&#34;&gt;Q1
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;mapper&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Mapper 就是用来执行 SQL 语句的&lt;/p&gt;
&lt;h1 id=&#34;q2&#34;&gt;Q2
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;ORM 框架是如何跟踪 Java Bean 的修改，以便在 update() 操作中更新必要的属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用 Proxy 模式，从 ORM 框架读取的 User 示例实际上并不是 User 类，而是代理类，代理类继承自 User 类，但对每个 setter 方法都做了覆写&lt;/p&gt;
&lt;h1 id=&#34;q3&#34;&gt;Q3
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;ORM 分为全自动和半自动框架，有什么区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;q4&#34;&gt;Q4
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Spring 提供的 JdbcTemplate 相对于全自动的 ORM 框架有什么差别，有什么优势&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;区别：
&lt;ul&gt;
&lt;li&gt;查询后需要手动提供 Mapper 实例一边把 ResultSet 的每一行变为 Java 对象&lt;/li&gt;
&lt;li&gt;增删改操作所需的参数列表，需要手动传入，即把 User 实例变为 [user.id, user.name, user.email] 这样的列表，比较麻烦&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优势：确定性
&lt;ul&gt;
&lt;li&gt;每次读取操作一定是数据库操作而不是缓存，即每次读取操作一定是数据库操作而不是缓存，
而 ORM 框架有一级二级缓存机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：繁琐、复杂&lt;/li&gt;
&lt;li&gt;解决方案：
&lt;ul&gt;
&lt;li&gt;使用半自动的 ORM 框架 MyBatis，它只负责把ResultSet自动映射到Java Bean，或者自动填充Java Bean参数，但仍需自己写出SQL。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;q5&#34;&gt;Q5
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;sql 注入是什么，怎么解决&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Statement&lt;/p&gt;
&lt;p&gt;PrepareStatement&lt;/p&gt;
&lt;p&gt;#{}&lt;/p&gt;
&lt;p&gt;${} 用在动态表名&lt;/p&gt;
&lt;h1 id=&#34;q6&#34;&gt;Q6
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给一个场景：&lt;/p&gt;
&lt;p&gt;现在 UserService 中有一个 updateUser(Long id, String name) 方法，而 UserMapper 中 update 操作只有一个 update(User user) 方法（get、delete、insert都有）&lt;/p&gt;
&lt;p&gt;在这里你是会给接口新加一个方法用于更新 user 的 name；还是用 UserMapper 提供的 getById 获取一个 User 实例，更改 name 后再调用 update(user) 把这个实例传入。&lt;/p&gt;
&lt;p&gt;注：User 继承自 AbstractEntity，里面有多个字段如 id，createdTime，updatedTime&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;q7&#34;&gt;Q7
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;如果使用 PageHelper 处理分页查询，会不会有线程安全问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;PageHelper的使用&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;PageHelper 只会对紧跟在其后的第一条 SQL 语句进行分页处理，如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PageBean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;page&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;page&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pageSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PageHelper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;startPage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;page&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pageSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Emp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;empList&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;empMapper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Page&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Emp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Page&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Emp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;empList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PageBean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getTotal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getResult&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;只要可以保证在 PageHelper 方法调用后紧跟着查询方法，就是安全的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;线程安全问题的产生原因&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;PageHelper 使用了静态的 ThreadLocal 参数，这意味着分页设置是与当前啊线程相关联的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//使用PageHelper分页助手插件进行分页操作&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PageHelper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;startPage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Country&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  		&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;param1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    		&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;countryMapper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;selectIf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;param1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  		&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   			 &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Country&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  		&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Page&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CheckItem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;page&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;checkItemDao&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;selectByCondition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;queryString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这种情况下由于 param1 存在 null 的情况，就会导致 PageHelper 生产了一个分页参数，但是没有被消费，这个参数就会一直保留在这个线程上。当这个线程再次被使用时，就可能导致不该分页的方法去消费这个分页参数，这就产生了莫名其妙的分页。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;q8&#34;&gt;Q8
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;对于一个请求参数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Data&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;EmpQueryParam&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 对于请求中的参数，只有映射到 String 类型时会把空字符串映射，对于其他的类型遇到 &amp;#34;&amp;#34; 会映射为 null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;page&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 页码，默认值1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pageSize&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 每页展示记录数，默认值10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 姓名&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gender&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 性别&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@DateTimeFormat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;yyyy-MM-dd&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LocalDate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 入职开始时间，&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@DateTimeFormat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;yyyy-MM-dd&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LocalDate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 入职结束时间&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;编写动态 SQL 语句如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;select&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;resultType=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;com.gaj.pojo.Emp&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    select e.*, d.name deptName from emp e left join dept d on e.dept_id = d.id
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;where&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;if&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;test=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;param.name != null and param.name != &amp;#39;&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt; e.name like concat(&amp;#39;%&amp;#39;, #{param.name}, &amp;#39;%&amp;#39;) &lt;span class=&#34;nt&#34;&gt;&amp;lt;/if&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;if&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;test=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;param.gender != null&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt; and e.gender = #{param.gender} &lt;span class=&#34;nt&#34;&gt;&amp;lt;/if&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;if&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;test=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;param.begin != null and param.end != null&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt; and e.entry_date between #{param.begin} and #{param.end} &lt;span class=&#34;nt&#34;&gt;&amp;lt;/if&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/where&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    order by e.update_time desc
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;前端的请求&lt;/p&gt;
&lt;p&gt;&lt;code&gt; http://localhost:90/api/emps?begin=&amp;amp;end=&amp;amp;gender=&amp;amp;name=&amp;amp;page=1&amp;amp;pageSize=5&lt;/code&gt;
这里的 begin end gender 都是空字符串，为什么对它们不用判空字符串（只用判空），对 name 要判&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很显然Integer 和 LocalDate 只会为 null，不会为空字符串，
简单来说这里只有 String 需要判断是否为 &amp;quot;&amp;quot;
因为编译器已经确保了 &amp;quot;&amp;quot; 空字符串不会映射到其他引用类型&lt;/p&gt;
&lt;h1 id=&#34;q9&#34;&gt;Q9
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;spring 开启一个事务是怎么样的，底层是通过操作什么来开启&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;答题思路&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简述 spring 框架中事务如何启用
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@EnableTransaction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PlatformTransactionManager&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据库底层
&lt;ul&gt;
&lt;li&gt;显式事务和隐式事务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JDBC
&lt;ul&gt;
&lt;li&gt;开启事务的关键代码是 &lt;code&gt;conn.setAutoCommit(false)&lt;/code&gt; 表示关闭提交&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;spring 启用声明式事务&lt;/strong&gt;
spring 中启用声明式事务和和开启一个声明式事务没什么好说的，前者需要在启动类上加上&lt;code&gt;@EnableTransaction&lt;/code&gt;注解；后者只要在开启一个事务的类上（或者方法上）加上&lt;code&gt;@Transactional&lt;/code&gt;注解，然后在需要回滚的地方抛出&lt;code&gt;RunTimeException&lt;/code&gt;（默认情况下，也可以在&lt;code&gt;Transactional&lt;/code&gt;注解声明&lt;code&gt;rollbackFor&lt;/code&gt;属性），spring 的事务管理类（&lt;code&gt;PlatformTransactionManager&lt;/code&gt;）会自动&lt;code&gt;rollback&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;spring 启用编程式事务&lt;/strong&gt;
spring 中使用编程式事务主要是&lt;code&gt;PlatformTransactionManager&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;TransactionStatus&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 开启事务:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;txManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getTransaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DefaultTransactionDefinition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 相关JDBC操作:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jdbcTemplate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jdbcTemplate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 提交事务:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;txManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RuntimeException&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 回滚事务:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;txManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;rollback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;比较繁琐&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;底层启用事务的原理&lt;/strong&gt;
若是从数据库层面来说的话，开启一个事务是用&lt;code&gt;BEGIN&lt;/code&gt;，&lt;code&gt;COMMIT&lt;/code&gt;提交一个事务，&lt;code&gt;ROLLBACK&lt;/code&gt;回滚事务。事务有隔离级别，但不是本题的讨论范围这里不做讲解。&lt;/p&gt;
&lt;p&gt;主要的答题点应为 &lt;strong&gt;JDBC&lt;/strong&gt; 层面的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Connection&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;openConnection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 关闭自动提交:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setAutoCommit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 执行多条SQL语句:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;insert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 提交事务:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SQLException&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 回滚事务:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;rollback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;finally&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setAutoCommit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;开启事务的关键代码是 &lt;code&gt;conn.setAutoCommit(false)&lt;/code&gt; 表示关闭提交。&lt;/p&gt;
&lt;p&gt;因为事务分为显示事务和隐式事务，对于单条 SQL 语句，数据库系统自动将其作为一个事务执行，这就是隐式事务。&lt;/p&gt;
&lt;p&gt;关闭自动提交就代表开启了显示事务，然后在执行多条sql语句的过程中如果 catch 到了异常，就可以选择回滚事务，如果程序正常执行就将 commit&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自动提交更改后必须要改回原来的值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以 spring 框架在开启事务的时候其实就是对自动提交的操作。&lt;/p&gt;
&lt;h1 id=&#34;q10&#34;&gt;Q10
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;使用&lt;code&gt;@Transactional&lt;/code&gt;注解可以开启一个事务，在什么时候会回滚？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;默认抛出&lt;code&gt;RuntimeException&lt;/code&gt;异常时会回滚，非&lt;code&gt;RuntimeException&lt;/code&gt;（包括&lt;code&gt;IOException&lt;/code&gt;、&lt;code&gt;ReflectiveOperationException&lt;/code&gt;等等）不会回滚。&lt;/p&gt;
&lt;p&gt;为了简化代码，我们强烈建议业务异常体系从&lt;code&gt;RuntimeException&lt;/code&gt;派生，这样就不必声明任何特殊异常即可让Spring的声明式事务正常工作。&lt;/p&gt;
&lt;h1 id=&#34;q11&#34;&gt;Q11
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Spring使用声明式事务，最终也是通过执行JDBC事务来实现功能的，那么，一个事务方法，如何获知当前是否存在事务？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;q12&#34;&gt;Q12
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;事务失效场景&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;事务方法非 public 修饰&lt;/p&gt;
&lt;p&gt;非事务方法调用事务方法&lt;/p&gt;
&lt;p&gt;事务方法的异常被捕获了&lt;/p&gt;
&lt;p&gt;事务异常类型不对&lt;/p&gt;
&lt;p&gt;事务传播行为不对&lt;/p&gt;
&lt;p&gt;没有被 Spring 管理&lt;/p&gt;
&lt;h1 id=&#34;q13&#34;&gt;Q13
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;数据库事务具有 ACID 特性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Atomicity 原子性&lt;/li&gt;
&lt;li&gt;Consistency 一致性&lt;/li&gt;
&lt;li&gt;Isolation 隔离性&lt;/li&gt;
&lt;li&gt;Durability 持久性&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;q14&#34;&gt;Q14
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;SQL 标准定义了哪四种隔离级别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Isolation Level&lt;/th&gt;
          &lt;th&gt;脏读（Dirty Read）&lt;/th&gt;
          &lt;th&gt;不可重复读（Non Repeatable Read）&lt;/th&gt;
          &lt;th&gt;幻读（Phantom Read）&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Read Uncommitted&lt;/td&gt;
          &lt;td&gt;Yes&lt;/td&gt;
          &lt;td&gt;Yes&lt;/td&gt;
          &lt;td&gt;Yes&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Read Committed&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;Yes&lt;/td&gt;
          &lt;td&gt;Yes&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Repeatable Read&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;Yes&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Serializable&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;q15&#34;&gt;Q15
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;你实现过文件上传功能吗，说一下你项目中的方案&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;OSS&lt;/p&gt;
&lt;p&gt;有什么好处&lt;/p&gt;
&lt;h1 id=&#34;q16&#34;&gt;Q16
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;mybatis 新增操作怎么获取新增记录的主键，怎么确保它的正确映射&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;@Options(useGeneratedKeys = true, keyProperty = &amp;quot;id&amp;quot;, keyColumn = &amp;quot;id&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;property 和 column&lt;/p&gt;
&lt;h1 id=&#34;q17&#34;&gt;Q17
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;跨表操作在我们查询的时候非常常见，你怎么决定是在 mapper 层通过表连接 SQL JOIN 来处理跨表，还是在 service 层做跨表，都有什么优劣&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;性能&lt;/li&gt;
&lt;li&gt;灵活、拓展性&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;跨表操作在 mapper 层&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点
&lt;ul&gt;
&lt;li&gt;性能更优，数据库引擎的优化&lt;/li&gt;
&lt;li&gt;事务的一致性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点
&lt;ul&gt;
&lt;li&gt;复杂的 sql 维护困难&lt;/li&gt;
&lt;li&gt;耦合性高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;跨表操作在 service 层&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点
&lt;ul&gt;
&lt;li&gt;可读性、可维护性&lt;/li&gt;
&lt;li&gt;灵活性&lt;/li&gt;
&lt;li&gt;可拓展性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点
&lt;ul&gt;
&lt;li&gt;性能&lt;/li&gt;
&lt;li&gt;事务管理复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我更偏向将复杂的跨表操作放在 service 层，&lt;strong&gt;项目的稳健性是非常重要的&lt;/strong&gt;，非常简单的跨表操作才考虑放在mapper 层。放在 mapper 层虽然提高了性能且减少了事务管理的麻烦，但是带来的弊端是在项目未来继续扩张时一定会碰到的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;避免过早优化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mapper&lt;/code&gt; 层的跨表操作通常遵循&lt;strong&gt;低复杂性&lt;/strong&gt;和&lt;strong&gt;高效率&lt;/strong&gt;的原则。因此，通常建议 &lt;code&gt;mapper&lt;/code&gt; 层的跨表操作仅限于&lt;strong&gt;必要且简单的场景&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;复杂查询的最佳实践&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在开发中，遇到需要跨表操作的场景时，建议采取以下策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;拆分查询&lt;/strong&gt;：尽量避免过度依赖 &lt;code&gt;JOIN&lt;/code&gt;，可以通过多次查询分别获取数据，再通过 &lt;code&gt;service&lt;/code&gt; 层合并处理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;视图或存储过程&lt;/strong&gt;：如果有较为复杂的跨表查询需求，可以考虑在数据库中创建视图或者存储过程，将复杂的逻辑封装在数据库中，以便简化 &lt;code&gt;mapper&lt;/code&gt; 层的操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DTO 或 VO 封装&lt;/strong&gt;：将查询结果封装到 &lt;code&gt;DTO&lt;/code&gt; 或 &lt;code&gt;VO&lt;/code&gt;，而不是直接在 &lt;code&gt;mapper&lt;/code&gt; 层进行业务逻辑处理。例如，查询班级与班主任的名字，可以在 &lt;code&gt;service&lt;/code&gt; 层执行两次查询，将数据封装成一个完整的 DTO 返回给前端。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>hibernate</title>
        <link>https://example.com/p/hibernate/</link>
        <pubDate>Thu, 12 Sep 2024 16:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/hibernate/</guid>
        <description>&lt;h1 id=&#34;hibernate&#34;&gt;Hibernate
&lt;/h1&gt;&lt;h2 id=&#34;使用&#34;&gt;使用
&lt;/h2&gt;&lt;p&gt;1、随便找一个配置类生成Bean&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;73
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;74
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;75
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;com.gaj.config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;org.hibernate.SessionFactory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;org.springframework.beans.factory.annotation.Autowired&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;org.springframework.beans.factory.annotation.Value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;org.springframework.boot.context.properties.EnableConfigurationProperties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;org.springframework.boot.jdbc.DataSourceBuilder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;org.springframework.context.annotation.Bean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;org.springframework.data.jpa.repository.config.EnableJpaRepositories&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;org.springframework.orm.hibernate5.HibernateTemplate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;org.springframework.orm.hibernate5.LocalSessionFactoryBean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;org.springframework.transaction.annotation.EnableTransactionManagement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;javax.sql.DataSource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;java.util.Properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @author 13043
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Configuration&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@EnableJpaRepositories&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@EnableTransactionManagement&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;HibernateConfig&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;${spring.datasource.url}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jdbcUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;${spring.datasource.username}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;${spring.datasource.password}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;${spring.datasource.driver-class-name}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;driverClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DataSource&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;dataSource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DataSourceBuilder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jdbcUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;driverClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;driverClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LocalSessionFactoryBean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;localSessionFactoryBean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Properties&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setProperty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hibernate.show_sql&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setProperty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hibernate.format_sql&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setProperty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hibernate.hbm2ddl.auto&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;update&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;         * 如果是高版本的mysql，请使用MySQLDialect,低版本使用MySQL5Dialect
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;         */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setProperty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hibernate.dialect&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;org.hibernate.dialect.MySQLDialect&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LocalSessionFactoryBean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lsb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LocalSessionFactoryBean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lsb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setDataSource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dataSource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;         * 设置实体类的位置
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;         */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lsb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setPackagesToScan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;com.gaj.pojo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lsb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setHibernateProperties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lsb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HibernateTemplate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;hibernateTemplate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Autowired&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SessionFactory&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sessionFactory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HibernateTemplate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hibernateTemplate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HibernateTemplate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hibernateTemplate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setSessionFactory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sessionFactory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hibernateTemplate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2、注入&lt;code&gt;HibernateTemplate&lt;/code&gt;调用相关api即可使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;可能会遇到的问题&#34;&gt;可能会遇到的问题
&lt;/h2&gt;&lt;h3 id=&#34;循环依赖问题&#34;&gt;循环依赖问题
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://example.com/p/hibernate/index.assets/image-20241130203612259.png&#34;
	width=&#34;988&#34;
	height=&#34;694&#34;
	srcset=&#34;https://example.com/p/hibernate/index.assets/image-20241130203612259_hu4463406740628562496.png 480w, https://example.com/p/hibernate/index.assets/image-20241130203612259_hu18274349211356561198.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241130203612259&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;341px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;其实就是&lt;code&gt;SessionFactory&lt;/code&gt;的创建时机不太正确。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;具体来看，当 Spring 容器在初始化&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;HibernateConfig
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;类时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先会尝试创建 &lt;code&gt;dataSource&lt;/code&gt; bean，它依赖于配置文件中的数据库连接属性，这个过程相对独立，不太容易直接形成循环依赖。&lt;/li&gt;
&lt;li&gt;接着创建 &lt;code&gt;localSessionFactoryBean&lt;/code&gt; bean，它依赖于 &lt;code&gt;dataSource&lt;/code&gt; 和一些配置属性，在创建过程中会生成 &lt;code&gt;SessionFactory&lt;/code&gt;（通过 &lt;code&gt;LocalSessionFactoryBean&lt;/code&gt; 的配置和初始化）。&lt;/li&gt;
&lt;li&gt;然而，在创建 &lt;code&gt;hibernateTemplate&lt;/code&gt; bean 时，它需要注入已经创建好的 &lt;code&gt;SessionFactory&lt;/code&gt;，但此时如果 &lt;code&gt;SessionFactory&lt;/code&gt; 的创建和注入流程没有处理好，就可能出现循环依赖。例如，如果在其他地方也在尝试创建 &lt;code&gt;SessionFactory&lt;/code&gt; 并且依赖于 &lt;code&gt;hibernateTemplate&lt;/code&gt; 或者与之相关的组件，就会形成一个循环，即 &lt;code&gt;hibernateTemplate&lt;/code&gt; 等待 &lt;code&gt;SessionFactory&lt;/code&gt; 注入，而 &lt;code&gt;SessionFactory&lt;/code&gt; 的创建又依赖于其他与 &lt;code&gt;hibernateTemplate&lt;/code&gt; 相关的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;将&lt;code&gt;SessionFactory&lt;/code&gt;置入要用到的方法形参列表即可，或者指定一下Bean的加载顺序&lt;/p&gt;
</description>
        </item>
        <item>
        <title>mysql索引</title>
        <link>https://example.com/p/mysql%E7%B4%A2%E5%BC%95/</link>
        <pubDate>Thu, 12 Sep 2024 16:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/mysql%E7%B4%A2%E5%BC%95/</guid>
        <description></description>
        </item>
        <item>
        <title>Spring IoC</title>
        <link>https://example.com/p/spring-ioc/</link>
        <pubDate>Thu, 12 Sep 2024 16:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/spring-ioc/</guid>
        <description>&lt;h1 id=&#34;spring-ioc&#34;&gt;Spring IoC
&lt;/h1&gt;</description>
        </item>
        <item>
        <title>日记</title>
        <link>https://example.com/p/%E6%97%A5%E8%AE%B0/</link>
        <pubDate>Thu, 12 Sep 2024 16:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/%E6%97%A5%E8%AE%B0/</guid>
        <description>&lt;h2 id=&#34;2024&#34;&gt;2024
&lt;/h2&gt;&lt;h2 id=&#34;1130&#34;&gt;11.30
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;进度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;昨天一趟深圳，本意是拿下另外两场10-15的岗位，结果是临时加在早上的面试通过并且晚上就给了结果。给的是10.5，主要是想着以约面试多为优先，结果是我现在的能力已经不需要靠面试数量来做提升了，所以报的很随意。&lt;del&gt;包括我都没拿过工资的人，实在是没什么概念&lt;/del&gt;。包括这周大概10场面试，俩份offer，5个二面有些地域原因没法接，基本上来说面试太过容易。但主要原因还是因为我对自己的定位没那么明确，基本上10k以上的就都约，自我认知不足。&lt;/p&gt;
&lt;p&gt;面试于我就像是游戏打榜一样简单（当然有输有赢，但），一场面试总结一场，写下笔记之后就在脑子里，所以真的是没难度（&lt;del&gt;主要是脑子好，大学四年高强度锻炼了我的临时记忆效率&lt;/del&gt;）。仅以面试的效果来看，我认为我的面试表现上限很高，但其实准备做的不够充足，包括我的简历实在是太抽象，10条里面8条redis（&lt;del&gt;终于知道为什么面试官都逮着redis疯狂问我&lt;/del&gt;）但问的有水平的面试官还是只有那位广州耕耘的二面，其他的面试官的发问都还是八股文（仅限在redis这块）。&lt;/p&gt;
&lt;p&gt;但我还是决定先入职，确实虽然是这半年一步步努力过来，但这半个月来的所作所为太虚，虽说提升了面试沟通表达能力，但说实话半个月只能说是把我本有的，荒废四年的能力重新发挥。实际的提升相对来说不大，还是得靠在工作中锻炼吧。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;面试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;面试应当是二者双方的一种技术交流，不应该只限于单方面的发问。所以那种由HR拿套八股文问的就实在是没有价值，我并不需要通过这种方式来做单方面的输出。&lt;/p&gt;
&lt;p&gt;今天正式决定下星期先去入职，能接收民教网的情况下就打算先暂时做到明年。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>随记</title>
        <link>https://example.com/p/%E9%9A%8F%E8%AE%B0/</link>
        <pubDate>Thu, 12 Sep 2024 16:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/%E9%9A%8F%E8%AE%B0/</guid>
        <description></description>
        </item>
        <item>
        <title>随记</title>
        <link>https://example.com/p/%E9%9A%8F%E8%AE%B0/</link>
        <pubDate>Thu, 12 Sep 2024 16:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/%E9%9A%8F%E8%AE%B0/</guid>
        <description>&lt;h1 id=&#34;q1&#34;&gt;Q1
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;private final Logger logger = LoggerFactory.getLogger(getClass());&lt;/p&gt;
&lt;p&gt;还是&lt;/p&gt;
&lt;p&gt;private statci final Logger logger = LoggerFactory.getLogger(ClassName.class);&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;两种写法各有优缺点，选择哪一种取决于你的需求和项目风格。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;private final Logger logger = LoggerFactory.getLogger(getClass());&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;通用性高&lt;/strong&gt;：可以用于任何类，无需手动更新类名（适合复制粘贴代码到其他类中时无需修改）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适应继承&lt;/strong&gt;：如果这个类被继承，&lt;code&gt;getClass()&lt;/code&gt; 会返回子类的类型，日志会正确显示子类的类名。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;运行时开销&lt;/strong&gt;：&lt;code&gt;getClass()&lt;/code&gt; 是在运行时确定的，虽然开销不大，但比静态方法稍微慢一些。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;private static final Logger logger = LoggerFactory.getLogger(ClassName.class);&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;效率稍高&lt;/strong&gt;：因为 &lt;code&gt;ClassName.class&lt;/code&gt; 是在编译时确定的，性能上稍微优于 &lt;code&gt;getClass()&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;符合静态常量的惯例&lt;/strong&gt;：&lt;code&gt;logger&lt;/code&gt; 是静态的，通常被定义为 &lt;code&gt;static final&lt;/code&gt;，符合惯例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;日志清晰&lt;/strong&gt;：明确指定类名，在日志中始终使用这个类的名字，不管它是否被继承。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;继承问题&lt;/strong&gt;：如果类被继承，日志依然显示的是父类的类名，而不是子类的名字，这在需要记录子类日志时可能不是理想的选择。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类名需要手动更新&lt;/strong&gt;：如果你复制这个类或重命名它，你需要手动更新 &lt;code&gt;ClassName&lt;/code&gt;，否则会导致日志记录混乱。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;推荐用法&#34;&gt;推荐用法：
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用 &lt;code&gt;static final&lt;/code&gt; 和类名&lt;/strong&gt; 的方式更为常见，尤其在不涉及继承的情况下。这种方式在性能上更高效，且更符合静态常量的使用习惯。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;private static final Logger logger = LoggerFactory.getLogger(ClassName.class);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;如果你的类可能会被继承并且你希望日志记录子类的类名，则可以考虑使用 &lt;code&gt;getClass()&lt;/code&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;private final Logger logger = LoggerFactory.getLogger(getClass());
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;总结：对于一般类，建议使用 &lt;code&gt;static final Logger&lt;/code&gt; 和类名；如果有继承需求，使用 &lt;code&gt;getClass()&lt;/code&gt; 更灵活。&lt;/p&gt;
&lt;h1 id=&#34;单体项目平滑发布&#34;&gt;单体项目平滑发布
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;蓝绿发布&lt;/p&gt;
&lt;p&gt;单机多双结点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;k8s和docker&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;广告投放定时任务&#34;&gt;广告投放定时任务
&lt;/h1&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1xt421K78v/?spm_id_from=333.337.top_right_bar_window_history.content.click&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;从半小时到秒级-京东定时任务优化实战_哔哩哔哩_bilibili&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;限制堆外内存&#34;&gt;限制堆外内存
&lt;/h1&gt;&lt;h1 id=&#34;深分页&#34;&gt;深分页
&lt;/h1&gt;&lt;p&gt;limit 5000000, 100 和 where id &amp;gt; 5000000 limit 100&lt;/p&gt;
</description>
        </item>
        <item>
        <title>随记</title>
        <link>https://example.com/p/%E9%9A%8F%E8%AE%B0/</link>
        <pubDate>Thu, 12 Sep 2024 16:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/%E9%9A%8F%E8%AE%B0/</guid>
        <description>&lt;h2 id=&#34;q1&#34;&gt;Q1
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;private final Logger logger = LoggerFactory.getLogger(getClass());&lt;/p&gt;
&lt;p&gt;还是&lt;/p&gt;
&lt;p&gt;private statci final Logger logger = LoggerFactory.getLogger(ClassName.class);&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;两种写法各有优缺点，选择哪一种取决于你的需求和项目风格。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;private final Logger logger = LoggerFactory.getLogger(getClass());&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;通用性高&lt;/strong&gt;：可以用于任何类，无需手动更新类名（适合复制粘贴代码到其他类中时无需修改）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适应继承&lt;/strong&gt;：如果这个类被继承，&lt;code&gt;getClass()&lt;/code&gt; 会返回子类的类型，日志会正确显示子类的类名。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;运行时开销&lt;/strong&gt;：&lt;code&gt;getClass()&lt;/code&gt; 是在运行时确定的，虽然开销不大，但比静态方法稍微慢一些。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;private static final Logger logger = LoggerFactory.getLogger(ClassName.class);&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;效率稍高&lt;/strong&gt;：因为 &lt;code&gt;ClassName.class&lt;/code&gt; 是在编译时确定的，性能上稍微优于 &lt;code&gt;getClass()&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;符合静态常量的惯例&lt;/strong&gt;：&lt;code&gt;logger&lt;/code&gt; 是静态的，通常被定义为 &lt;code&gt;static final&lt;/code&gt;，符合惯例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;日志清晰&lt;/strong&gt;：明确指定类名，在日志中始终使用这个类的名字，不管它是否被继承。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;继承问题&lt;/strong&gt;：如果类被继承，日志依然显示的是父类的类名，而不是子类的名字，这在需要记录子类日志时可能不是理想的选择。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类名需要手动更新&lt;/strong&gt;：如果你复制这个类或重命名它，你需要手动更新 &lt;code&gt;ClassName&lt;/code&gt;，否则会导致日志记录混乱。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;推荐用法&#34;&gt;推荐用法：
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用 &lt;code&gt;static final&lt;/code&gt; 和类名&lt;/strong&gt; 的方式更为常见，尤其在不涉及继承的情况下。这种方式在性能上更高效，且更符合静态常量的使用习惯。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;private static final Logger logger = LoggerFactory.getLogger(ClassName.class);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;如果你的类可能会被继承并且你希望日志记录子类的类名，则可以考虑使用 &lt;code&gt;getClass()&lt;/code&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;private final Logger logger = LoggerFactory.getLogger(getClass());
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;总结：对于一般类，建议使用 &lt;code&gt;static final Logger&lt;/code&gt; 和类名；如果有继承需求，使用 &lt;code&gt;getClass()&lt;/code&gt; 更灵活&lt;/p&gt;
&lt;h2 id=&#34;单体项目平滑发布&#34;&gt;单体项目平滑发布
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;蓝绿发布&lt;/p&gt;
&lt;p&gt;单机多双结点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;k8s和docker&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;广告投放定时任务&#34;&gt;广告投放定时任务
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1xt421K78v/?spm_id_from=333.337.top_right_bar_window_history.content.click&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;从半小时到秒级-京东定时任务优化实战_哔哩哔哩_bilibili&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;限制堆外内存&#34;&gt;限制堆外内存
&lt;/h2&gt;&lt;h2 id=&#34;深分页&#34;&gt;深分页
&lt;/h2&gt;&lt;p&gt;limit 5000000, 100 和 where id &amp;gt; 5000000 limit 100&lt;/p&gt;
&lt;h2 id=&#34;服务器情况&#34;&gt;服务器情况
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E9%9A%8F%E8%AE%B0/index.assets/image-20241109084522477.png&#34;
	width=&#34;528&#34;
	height=&#34;151&#34;
	srcset=&#34;https://example.com/p/%E9%9A%8F%E8%AE%B0/index.assets/image-20241109084522477_hu14651569809227415220.png 480w, https://example.com/p/%E9%9A%8F%E8%AE%B0/index.assets/image-20241109084522477_hu6506989586169050596.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241109084522477&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;349&#34;
		data-flex-basis=&#34;839px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Git分支</title>
        <link>https://example.com/p/git%E5%88%86%E6%94%AF/</link>
        <pubDate>Wed, 11 Sep 2024 20:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/git%E5%88%86%E6%94%AF/</guid>
        <description>&lt;h3 id=&#34;1-main-分支&#34;&gt;1. &lt;code&gt;main&lt;/code&gt; 分支
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;: &lt;code&gt;main&lt;/code&gt;（或 &lt;code&gt;master&lt;/code&gt;）是项目的主要分支，通常代表的是当前稳定和可发布的版本。它是用户和生产环境直接使用的分支。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;说明&lt;/strong&gt;: 代码合并到 &lt;code&gt;main&lt;/code&gt; 分支时，通常已经经过充分的测试，并且功能已经完全实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-build-分支&#34;&gt;2. &lt;code&gt;build&lt;/code&gt; 分支
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;: 用于存储构建脚本、构建配置文件或持续集成和部署的代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;说明&lt;/strong&gt;: 该分支可能包含自动化构建系统所需的工具或配置文件，比如 Jenkinsfile、Dockerfile 或者 CI/CD 的脚本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-exp-分支&#34;&gt;3. &lt;code&gt;exp&lt;/code&gt; 分支
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;: &lt;code&gt;exp&lt;/code&gt; 是实验（experimental）的缩写。用于进行实验性的开发。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;说明&lt;/strong&gt;: 该分支可能包含尚未确定的功能或新技术的尝试，通常不保证稳定性，并且可能会在未来被删除或合并到其他分支。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-feat-分支&#34;&gt;4. &lt;code&gt;feat&lt;/code&gt; 分支
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;: &lt;code&gt;feat&lt;/code&gt; 是 &lt;code&gt;feature&lt;/code&gt; 的缩写。用于开发新功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;说明&lt;/strong&gt;: 通常每个功能都会有一个单独的分支（如 &lt;code&gt;feat/feature-name&lt;/code&gt;），开发完成并通过测试后再合并到 &lt;code&gt;dev&lt;/code&gt; 或 &lt;code&gt;main&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-fix-分支&#34;&gt;5. &lt;code&gt;fix&lt;/code&gt; 分支
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;: &lt;code&gt;fix&lt;/code&gt; 分支专门用于修复 bug。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;说明&lt;/strong&gt;: 修复特定问题或 bug 的代码会先提交到 &lt;code&gt;fix&lt;/code&gt; 分支，然后再合并到 &lt;code&gt;dev&lt;/code&gt; 或 &lt;code&gt;main&lt;/code&gt;，以确保问题修复后能立即进入下一步发布流程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-issues-分支&#34;&gt;6. &lt;code&gt;issues&lt;/code&gt; 分支
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;: 与项目的 issue 管理工具（如 GitHub Issues）相结合，专门用于处理特定的 issues（问题/任务）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;说明&lt;/strong&gt;: 该分支通常用于实现特定问题的修复或功能改进，分支名称通常会包括 issue 的编号（如 &lt;code&gt;issues/#123&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7-perf-分支&#34;&gt;7. &lt;code&gt;perf&lt;/code&gt; 分支
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;: &lt;code&gt;perf&lt;/code&gt; 是 &lt;code&gt;performance&lt;/code&gt; 的缩写。用于进行性能优化。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;说明&lt;/strong&gt;: 该分支会涉及到代码的性能改进，例如减少内存使用、优化算法等，然后这些改动会被测试和验证后合并回主分支。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;8-refactor-分支&#34;&gt;8. &lt;code&gt;refactor&lt;/code&gt; 分支
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;: 用于重构代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;说明&lt;/strong&gt;: 该分支上的改动通常不影响功能，但会改善代码质量、结构和可维护性。这些改动通常需要经过充分的测试，以确保没有引入新的 bug。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;9-rework-分支&#34;&gt;9. &lt;code&gt;rework&lt;/code&gt; 分支
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;: 专门用于重新开发或重写某部分代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;说明&lt;/strong&gt;: 当某个功能或模块需要大规模重写而不破坏现有版本时，&lt;code&gt;rework&lt;/code&gt; 分支会被创建。在完成后，这些改动可以被合并到 &lt;code&gt;dev&lt;/code&gt; 或其他相应的分支。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;10-dev-分支&#34;&gt;10. &lt;code&gt;dev&lt;/code&gt; 分支
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;: &lt;code&gt;dev&lt;/code&gt; 是开发分支，通常是用于日常开发的主要分支。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;说明&lt;/strong&gt;: 这个分支包含尚在开发中的功能和改进，在合并到 &lt;code&gt;main&lt;/code&gt; 之前通常会在这个分支进行测试和 bug 修复。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;11-017_lts-分支&#34;&gt;11. &lt;code&gt;0.17_LTS&lt;/code&gt; 分支
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;: 该分支代表一个长期支持（Long Term Support, LTS）的版本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;说明&lt;/strong&gt;: 此版本通常比最新版本更稳定，且会定期接收安全更新和重要的 bug 修复。它可能用于需要长期支持的客户或产品环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12-litecommand-分支&#34;&gt;12. &lt;code&gt;litecommand&lt;/code&gt; 分支
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;: 可能用于开发一个名为 &lt;code&gt;litecommand&lt;/code&gt; 的特定功能或模块。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;说明&lt;/strong&gt;: 该分支上可能包含与 &lt;code&gt;litecommand&lt;/code&gt; 功能相关的代码，开发完成后再合并回主分支。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>多线程</title>
        <link>https://example.com/p/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
        <pubDate>Sun, 01 Sep 2024 21:52:54 +0800</pubDate>
        
        <guid>https://example.com/p/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
        <description>&lt;h1 id=&#34;多线程&#34;&gt;多线程
&lt;/h1&gt;&lt;h2 id=&#34;线程&#34;&gt;线程
&lt;/h2&gt;&lt;h3 id=&#34;创建线程&#34;&gt;创建线程
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;继承 Thread 类，重写 run 方法，然后创建子类对象调用 start() 方法&lt;/li&gt;
&lt;li&gt;实现 Runnable 接口，重写 run 方法，然后创建实现类对象并传递给一个 Thread，调用 start()&lt;/li&gt;
&lt;li&gt;实现 Callable 接口，重写 call 方法，然后创建实现类对象并传递给一个 FutureTask 类对象，最后传递给一个 Thread 对象调用 start()&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;线程的六种状态&#34;&gt;线程的六种状态
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;NEW 新建状态&lt;/li&gt;
&lt;li&gt;RUNNABLE 可运行状态，线程调用 start() 方法后即处于这个状态&lt;/li&gt;
&lt;li&gt;BLOCKED 锁阻塞状态，没有获取到锁即处于这个状态&lt;/li&gt;
&lt;li&gt;WAITING 无线等待状态，线程执行时被调用了 wait() 方法处于这个状态&lt;/li&gt;
&lt;li&gt;TIMED_WAITING 计时等待状态，线程执行时被调用了 sleep(ms) 或 wait(ms) 方法即处于这个状态&lt;/li&gt;
&lt;li&gt;TERMINATED 终止状态，线程执行完毕或遇到异常即处于这个状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;线程池&#34;&gt;线程池
&lt;/h2&gt;&lt;h3 id=&#34;threadpoolexcutor&#34;&gt;ThreadPoolExcutor
&lt;/h3&gt;&lt;p&gt;线程池内部使用 AtomicTnteger 来维护 runState(运行状态) 和 workerCount(线程数量)
&lt;strong&gt;用一个变量去存储两个值，可避免在做相关决策时，出现不一致的情况，不必为了维护两者的一致，而占用锁资源。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;顶层接口是 Excutor&lt;/p&gt;
&lt;h3 id=&#34;线程池的五种运行状态&#34;&gt;线程池的五种运行状态
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;RUNNING 能接受新提交的任务，并且也能处理阻塞队列中的任务&lt;/li&gt;
&lt;li&gt;SHUTDOWN 关闭状态，不再接受新提交的任务，但可以继续处理阻塞队列中保存的任务&lt;/li&gt;
&lt;li&gt;STOP 不能接受新任务，也不处理队列中的任务，会中断正在处理任务的线程&lt;/li&gt;
&lt;li&gt;TIDYING 所有的任务都终止了，workerCount(有效线程数)为0&lt;/li&gt;
&lt;li&gt;TERMINATED 在 terminated() 方法执行完后加入该状态&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java线程池实现原理及其在美团业务中的实践 - 美团技术团队 (meituan.com)&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;q-乐观锁&#34;&gt;Q 乐观锁
&lt;/h1&gt;&lt;p&gt;乐观锁的基本原理：
乐观锁的思想是假设并发情况下不会有冲突，只有在提交数据时才会检测是否存在冲突。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Spring访问数据库</title>
        <link>https://example.com/p/spring%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
        <pubDate>Wed, 28 Aug 2024 20:40:00 +0800</pubDate>
        
        <guid>https://example.com/p/spring%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;Spring 简化了数据库访问：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供简化的访问 JDBC 的模板类，不必手动释放&lt;/li&gt;
&lt;li&gt;提供一个统一的 DAO 类以实现 Data Access Object模式&lt;/li&gt;
&lt;li&gt;把 SQLException 封装为 DataAccessException，这是一个 RuntimeException&lt;/li&gt;
&lt;li&gt;能方便地继承 Hibernate、JPA 和 MyBatis 这些数据库访问框架&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;使用-jdbc&#34;&gt;使用 JDBC
&lt;/h2&gt;&lt;p&gt;引入以下依赖：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;org.springframework:spring-context:6.0.0&lt;/li&gt;
&lt;li&gt;org.springframework:spring-jdbc:6.0.0&lt;/li&gt;
&lt;li&gt;jakarta.annotation:jakarta.annotation-api:2.1.1&lt;/li&gt;
&lt;li&gt;com.zaxxer:HikariCP:5.0.1&lt;/li&gt;
&lt;li&gt;org.hsqldb:hsqldb:2.7.1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 AppConfig 中，创建以下几个必须的 Bean：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Configuration&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@ComponentScan&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@PropertySource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;jdbc.properties&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 读取数据库配置文件&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;AppConfig&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;${jdbc:url}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 注入配置文件的相关配置&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jdbcUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;${jdbc.username}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jdbcUsername&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;${jdbc.password}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jdbcPassword&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DataSource&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;createDataSource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 创建需要用到注入的配置&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HikariConfig&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HikariConfig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setJdbcUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jdbcUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setUsername&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jdbcUsername&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setPassword&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jdbcPassword&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;addDataSourceProperty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;autoCommit&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;addDataSourceProperty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;connectionTimeout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;5&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;addDataSourceProperty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;idleTimeout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;60&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 创建 DataSource 实例，实际类型为 HikariDataSource&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HikariDataSource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JdbcTemplate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;createJdbcTemplate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Autowired&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DataSource&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dataSource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JdbcTemplate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dataSource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在需要访问数据库的 Bean 中，注入 JdbcTemplate：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Component&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UserService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Autowired&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JdbcTemplate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jdbcTemplate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;使用-jdbctemplate&#34;&gt;使用 JdbcTemplate
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;T execute(ConnectionCallback&lt;T&gt; action) 方法，提供了 Connection&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;getUserById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 传入 ConnectionCallback&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jdbcTemplate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;execute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Connection&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 可以直接使用 conn 实例，不用释放，回调结束后 jdbcTemplate 自动释放&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 在内部手动创建的 PreparedStatement、ResultSet 必须用 try(...) 释放&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ps&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;prepareStatement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;SELECT * FROM users WHERE id = ?&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setLong&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ResultSet&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rs&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;executeQuery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getLong&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RuntimeException&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;user not found by id:&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;T execute(String sql, PreparedStatementCallback&lt;T&gt; action)，PreparedStatement 实例已经由JdbcTemplate 创建，并在回调后自动释放:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;public User getUserByName(String name) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    return jdbcTemplate.execute(&amp;#34;SELECT * FROM users WHERE name = ?&amp;#34;, (PreparedStatement ps) -&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        // PreparedStatement 实例已经由 JDBCTemplate 创建，并在回调后自动释放
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        ps.setString(1, name);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        try (ResultSet rs = ps.executeQuery()) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            if (rs.next()) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                return new User(
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        rs.getLong(&amp;#34;id&amp;#34;),
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        rs.getString(&amp;#34;email&amp;#34;),
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        rs.getString(&amp;#34;password&amp;#34;),
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        rs.getString(&amp;#34;name&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                );
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            throw new RuntimeException(&amp;#34;user not found by name: &amp;#34; + name);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;T queryForObject(String sql, RowMapper&lt;T&gt; rowMapper, Object&amp;hellip; args)，传入 SQL 以及 SQL 参数后，JdbcTemplate 会自动创建 PreparedStatement，自动执行查询并返回 ResultSet，我们提供的RowMapper 需要做的事情就是把 ResultSet 的当前行映射成一个 JavaBean 并返回。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;getUserByEmail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 传入 SQL，参数和 RowMapper 实例&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jdbcTemplate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;queryForObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;SELECT * FROM users WHERE email = ?&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ResultSet&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rowNum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 将 ResultSet 的当前行映射为一个 JavaBean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getLong&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;JdbcTemplate 设计的目的就是为了避免繁琐的 try&amp;hellip;catch 语句&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;query() 方法返回多行记录，传入 SQL 语句，SQL 参数以及 RowMapper 实例&lt;/p&gt;
&lt;p&gt;Spring 提供了 BeanPropertyRowMapper&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;getUsers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pageIndex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;limit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;offset&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;limit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pageIndex&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jdbcTemplate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;SELECT * FROM users LIMIT ? OFFSET ?&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BeanPropertyRowMapper&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;limit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;offset&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;插入、更新、删除使用 update()&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;updateUser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 传入 SQL、SQL 参数、返回更新的行数&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jdbcTemplate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;UPDATE users SET name = ? WHERE id = ?&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RuntimeException&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;User not found by id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用 KeyHolder 获取插入后的自增值&lt;/p&gt;
&lt;p&gt;update() 时传入 PreparedStatementCreator 和 KeyHolder 两个参数&lt;/p&gt;
&lt;p&gt;holder.getKey() 可以获取返回自增值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;register&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;KeyHolder&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;holder&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GeneratedKeyHolder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jdbcTemplate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 参数 PreparedStatementCreator&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PreparedStatement&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ps&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;prepareStatement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;INSERT INTO users(email, password, name) VALUES (?,?,?)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Statement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;RETURN_GENERATED_KEYS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 参数 KeyHolder&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;holder&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RuntimeException&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Insert failed.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;holder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;longValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;jdbctemplate-用法总结&#34;&gt;JdbcTemplate 用法总结
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;简单查询使用 query()，只需要提供 SQL 语句、参数和 RowMapper&lt;/li&gt;
&lt;li&gt;更新操作使用 update()，只需要提供 SQL 语句和参数&lt;/li&gt;
&lt;li&gt;任何复杂的操作使用 execute(ConnectionCallback)，拿到了 Connection 就可以做任何 JDBC 操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设计表结构的时候要和 JavaBean 的属性一一对应，这样就可以方便的使用 Spring 提供的 BeanPropertyRowMapper。&lt;/p&gt;
&lt;p&gt;如果表结构和 JavaBean 不一致，则需要稍微改写查询使得结果集和 JavaBean 保持一致&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据库列名与 JavaBean 属性名不一致&lt;/p&gt;
&lt;p&gt;在 SQL 查询中使用别名将列名与 JavaBean 属性名对齐。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;LIMIT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;OFFSET&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据库表包含 JavaBean 中没有的字段&lt;/p&gt;
&lt;p&gt;在查询中只选择 JavaBean 中定义的字段.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JavaBean 中包含数据库表没有的字段&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JavaBean 中的字段需要进行转换&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CASE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHEN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_active&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;THEN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ELSE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FALSE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;END&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;active&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;LIMIT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;OFFSET&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;需要使用自定义的行映射器&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UserRowMapper&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;implements&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RowMapper&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mapRow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ResultSet&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rowNum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SQLException&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getLong&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;user_id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;user_name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setActive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getInt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;is_active&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 其他属性的映射&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;使用声明式事务&#34;&gt;使用声明式事务
&lt;/h2&gt;&lt;p&gt;Spring 中提供了一个 PlatformTransactionManager 来表示事务管理器。事务由 TransactionStatus 表示。&lt;/p&gt;
&lt;p&gt;手写事务代码的话，一般在 try{&amp;hellip;..} 中执行数据操作，然后 catch{&amp;hellip;..} 中捕获错误然后 rollback 事务，没有捕获到错误的话就 commit() 提交事务。&lt;/p&gt;
&lt;h3 id=&#34;启用声明式事务&#34;&gt;启用声明式事务
&lt;/h3&gt;&lt;p&gt;在 AppConfig 中追加一个 PlatformTransactionManager 对应的 Bean，然后再加一个 @EnableTransactionManagement 注解&lt;/p&gt;
&lt;p&gt;PlatformTransactionManager 对应的 Bean：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PlatformTransactionManager&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;createTxManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Autowired&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DataSource&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dataSource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 实际类型是 DataSourceTransactionManager&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DataSourceTransactionManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dataSource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;@EnableTransactionManagement 注解&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Configuration&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@ComponentScan&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@PropertySource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;jdbc.properties&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@EnableTransactionManagement&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 启用声明式事务&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;AppConfig&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PlatformTransactionManager&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;createTxManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Autowired&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DataSource&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dataSource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DataSourceTransactionManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dataSource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这样就启用了声明式事务，然后对需要事务支持的方法或者在 Bean 上加（表示对所有 public 方法都具有事务支持），加上一个 @Transactional 注解。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Transactional&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;register&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;KeyHolder&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;holder&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GeneratedKeyHolder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jdbcTemplate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 将会抛出异常&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 参数 PreparedStatementCreator&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PreparedStatement&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ps&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;prepareStatement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;INSERT INTO users(email, password, name) VALUES (?,?,?)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Statement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;RETURN_GENERATED_KEYS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 参数 KeyHolder&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;holder&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RuntimeException&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Insert failed, will roll back.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 将会 rollback&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;holder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;longValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Spring 会通过 AOP 代理实现事务的支持。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UserService$$EnhancerBySpringCGLIB&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UserService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UserService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PlatformTransactionManager&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;txManager&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;register&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TransactionStatus&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;txManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getTransaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DefaultTransactionDefinition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;register&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;txManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RuntimeException&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 默认情况下只有 RuntimeException 触发回滚&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;txManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;rollback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;针对异常类型决定是否回滚&#34;&gt;针对异常类型决定是否回滚
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Transactional&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rollbackFor&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RuntimeException&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;强烈建议业务异常体系从 RuntimeException 派生&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;事务边界&#34;&gt;事务边界
&lt;/h3&gt;&lt;p&gt;一般来说一个事务的开始就是方法的开始，事务的结束就是方法的结束。&lt;/p&gt;
&lt;p&gt;新用户注册的事务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Component&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UserService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Transactional&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;register&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 事务开始&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;....&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 事务结束&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;发表博客的事务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Componet&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;BlogService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Transaction&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Blog&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;addBlog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 事务开始&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 事务结束&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果我们想要这样的效果：新用户注册后自动发表一个打招呼的博客：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Component&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UserService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Autowired&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BlogService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;blogService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Transactional&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;register&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;....&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jdbcTemplate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;insert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;....&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;blogService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;addBlog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello Blog!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果 addBlog() 抛出异常， register() 是否也需要回滚？&lt;/p&gt;
&lt;h3 id=&#34;事务传播&#34;&gt;事务传播
&lt;/h3&gt;&lt;p&gt;Spring 为事务传播定义的几个级别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;REQUIRED&lt;/p&gt;
&lt;p&gt;默认的事务传播级别，表示如果当前没有事务，就创建一个事务，如果当前有事务，就加入到当前事务中执行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SUPPORTS&lt;/p&gt;
&lt;p&gt;表示如果有事务，就加入到当前事务，如果没有，那也不开启事务执行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MANDATORY&lt;/p&gt;
&lt;p&gt;表示必须要存在当前事务并加入执行，否则将抛出异常&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;REQUIRES_NEW&lt;/p&gt;
&lt;p&gt;表示不管当前有没有事务，都必须开启一个新的事务执行。如果当前已有事务，将当前事务挂起，等新事务完成后，再恢复执行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NOT_SUPPORTED&lt;/p&gt;
&lt;p&gt;表示不支持事务，如果当前有事务，将当前事务挂起，等这个方法执行完成后，再恢复执行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NEVER&lt;/p&gt;
&lt;p&gt;和 NOT_SUPPORTED 相比，它不但不支持事务，而且在监测到当前有事务时，会抛出异常拒绝执行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NESTED&lt;/p&gt;
&lt;p&gt;表示如果当前有事务，则开启一个嵌套级别事务，如果当前没有事务，则开启一个新事务&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;默认的 REQUIRED 已经满足绝大部分需求，SUPPORTS 和 REQUIRES_NEW 在少数情况下会用到，其他基本不会用到&lt;/p&gt;
&lt;p&gt;定义事务的传播级别&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Transactional&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;propagation&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Propagation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;REQUIRES_NEW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Product&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;createProduct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Spring 使用 ThreadLocal 来传播事务，如果一个事务方法从 ThreadLocal 未取到事务，那么它会打开一个新的 JDBC 连接，同时开启一个新的事务，否则，它就直接使用从 ThreadLocal 获取的 JDBC 连接以及 TransactionStatus。因此事务能正确传播的前提是，方法调用是再一个线程内才行。&lt;/p&gt;
&lt;h2 id=&#34;使用-dao&#34;&gt;使用 DAO
&lt;/h2&gt;&lt;h2 id=&#34;集成-hibernate&#34;&gt;集成 Hibernate
&lt;/h2&gt;&lt;h2 id=&#34;集成-jpa&#34;&gt;集成 JPA
&lt;/h2&gt;&lt;h2 id=&#34;集成-mybatis&#34;&gt;集成 MyBatis
&lt;/h2&gt;</description>
        </item>
        <item>
        <title>集合八股文</title>
        <link>https://example.com/p/%E9%9B%86%E5%90%88%E5%85%AB%E8%82%A1%E6%96%87/</link>
        <pubDate>Wed, 28 Aug 2024 20:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/%E9%9B%86%E5%90%88%E5%85%AB%E8%82%A1%E6%96%87/</guid>
        <description>&lt;h2 id=&#34;1-数据结构&#34;&gt;1 数据结构
&lt;/h2&gt;&lt;h3 id=&#34;11-算法复杂度&#34;&gt;1.1 算法复杂度
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;时间复杂度和空间复杂度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大 O 复杂度表示法&lt;/p&gt;
&lt;p&gt;舍去低阶、常量、系数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-常见数据结构&#34;&gt;2 常见数据结构
&lt;/h3&gt;&lt;h3 id=&#34;221-数组&#34;&gt;2.2.1 数组：
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;存储方式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;内存中连续的空间，存储相同的数据类型；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;增删改查：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;遍历：&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;222-链表&#34;&gt;2.2.2 链表：
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;存储方式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;内存中离散的结点，data（数据）和 next（下一个元素的地址）；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;增删改查：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;遍历：&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;223-栈&#34;&gt;2.2.3 栈：
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;存储方式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;满足先进后出的存储结构；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;入栈和出栈操作：&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;224-队列&#34;&gt;2.2.4 队列：
&lt;/h3&gt;&lt;p&gt;满足先进先出的存储结构；&lt;/p&gt;
&lt;p&gt;入队和出队操作；&lt;/p&gt;
&lt;h3 id=&#34;225-散列表&#34;&gt;2.2.5 散列表
&lt;/h3&gt;&lt;p&gt;理想的哈希表是不会产生冲突，即每一个元素的键（Key）都不相同的数组，但显然这种数据结构在计算机有限的空间下无法实现，注定产生哈希冲突；&lt;/p&gt;
&lt;p&gt;哈希冲突的解决方案决定了哈希表的具体数据结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;链地址&lt;/p&gt;
&lt;p&gt;Java 中采用的方案，将冲突的值将通过链表存储，并根据一定的规则将链表转换为红黑树（红黑树相对链表能显著优化查找速度）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开放定址、再哈希法、公共溢出区&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;衡量一个哈希算法的好坏主要参考该算法能否将数据均匀的映射到Key的取值范围中&lt;/p&gt;
&lt;h3 id=&#34;226-二叉树&#34;&gt;2.2.6 二叉树：
&lt;/h3&gt;&lt;p&gt;data 域和 左右儿子的指针&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E9%9B%86%E5%90%88%E5%85%AB%E8%82%A1%E6%96%87/index.assets/image-20240828204814043.png&#34;
	width=&#34;796&#34;
	height=&#34;435&#34;
	srcset=&#34;https://example.com/p/%E9%9B%86%E5%90%88%E5%85%AB%E8%82%A1%E6%96%87/index.assets/image-20240828204814043_hu5510732161020910784.png 480w, https://example.com/p/%E9%9B%86%E5%90%88%E5%85%AB%E8%82%A1%E6%96%87/index.assets/image-20240828204814043_hu534976356804002307.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;二叉树的存储结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;439px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>AOP</title>
        <link>https://example.com/p/aop/</link>
        <pubDate>Mon, 26 Aug 2024 09:52:54 +0800</pubDate>
        
        <guid>https://example.com/p/aop/</guid>
        <description>&lt;h1 id=&#34;aop&#34;&gt;AOP
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Aspect Oriented Programming，即面向切面编程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;何谓面向切面？我们对一个在 OOP 中的 BookService 的业务组件来考察，它应该会有几个业务方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;createBook&lt;/li&gt;
&lt;li&gt;updateBook&lt;/li&gt;
&lt;li&gt;deleteBook&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么，对于每个方法，我们都会需要设置安全检查、记录日志等等的公共逻辑，它们会重复的出现在各个业务方法中。在这些方法的某些代码段中就会出现重复的代码，加入把他们当作火腿肠一般并在一排，用刀切开就能够去考察这些切面了。&lt;/p&gt;
&lt;p&gt;对将这些切面如何正确的组装进火腿肠来说，有三种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在准备原料的时候就将它们按照顺序排列好，然后一次性注入进肠衣；&lt;/li&gt;
&lt;li&gt;在将原料注入到肠衣的时候，按照需要的顺序先注入一种然后再切换到另外的；&lt;/li&gt;
&lt;li&gt;业务逻辑这种原料先全部注入，然后按照需要切开再组装。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述所言是在太过抽象，也或许并不贴且，但我们可以先有较为具体的例子，再去看对应到 Java 中 AOP 将切片织入到 BookService 的具体方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译期：在编译时，由编译器把切面调用编译进字节码，这种方式需要定义新的关键字并扩展编译器，AspectJ 就扩展了 Java 编译器，使用关键字 aspect 来实现织入；&lt;/li&gt;
&lt;li&gt;类加载器：在目标类被装载到 JVM 时，通过一个特殊的类加载器，对目标类的字节码重新“增强”；&lt;/li&gt;
&lt;li&gt;运行期：目标对象和切面都是普通 Java 类，通过 JVM 的动态代理功能或者第三方库实现运行期动态织入。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spring 的 AOP 实现就是基于 JVM 的动态代理。&lt;/p&gt;
&lt;p&gt;由于JVM的动态代理要求必须实现接口，如果一个普通类没有业务接口，就需要通过&lt;a class=&#34;link&#34; href=&#34;https://github.com/cglib/cglib&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CGLIB&lt;/a&gt;或者&lt;a class=&#34;link&#34; href=&#34;https://www.javassist.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Javassist&lt;/a&gt;这些第三方库实现。&lt;/p&gt;
&lt;h2 id=&#34;装配-aop&#34;&gt;装配 AOP
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Aspect：切面，即一个横跨多个核心逻辑的功能，或者称之为系统关注点&lt;/li&gt;
&lt;li&gt;Joinpoint：连接点，即定义在应用程序流程的何处插入切面的执行&lt;/li&gt;
&lt;li&gt;Pointcut：切入点，即一组连接点的集合&lt;/li&gt;
&lt;li&gt;Advice：增强，指特定连接点上执行的动作&lt;/li&gt;
&lt;li&gt;Introduction：引介，指为一个已有的Java对象动态的增加新的接口&lt;/li&gt;
&lt;li&gt;Weaving：织入，指将切面整合到程序的执行流程中&lt;/li&gt;
&lt;li&gt;Interceptor：拦截器，是一种实现增强的方式&lt;/li&gt;
&lt;li&gt;Target Object：目标对象，即真正执行业务的核心逻辑对象&lt;/li&gt;
&lt;li&gt;AOP Proxy：AOP 代理，是客户端持有的增强后的对象引用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要实现 AOP，我们先要引入 Spring 对 AOP 的支持：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;org.springframework:spring-aspects:6.0.0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后定义一个 Aspect：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Aspect&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Component&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;LoggingAspect&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 在执行 UserService 的每个方法前执行&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Before&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;execution(public * com.gaj.demo01aop.service.UserService.*(..))&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;doAccessCheck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;[Before] do access check...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 在执行 MailService 的每个方法前后执行&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Around&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;execution(public * com.gaj.demo01aop.service.MailService.*(..))&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;doLogging&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ProceedingJoinPoint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pjp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Throwable&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;[Around] start &amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pjp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getSignature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;retval&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pjp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;proceed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;[Around] done &amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pjp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getSignature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;retval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;@Before 注解后面的字符串是告诉 AspectJ应该在何处执行该方法，这里写的意思是：执行 UserService 的每个 public 方法前执行 doAccessCheck() 代码。&lt;/p&gt;
&lt;p&gt;@Around 注解可以决定是否执行目标方法。&lt;/p&gt;
&lt;p&gt;同时还要给 @Configuration 类加上 @EnableAspectJAutoProxy 注解，这样 Spring 的 IoC容器就会自动查找带有 @Aspect 的 Bean，然后根据每个方法的 @Before、@Around 等注解把 AOP 注入到特定的 Bean 中。&lt;/p&gt;
&lt;p&gt;所以使用 AOP 的步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义执行方法，并在方法上通过 AspectJ 的注解告诉 Spring 应该在何处调用此方法；&lt;/li&gt;
&lt;li&gt;标记 @Component 和 @Aspect；&lt;/li&gt;
&lt;li&gt;在 @Configuration 类上标注 @EnableAspectJAutoProxy。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;拦截器类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;@Before&lt;/p&gt;
&lt;p&gt;先拦截代码，再执行目标代码。如果拦截器抛出异常，目标代码就不执行；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@After&lt;/p&gt;
&lt;p&gt;先执行目标代码，再执行拦截器代码。无论目标代码是否抛异常，拦截器代码都会执行；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@AfterReturning&lt;/p&gt;
&lt;p&gt;和 @After 不同的是，只有当目标代码正常返回时，才执行拦截器代码；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@AfterThrowing&lt;/p&gt;
&lt;p&gt;和 @After 不同的是，只有当目标代码正常抛出了异常时，才执行拦截器代码；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@Around&lt;/p&gt;
&lt;p&gt;能完全控制目标代码是否执行，并且可以在执行前后、抛异常后执行任意拦截代码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用注解装配-aop&#34;&gt;使用注解装配 AOP
&lt;/h2&gt;&lt;p&gt;自动装配时，因为不恰当的范围，容易导致意想不到的结果，即很多不需要AOP代理的Bean也被自动代理了，并且，后续新增的Bean，如果不清楚现有的AOP装配规则，容易被强迫装配。&lt;/p&gt;
&lt;p&gt;以监控应用程序性能为例，先定义一个性能监控的注解：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;METHOD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Retention&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RUNTIME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@interface&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MetricTime&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在需要被监控的关键方法上标注该注解&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Component&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UserService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 监控register()方法性能:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@MetricTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;register&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;register&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;然后定义切片 MetricAspect&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Aspect&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Component&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MetricAspect&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Around&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;@annotation(metricTime)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;metric&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ProceedingJoinPoint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;joinPoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MetricTime&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;metricTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Throwable&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;metricTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;joinPoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;proceed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;finally&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 写入日志或发送至JMX:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;[Metrics] &amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ms&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;@Around(&amp;quot;@annotation(metricTime)&amp;quot;) 表示符合条件的目标方法时带有 @MetricTime 注解的方法&lt;/p&gt;
&lt;h2 id=&#34;aop-避坑&#34;&gt;AOP 避坑
&lt;/h2&gt;&lt;p&gt;Spring 通过 CGLIB 动态创建的代理类生成的构造方法中，并未调用 super()，因此从成员变量并未初始化。Java 编译器虽然会默认在构造方法的第一行自动加 super()，但是， CGLIB 构造的代理类，是通过直接生成字节码，没有源码-编译-字节码的这个步骤，因此：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spring通过CGLIB创建的代理类，不会初始化代理类自身继承的任何成员变量，包括final类型的成员变量！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如何解决这个问题，需要在访问字段的代码，改成通过方法访问（用 getter 访问而不用 对象.字段直接访问字段），在代理实例中，因为代理类会覆写 getter 方法，并且将其委托给原始实例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UserService$$EnhancerBySpringCGLIB&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UserService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UserService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 原始实例&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ZoneId&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;getZoneId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getZoneId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 委托给原始实例&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果有方法是用 public + final 修饰的方法，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Component&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UserService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ZoneId&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;getFinalZoneId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zoneId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果在&lt;code&gt;MailService&lt;/code&gt;中，调用的不是&lt;code&gt;getZoneId()&lt;/code&gt;，而是&lt;code&gt;getFinalZoneId()&lt;/code&gt;，又会出现&lt;code&gt;NullPointerException&lt;/code&gt;，这是因为，代理类无法覆写&lt;code&gt;final&lt;/code&gt;方法（这一点绕不过JVM的ClassLoader检查），该方法返回的是代理类的&lt;code&gt;zoneId&lt;/code&gt;字段，即&lt;code&gt;null&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;因此，正确使用AOP，我们需要一个避坑指南：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;访问被注入的Bean时，总是调用方法而非直接访问字段；&lt;/li&gt;
&lt;li&gt;编写Bean时，如果可能会被代理，就不要编写&lt;code&gt;public final&lt;/code&gt;方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样才能保证有没有AOP，代码都能正常工作。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Cookie</title>
        <link>https://example.com/p/cookie/</link>
        <pubDate>Sun, 25 Aug 2024 08:52:54 +0800</pubDate>
        
        <guid>https://example.com/p/cookie/</guid>
        <description>&lt;img src="https://example.com/p/cookie/cookie.jpg" alt="Featured image of post Cookie" /&gt;&lt;h1 id=&#34;cookie&#34;&gt;Cookie
&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Cookie&lt;/code&gt;是另一种在Web应用中保持状态的机制，但与&lt;code&gt;session&lt;/code&gt;不同的是，&lt;code&gt;cookie&lt;/code&gt;存储在客户端，而不是服务器端。以下是&lt;code&gt;cookie&lt;/code&gt;的详细介绍：&lt;/p&gt;
&lt;h3 id=&#34;1-cookie的工作原理&#34;&gt;1. &lt;strong&gt;Cookie的工作原理&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;存储位置&lt;/strong&gt;: &lt;code&gt;cookie&lt;/code&gt;存储在客户端的浏览器中，由浏览器管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;传递机制&lt;/strong&gt;: 每次客户端发送HTTP请求时，浏览器会自动将相关的&lt;code&gt;cookie&lt;/code&gt;信息添加到请求头中发送给服务器。这些&lt;code&gt;cookie&lt;/code&gt;可以包含各种数据，如用户ID、偏好设置等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-cookie的创建和使用&#34;&gt;2. &lt;strong&gt;Cookie的创建和使用&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设置Cookie&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;服务器通过HTTP响应头中的&lt;code&gt;Set-Cookie&lt;/code&gt;指令来设置&lt;code&gt;cookie&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Cookie&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cookie&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Cookie&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cookie&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setMaxAge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 设置cookie的生命周期为1小时&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;addCookie&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cookie&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这段代码在服务器响应时，告诉客户端保存一个名为&lt;code&gt;&amp;quot;username&amp;quot;&lt;/code&gt;、值为&lt;code&gt;&amp;quot;Alice&amp;quot;&lt;/code&gt;的&lt;code&gt;cookie&lt;/code&gt;，并设定这个&lt;code&gt;cookie&lt;/code&gt;的有效期为1小时。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;读取Cookie&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;服务器可以通过&lt;code&gt;HttpServletRequest&lt;/code&gt;对象读取客户端发送的&lt;code&gt;cookie&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Cookie&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cookies&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getCookies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cookies&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Cookie&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cookies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 使用username进行后续操作&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    	&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这段代码获取客户端发送的所有&lt;code&gt;cookie&lt;/code&gt;，并从中找到名为&lt;code&gt;&amp;quot;username&amp;quot;&lt;/code&gt;的&lt;code&gt;cookie&lt;/code&gt;，然后提取其值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-cookie与session的区别&#34;&gt;3. &lt;strong&gt;Cookie与Session的区别&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;存储位置&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Session&lt;/code&gt;存储在服务器端（内存、数据库、文件等）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cookie&lt;/code&gt;存储在客户端（浏览器）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生命周期&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Session&lt;/code&gt;的生命周期通常与客户端会话相关联，且可以配置为持久化或基于时间过期。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cookie&lt;/code&gt;的生命周期由服务器通过&lt;code&gt;Max-Age&lt;/code&gt;或&lt;code&gt;Expires&lt;/code&gt;属性指定。如果不设置，&lt;code&gt;cookie&lt;/code&gt;会在浏览器关闭后失效。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全性&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Session&lt;/code&gt;数据在服务器端保存，客户端无法直接访问或篡改，安全性较高。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cookie&lt;/code&gt;数据保存在客户端，虽然可以设置为&lt;code&gt;HttpOnly&lt;/code&gt;（仅供服务器读取）或&lt;code&gt;Secure&lt;/code&gt;（仅在HTTPS下传输），但仍然容易受到客户端篡改或窃取的风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;典型用途&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Session&lt;/code&gt;通常用于存储用户的会话数据（如登录状态），在多个请求之间保持状态。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cookie&lt;/code&gt;可以用于在客户端存储小型数据，如用户偏好、会话ID等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-session与cookie的关系&#34;&gt;4. &lt;strong&gt;Session与Cookie的关系&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;通常，&lt;code&gt;session&lt;/code&gt;和&lt;code&gt;cookie&lt;/code&gt;是一起使用的。为了在多个请求之间识别用户的&lt;code&gt;session&lt;/code&gt;，服务器会创建一个&lt;code&gt;session ID&lt;/code&gt;，并通过&lt;code&gt;cookie&lt;/code&gt;发送给客户端。&lt;/li&gt;
&lt;li&gt;每次客户端发送请求时，浏览器会将&lt;code&gt;session ID&lt;/code&gt;的&lt;code&gt;cookie&lt;/code&gt;返回给服务器，服务器通过这个&lt;code&gt;session ID&lt;/code&gt;找到对应的&lt;code&gt;session&lt;/code&gt;，从而维持会话状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cookie&lt;/strong&gt;: 存储在客户端，由服务器通过&lt;code&gt;Set-Cookie&lt;/code&gt;设置。每次请求时，浏览器会自动发送相关&lt;code&gt;cookie&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Session&lt;/strong&gt;: 存储在服务器端，用于管理与特定用户的会话状态。通常通过&lt;code&gt;session ID&lt;/code&gt;来关联客户端和服务端的会话。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Cookie&lt;/code&gt;和&lt;code&gt;session&lt;/code&gt;各有其用途，通常根据应用需求选择最适合的方式来管理用户状态。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Filter &amp; DispatcherServlet &amp; Interceptor</title>
        <link>https://example.com/p/filter-dispatcherservlet-interceptor/</link>
        <pubDate>Sun, 25 Aug 2024 08:52:54 +0800</pubDate>
        
        <guid>https://example.com/p/filter-dispatcherservlet-interceptor/</guid>
        <description>&lt;h1 id=&#34;filter--dispatcherservlet--interceptor&#34;&gt;Filter &amp;amp; DispatcherServlet &amp;amp; Interceptor
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Filter 过滤器，它是 JavaEE 的 Servlet 规范提供的一种组件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在 Http 请求到达 Servlet 之前&lt;/strong&gt;，可以被一个或多个 Filter 预处理，主要是做的一些代码的&lt;strong&gt;公共逻辑&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;调用链&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;多个 Filter 是具有&lt;strong&gt;调用链&lt;/strong&gt;的存在的，每个请求都会被链上的 Filter 依次处理，需要在 web.xml 中配置它们的顺序。&lt;/p&gt;
&lt;p&gt;Filter 可以有针对性地&lt;strong&gt;拦截或者放行&lt;/strong&gt; HTTP 请求，如果在 Filter 内部直接发送重定向，且没有调用 chain.doFilter() ，后续的 Filter 就不会在处理这个请求了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DispatcherServlet 它是 MVC 框架中用来接收所有请求的 Servlet，总是映射到 /&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;DispatcherServlet 在接收到一个 Request 之后，会根据 Controller 的注解来决定调用哪个方法（需要先通过反射获取 Controller 的实例、get 或 post 方法、方法的参数类型、方法的参数名称），并获得方法返回的 ModelAndView ，或方法内部已经自行处理完毕，返回的就是 null&lt;/p&gt;
&lt;p&gt;View 使用来给模板引擎指定渲染的模板的，而 Model 是一个 Map&amp;lt;String, Object&amp;gt;，model 会由渲染引擎（如 Pebble 这类引擎）在生成模板的时候通过反射来获取数据&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Interceptor 拦截器，它是 Spring MVC 框架用于拦截 HTTP 请求的逻辑&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作用于请求到 controller 之前、controller 处理请求之后&lt;/p&gt;
&lt;p&gt;作用范围比 Filter 更小，更加精细&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Session</title>
        <link>https://example.com/p/session/</link>
        <pubDate>Sun, 25 Aug 2024 08:52:54 +0800</pubDate>
        
        <guid>https://example.com/p/session/</guid>
        <description>&lt;h1 id=&#34;session&#34;&gt;Session
&lt;/h1&gt;&lt;p&gt;session用于指代服务器将数据存储在当前用户的会话中，这个session是由&lt;strong&gt;服务端&lt;/strong&gt;保存的，具体来说，它是一个HttpSession类，我们在获取的时候是由HttpServletRequest.getSession()这样获取到当前用户的session，通过唯一表示符JSESSIONID在服务端区分。&lt;/p&gt;
&lt;p&gt;客户端只会保存JSESSIONID，服务端通过这个id查找到对应的session。&lt;/p&gt;
&lt;p&gt;服务端通过setAttribute()和getAttribute()来读或写session存储的属性及其值&lt;/p&gt;
&lt;p&gt;但是，HttpServletRequest在响应完请求后就会销毁，说明这个Session不是由HttpServletRequest，而是由tomcat的相关组件来处理的：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;org.apache.catalina.session.StandardSession&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;StandardSession&lt;/code&gt;是Tomcat中表示会话的类。每个会话对象都由这个类的一个实例表示，&lt;code&gt;StandardSession&lt;/code&gt;对象包含了会话的所有数据，包括会话ID、会话属性（如&lt;code&gt;user&lt;/code&gt;、&lt;code&gt;name&lt;/code&gt;）、创建时间、最后访问时间等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;org.apache.catalina.session.StandardManager&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;StandardManager&lt;/code&gt;是Tomcat的默认会话管理器，它负责创建、查找、删除和持久化&lt;code&gt;StandardSession&lt;/code&gt;对象。&lt;/li&gt;
&lt;li&gt;当你通过&lt;code&gt;HttpServletRequest.getSession()&lt;/code&gt;获取会话时，Tomcat实际上是通过&lt;code&gt;StandardManager&lt;/code&gt;查找或创建一个&lt;code&gt;StandardSession&lt;/code&gt;对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;org.apache.catalina.Context&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Context&lt;/code&gt;对象代表一个Web应用的上下文。在每个&lt;code&gt;Context&lt;/code&gt;对象中，有一个&lt;code&gt;Manager&lt;/code&gt;（即&lt;code&gt;StandardManager&lt;/code&gt;）实例来管理该上下文的所有会话。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;工作流程概述&#34;&gt;工作流程概述
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;创建会话&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;当客户端第一次请求并调用&lt;code&gt;HttpServletRequest.getSession()&lt;/code&gt;时，如果没有现有的会话，Tomcat会通过&lt;code&gt;StandardManager&lt;/code&gt;创建一个新的&lt;code&gt;StandardSession&lt;/code&gt;对象并返回。&lt;/li&gt;
&lt;li&gt;这个新创建的会话对象会被&lt;code&gt;StandardManager&lt;/code&gt;保存，以便在后续请求中使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;管理会话生命周期&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;StandardManager&lt;/code&gt;会定期检查会话是否过期，并销毁过期的会话。&lt;/li&gt;
&lt;li&gt;如果应用程序或服务器设置了持久化配置，&lt;code&gt;StandardManager&lt;/code&gt;还可以将会话数据序列化到文件系统中，以便在服务器重启后恢复。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;会话存储&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;默认情况下，&lt;code&gt;session&lt;/code&gt;数据存储在Tomcat服务器的内存中。&lt;code&gt;StandardManager&lt;/code&gt;会持有所有活动会话的引用，并在Tomcat运行期间负责管理它们。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;会话在tomcat中的持有者&#34;&gt;会话在Tomcat中的持有者
&lt;/h3&gt;&lt;p&gt;因此，在Tomcat中，&lt;code&gt;HttpSession&lt;/code&gt;对象是由&lt;code&gt;StandardSession&lt;/code&gt;类表示的，而这些会话对象由&lt;code&gt;StandardManager&lt;/code&gt;持有和管理。即使&lt;code&gt;HttpServletRequest&lt;/code&gt;对象被销毁，&lt;code&gt;StandardSession&lt;/code&gt;对象依然存在于&lt;code&gt;StandardManager&lt;/code&gt;中，直到会话超时或被显式销毁。&lt;/p&gt;
&lt;p&gt;如果Tomcat重启，默认情况下，保存在内存中的&lt;code&gt;session&lt;/code&gt;会消失。这意味着如果没有特殊配置，当Tomcat重新启动时，所有活跃的&lt;code&gt;session&lt;/code&gt;数据都会丢失，用户会话将被中断，用户需要重新登录或重新建立会话。&lt;/p&gt;
&lt;h3 id=&#34;持久化会话数据的方法&#34;&gt;持久化会话数据的方法
&lt;/h3&gt;&lt;p&gt;为了在Tomcat重启后保留&lt;code&gt;session&lt;/code&gt;数据，可以使用以下方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;启用&lt;code&gt;session&lt;/code&gt;持久化&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tomcat提供了会话持久化的功能，可以将&lt;code&gt;session&lt;/code&gt;数据序列化到磁盘上，并在服务器重启时重新加载。&lt;/li&gt;
&lt;li&gt;这通过&lt;code&gt;StandardManager&lt;/code&gt;的持久化机制来实现。你可以在&lt;code&gt;&amp;lt;Context&amp;gt;&lt;/code&gt;配置中启用&lt;code&gt;session&lt;/code&gt;持久化。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例配置（在&lt;code&gt;conf/context.xml&lt;/code&gt;或Web应用的&lt;code&gt;META-INF/context.xml&lt;/code&gt;中）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;Manager pathname=&amp;#34;session.ser&amp;#34;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;这里的&lt;code&gt;pathname&lt;/code&gt;属性指定了会话数据文件的路径。如果不指定路径，Tomcat将默认保存会话数据到&lt;code&gt;work&lt;/code&gt;目录下的&lt;code&gt;session.ser&lt;/code&gt;文件中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用外部持久化存储&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以将&lt;code&gt;session&lt;/code&gt;数据存储在外部数据库、Redis、Memcached等持久化存储中。通过这种方式，即使Tomcat重启，会话数据也能持久存在。&lt;/li&gt;
&lt;li&gt;这需要自定义&lt;code&gt;Manager&lt;/code&gt;类或者使用第三方的解决方案，例如使用&lt;code&gt;RedisSessionManager&lt;/code&gt;来将&lt;code&gt;session&lt;/code&gt;数据保存在Redis中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;默认情况下&lt;/strong&gt;，Tomcat重启后，&lt;code&gt;session&lt;/code&gt;数据会丢失，因为它们存储在内存中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;启用持久化&lt;/strong&gt; 或 使用 &lt;strong&gt;外部存储&lt;/strong&gt; 是保留&lt;code&gt;session&lt;/code&gt;数据的两种常见方法。如果需要在重启后保持会话，建议配置持久化或者使用外部存储机制。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>测试文章</title>
        <link>https://example.com/p/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</link>
        <pubDate>Thu, 24 Aug 2023 09:52:54 +0800</pubDate>
        
        <guid>https://example.com/p/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</guid>
        <description>&lt;img src="https://example.com/p/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87.png" alt="Featured image of post 测试文章" /&gt;&lt;h1 id=&#34;测试文章&#34;&gt;测试文章
&lt;/h1&gt;&lt;p&gt;测试内容&lt;/p&gt;
&lt;h2 id=&#34;测试-toc-自动生成目录1&#34;&gt;测试 toc 自动生成目录1
&lt;/h2&gt;&lt;h3 id=&#34;测试-toc-自动生成多级目录二级目录&#34;&gt;测试 toc 自动生成多级目录（二级目录）
&lt;/h3&gt;&lt;h4 id=&#34;测试-toc-自动生成多级目录三级目录&#34;&gt;测试 toc 自动生成多级目录（三级目录）
&lt;/h4&gt;&lt;p&gt;多级目录最多三层&lt;/p&gt;
&lt;h2 id=&#34;测试-toc-自动生成目录2&#34;&gt;测试 toc 自动生成目录2
&lt;/h2&gt;&lt;p&gt;下面是图片↓↓↓↓↓↓↓↓↓↓↓↓&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87.png&#34;
	width=&#34;307&#34;
	height=&#34;177&#34;
	srcset=&#34;https://example.com/p/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87_hu8497062828360253873.png 480w, https://example.com/p/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87_hu17531610798030627469.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;测试图片&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;173&#34;
		data-flex-basis=&#34;416px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;上面是图片↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑&lt;/p&gt;
&lt;p&gt;图片中间不能有空格&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 测试图片上传方案&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;测试代码块&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;    读取配置文件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;    使用 @PropertySource(&amp;#34;app.properties&amp;#34;) 自动读取配置文件，Spring 容器看到这个注解后，自动读取这个配置文件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Configuration&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@ComponentScan&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@PropertySource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;app.properties&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 表示读取 classpath 的 app.properties&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@PropertySource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;smtp.properties&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;AppConfig&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@SuppressWarnings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;resource&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ApplicationContext&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AnnotationConfigApplicationContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AppConfig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UserService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getBean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UserService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;login&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;bob@example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HashMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ada&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;awui&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;dawcf&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;afafds&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Entry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;entry&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;entrySet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;entry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;entry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;        注入的字符串语法
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;        1.&amp;#34;${app.zone}&amp;#34; 表示读取 key 为 app.zone 的 value，如果 key 不存在，启动将报错
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;        2.&amp;#34;${app.zone:Z}&amp;#34; 表示读取 key 为 app.zone 的 value，如果 key 不存在，就用使用默认值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;    */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ZoneId&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;createZoneId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;${app.zone:Z}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zoneId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ZoneId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zoneId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title></title>
        <link>https://example.com/p/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/</guid>
        <description>&lt;h1 id=&#34;服务配置&#34;&gt;服务配置
&lt;/h1&gt;&lt;h2 id=&#34;yum换源&#34;&gt;yum换源
&lt;/h2&gt;&lt;h2 id=&#34;portainer图形化&#34;&gt;portainer图形化
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;[Centos7 安装Docker以及图形管理界面_centos7 docker图形化界面-CSDN博客](&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/u012511080/article/details/125397630?ops_request_misc=%7B%22request%5Fid%22%3A%227B732991-8575-4B8C-AC33-80E7E45A8230%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;amp;request_id=7B732991-8575-4B8C-AC33-80E7E45A8230&amp;amp;biz_id=0&amp;amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-125397630-null-null.142%5ev100%5epc_search_result_base9&amp;amp;utm_term=centos7&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.csdn.net/u012511080/article/details/125397630?ops_request_misc=%7B%22request%5Fid%22%3A%227B732991-8575-4B8C-AC33-80E7E45A8230%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=7B732991-8575-4B8C-AC33-80E7E45A8230&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-125397630-null-null.142^v100^pc_search_result_base9&amp;utm_term=centos7&lt;/a&gt; docker 图形化&amp;amp;spm=1018.2226.3001.4187)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;itd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9000&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;docker&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;docker&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;portainer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;portainer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;portainer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;mysql&#34;&gt;mysql
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;itd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;usr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;usr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3306&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3306&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;8.0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;nacos&#34;&gt;nacos
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;nacos&lt;/p&gt;
&lt;p&gt;543428095czj&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;redis&#34;&gt;redis
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run -d --name redis -p 6379:6379 redis redis-server --requirepass redis
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;kibana&#34;&gt;kibana
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run --name kibana7.17.7 \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-e ELASTICSEARCH_HOSTS=http://38.6.165.92:9200 \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-p 5601:5601 \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-d kibana:7.17.7
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        
    </channel>
</rss>
