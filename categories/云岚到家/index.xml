<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>云岚到家 on GAJ-Blog</title>
        <link>https://example.com/categories/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/</link>
        <description>Recent content in 云岚到家 on GAJ-Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>gajzj</copyright>
        <lastBuildDate>Sun, 10 Nov 2024 16:02:00 +0800</lastBuildDate><atom:link href="https://example.com/categories/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>云岚到家</title>
        <link>https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/</link>
        <pubDate>Sun, 10 Nov 2024 16:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/</guid>
        <description>&lt;h1 id=&#34;云岚到家&#34;&gt;云岚到家
&lt;/h1&gt;&lt;h2 id=&#34;项目介绍&#34;&gt;项目介绍
&lt;/h2&gt;&lt;h3 id=&#34;项目背景&#34;&gt;项目背景
&lt;/h3&gt;&lt;p&gt;互联网+家政&lt;/p&gt;
&lt;h3 id=&#34;运营模式&#34;&gt;运营模式
&lt;/h3&gt;&lt;p&gt;B2B2C与C2B2C的区别是：B2B2C中服务提供者是家政服务中介公司，在C2B2C中是服务提供者是拥有服务技能的服务人员（散户）。&lt;/p&gt;
&lt;h3 id=&#34;业务流程&#34;&gt;业务流程
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2024/png/1169676/1708411471272-69144ed7-f8fa-48c9-9598-6c6caa85b7b6.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_28%2Ctext_5rK554K45bCP5rOi%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fformat%2Cwebp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;核心流程就是：平台发布服务项目&amp;gt;用户端选择项目并下单、支付&amp;gt;散户、机构抢单&amp;gt;实施服务&amp;gt;完成服务、评价&lt;/p&gt;
&lt;h2 id=&#34;开发区域服务模块&#34;&gt;开发区域服务模块
&lt;/h2&gt;&lt;h3 id=&#34;查询区域服务&#34;&gt;查询区域服务
&lt;/h3&gt;&lt;h4 id=&#34;接口设计&#34;&gt;接口设计
&lt;/h4&gt;&lt;p&gt;分页查询接口设计&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基础参数：pageNum、pageSize、orderBy、isAsc&lt;/li&gt;
&lt;li&gt;业务参数：动态查询的条件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;添加接口设计&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分析目标数据表中每个字段的数据来源，决定传入参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;修改接口设计&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过页面原型分析有哪些数据可以修改，然后找到表中的数据源以及和它们有关联的数据&lt;/li&gt;
&lt;li&gt;修改接口需要针对具体的某一条数据，所以肯定有id、除此之外还有各种需要更改的字段&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;客户管理&#34;&gt;客户管理
&lt;/h2&gt;&lt;h3 id=&#34;登录验证码如何区分业务类型&#34;&gt;登录验证码如何区分业务类型
&lt;/h3&gt;&lt;p&gt;用的String做key，存到redis，过期时间是5分钟&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241112104745561.png&#34;
	width=&#34;434&#34;
	height=&#34;139&#34;
	srcset=&#34;https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241112104745561_hu6372995650428578565.png 480w, https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241112104745561_hu4896460843427156462.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241112104745561&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;312&#34;
		data-flex-basis=&#34;749px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241112104813999.png&#34;
	width=&#34;411&#34;
	height=&#34;120&#34;
	srcset=&#34;https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241112104813999_hu6369788312700890884.png 480w, https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241112104813999_hu8223155841627023516.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241112104813999&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;342&#34;
		data-flex-basis=&#34;822px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;短信发送&#34;&gt;短信发送
&lt;/h3&gt;&lt;p&gt;开通短信服务&amp;gt;导入阿里的sdk&amp;gt;提供电话号码、短信签名、模板编号（有流控）&lt;/p&gt;
&lt;h3 id=&#34;机构端登录注册实现&#34;&gt;机构端登录、注册实现
&lt;/h3&gt;&lt;p&gt;机构端限定账号密码登录&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前端输入账号密码，发送请求&lt;/li&gt;
&lt;li&gt;后端校验数据完整性、正确性、是否禁用
&lt;ul&gt;
&lt;li&gt;密码匹配&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;生成token返回&lt;/li&gt;
&lt;li&gt;后续请求携带token（header中）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注册时需要提供手机号和验证码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;校验验证码
&lt;ul&gt;
&lt;li&gt;手机号、业务类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;校验当前手机号是否已经被注册&lt;/li&gt;
&lt;li&gt;密码加密方式BCrypt（B、C、rypt）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;机构账号密码找回&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;入参
&lt;ul&gt;
&lt;li&gt;手机号、业务验证码、新密码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;校验手机号账号是否存在&lt;/li&gt;
&lt;li&gt;验证码是否正确&lt;/li&gt;
&lt;li&gt;密码加密（BCrypt）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;用户端定位交互流程&#34;&gt;用户端定位交互流程
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;小程序端调用微信方法获取经纬度返回给后端&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后端调用高德地图接口返回详细信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;region表的city_code是提前从高德地图上下载的全国区域信息，转为json交由前端保存&lt;/p&gt;
&lt;p&gt;在添加区域时直接从json中展示所有的区域列表&lt;/p&gt;
&lt;h3 id=&#34;地址簿&#34;&gt;地址簿
&lt;/h3&gt;&lt;p&gt;新增地址簿&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前端调用手机定位获取当前位置&lt;/li&gt;
&lt;li&gt;然后提交经纬度获取地址的详细信息&lt;/li&gt;
&lt;li&gt;将地理位置的信息、联系人的信息一起传给新增地址接口&lt;/li&gt;
&lt;li&gt;后端执行新增地址逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查询、编辑、删除、设置默认地址&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;略&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;我的账户设置&#34;&gt;我的账户设置
&lt;/h3&gt;&lt;p&gt;跳过&lt;/p&gt;
&lt;h2 id=&#34;小程序门户-缓存&#34;&gt;小程序门户-缓存
&lt;/h2&gt;&lt;p&gt;门户的要求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动态更新&lt;/li&gt;
&lt;li&gt;加载速度快、访问频率高&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Web门户&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将门户页面生成静态页面发布到CDN服务器&lt;/li&gt;
&lt;li&gt;将静态资源也都放到&lt;strong&gt;CDN&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;html的动态数据通过异步请求后端&lt;strong&gt;缓存服务器&lt;/strong&gt;（reids）&lt;/li&gt;
&lt;li&gt;负载均衡，多个&lt;strong&gt;nginx&lt;/strong&gt;共同提供服务（高可用、高性能）&lt;/li&gt;
&lt;li&gt;前端也做缓存
&lt;ul&gt;
&lt;li&gt;LocalStorage&lt;/li&gt;
&lt;li&gt;SessionStorage&lt;/li&gt;
&lt;li&gt;Cookie&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;移动应用门户&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;缓存技术方案&#34;&gt;缓存技术方案
&lt;/h3&gt;&lt;p&gt;有哪些信息需要缓存&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首页的各种列表和列表中的不同项目&lt;/li&gt;
&lt;li&gt;热门的列表&lt;/li&gt;
&lt;li&gt;类型列表&lt;/li&gt;
&lt;li&gt;服务详细信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;spring-cache&#34;&gt;Spring Cache
&lt;/h3&gt;&lt;p&gt;集成Lettuce客户端与Redis服务器通信，基于AOP&lt;/p&gt;
&lt;p&gt;cacheManager&lt;/p&gt;
&lt;p&gt;@CacheEvict、@CachePut、@EnableCaching&lt;/p&gt;
&lt;h3 id=&#34;缓存穿透击穿雪崩&#34;&gt;缓存穿透、击穿、雪崩
&lt;/h3&gt;&lt;p&gt;穿透&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;校验、缓存空值、布隆过滤器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;击穿：热点数据失效后瞬间请求打到数据库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用锁
&lt;ul&gt;
&lt;li&gt;分布式锁控制只有一个线程与查询数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;热点数据不过期&lt;/li&gt;
&lt;li&gt;缓存预热
&lt;ul&gt;
&lt;li&gt;提前预热、定时预热&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;热点数据查询降级处理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;雪崩&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;过期时间+随机值&lt;/li&gt;
&lt;li&gt;定时预热&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;缓存不一致&#34;&gt;缓存不一致
&lt;/h3&gt;&lt;p&gt;写数据库和写缓存不一致即&lt;strong&gt;双写一致&lt;/strong&gt;（网络卡顿导致并发写的场景下写入旧值）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用分布式锁&lt;/li&gt;
&lt;li&gt;延迟双删
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;先删除缓存&lt;/strong&gt;再写数据库然后&lt;strong&gt;再次删除缓存&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;异步同步
&lt;ul&gt;
&lt;li&gt;Canal+MQ异步任务方式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;服务搜索&#34;&gt;服务搜索
&lt;/h2&gt;&lt;h3 id=&#34;服务搜索技术方案&#34;&gt;服务搜索技术方案
&lt;/h3&gt;&lt;p&gt;分词关键字搜索&lt;/p&gt;
&lt;p&gt;Elasticsearch是基于倒排索引的原理，正排索引是从文章中找词，倒排索引是根据词去找文章&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2024/jpeg/1169676/1708766787224-7366260f-49cb-4189-b153-c51c65bff3c7.jpeg?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_34%2Ctext_5rK554K45bCP5rOi%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fformat%2Cwebp%2Fresize%2Cw_937%2Climit_0%2Finterlace%2C1&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;索引同步方案&#34;&gt;索引同步方案
&lt;/h3&gt;&lt;p&gt;方案1：添加服务信息维护索引&lt;/p&gt;
&lt;p&gt;在Service方法中添加维护ES索引的代码&lt;/p&gt;
&lt;p&gt;方案2：使用Canal+MQ&lt;/p&gt;
&lt;p&gt;Mysql主从数据同步原理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;master、slave&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主从数据同步是一种数据库复制技术&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写数据先向主服务器写&lt;/li&gt;
&lt;li&gt;写成功后同步到从服务器&lt;/li&gt;
&lt;li&gt;主从数据库同步流程
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241113194338480.png&#34;
	width=&#34;944&#34;
	height=&#34;796&#34;
	srcset=&#34;https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241113194338480_hu9558839266934732661.png 480w, https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241113194338480_hu7544216915693610526.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241113194338480&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;118&#34;
		data-flex-basis=&#34;284px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Canal实现原理&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241113194456751.png&#34;
	width=&#34;834&#34;
	height=&#34;724&#34;
	srcset=&#34;https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241113194456751_hu6855926193138491222.png 480w, https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241113194456751_hu3096571901932341757.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241113194456751&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;115&#34;
		data-flex-basis=&#34;276px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;索引同步方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241113194927402.png&#34;
	width=&#34;937&#34;
	height=&#34;682&#34;
	srcset=&#34;https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241113194927402_hu5694483979435074512.png 480w, https://example.com/p/%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6/index.assets/image-20241113194927402_hu5711922681188395428.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241113194927402&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;137&#34;
		data-flex-basis=&#34;329px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在这个过程中MQ必须保证可靠性&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mq技术方案&#34;&gt;MQ技术方案
&lt;/h2&gt;&lt;h3 id=&#34;保证生产消息可靠性&#34;&gt;保证生产消息可靠性
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;本地失败重试&lt;/li&gt;
&lt;li&gt;失败消息入库（达到失败次数入库）&lt;/li&gt;
&lt;li&gt;失败消息人工处理、失败消息自动处理任务调度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2024/svg/1169676/1708767028738-d30ce85a-2065-4e62-a549-ae8b68530e74.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;14.svg&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;@Retryable注解实现执行失败进行重试&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Retryable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MqException&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 抛出指定异常时重试&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;		&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;maxAttempts&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 最大重试次数、默认三次&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;		&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backoff&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Backoff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mutiplier&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 重试等待策略（每次重试乘以系数）&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;		&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recover&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;saveFailMag&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 设置回调方法名，重试耗尽时执行&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;ConfirmCallback：消息成功投递到交换机会返回ack，失败会返回nack&lt;/p&gt;
&lt;p&gt;Return回调：消息成功到达交换机，但没到队列，调用回调方法&lt;/p&gt;
&lt;h3 id=&#34;保证消费信息可靠性&#34;&gt;保证消费信息可靠性
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设置消息持久化，发送消息设置deliveryMode = 2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;none模式下，消息投递是不可靠的，可能丢失&lt;/li&gt;
&lt;li&gt;auto模式类似事务机制，出现异常时返回nack，消息回滚到mq；没有异常，返回ack&lt;/li&gt;
&lt;li&gt;manual：自己根据业务情况，判断什么时候该ack&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动ack模式，失败重试三次后投递到失败队列&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;保证消息幂等性&#34;&gt;保证消息幂等性
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;幂等性是指不论执行多少次，其结果一致&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;针对不同场景，不同解决方案&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询操作：本身具有幂等性&lt;/li&gt;
&lt;li&gt;添加操作：有可能会重复添加记录，通过设置唯一约束老保证&lt;/li&gt;
&lt;li&gt;更新操作：更新操作应当只允许更新成功一次，使用token机制
&lt;ul&gt;
&lt;li&gt;发送消息前生成一个token写入redis，收到消息后解析出token，从redis查询token&lt;/li&gt;
&lt;li&gt;查询到则说明没有消费，此时更新，更新成功后删除token缓存&lt;/li&gt;
&lt;li&gt;当重复消费时，token会被删除，所以不会执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;删除操作：与更新类似&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置数据同步环境&#34;&gt;配置数据同步环境
&lt;/h2&gt;&lt;h2 id=&#34;索引同步&#34;&gt;索引同步
&lt;/h2&gt;</description>
        </item>
        
    </channel>
</rss>
