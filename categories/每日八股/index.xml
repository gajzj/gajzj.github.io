<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>每日八股 on GAJ-Blog</title>
        <link>https://example.com/categories/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/</link>
        <description>Recent content in 每日八股 on GAJ-Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>gajzj</copyright>
        <lastBuildDate>Sat, 09 Nov 2024 16:02:00 +0800</lastBuildDate><atom:link href="https://example.com/categories/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>每日八股</title>
        <link>https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/</link>
        <pubDate>Sat, 09 Nov 2024 16:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/</guid>
        <description>&lt;h1 id=&#34;每日八股&#34;&gt;每日八股
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本文档只记录答题思路，旨在当面试时遇到时能快速切入重点，然后灵活的组织语言回答问题。同时，为了回答的流畅性，应当尽可能的学会怎么读这些英文单词，用英文表达&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;day1&#34;&gt;day1
&lt;/h2&gt;&lt;h3 id=&#34;q1微服务你用到了那些中间件&#34;&gt;Q1：微服务你用到了那些中间件
&lt;/h3&gt;&lt;p&gt;这张图的演变能非常好的描述我们单体结构向微服务转变过程&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241109150514024.png&#34;
	width=&#34;1407&#34;
	height=&#34;532&#34;
	srcset=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241109150514024_hu3403548323223964474.png 480w, https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241109150514024_hu7738992844842760827.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241109150514024&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;264&#34;
		data-flex-basis=&#34;634px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果可以，请从&lt;strong&gt;单体向微服务架构转变&lt;/strong&gt;的思路来回答每个中间件对应的职责（跟面试官说你在公司经历过单体项目向微服务转型的过程，希望以此出发展开回答）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;单体的耦合度太高，同时无法很好的承载高并发，简单的水平拓展成本过高（也不治本），需要&lt;strong&gt;拆分服务&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;而服务与服务之间需要远程调用，需要统一的&lt;strong&gt;注册中心和配置中心&lt;/strong&gt;（人工维护太繁琐）&lt;/li&gt;
&lt;li&gt;服务于服务之间的调用，并不必须同步，可以采取引入&lt;strong&gt;消息队列&lt;/strong&gt;完成异步调用&lt;/li&gt;
&lt;li&gt;用户的请求需要统一的服务网关来路由（注意这里路由是个动词），以及负载均衡&lt;/li&gt;
&lt;li&gt;服务集群的增长，带来了更多的数据，对我们的数据、缓存有更高的挑战，所以需要&lt;strong&gt;分布式缓存、分库分表、分布式搜索&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;集群规模增大带来，debug不局限于某一台服务，需要&lt;strong&gt;分布式日志服务&lt;/strong&gt;和&lt;strong&gt;系统监控链路追踪&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;引入自动化部署（DevOps）来做到持续开发、持续交付，降低部署维护成本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有了演变过程，哪些中间件做哪些事情，自然就有了答案&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;思考一个问题：假如一个交易平台对于订单需要严格的排序，需要一个定序系统来生产一个全局唯一的序列号，请问这种情况时候还能做水平拓展？如何容灾？&lt;a class=&#34;link&#34; href=&#34;https://liaoxuefeng.com/books/java/springcloud/sequence/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;设计定序系统 - Java教程 - 廖雪峰的官方网站 (liaoxuefeng.com)&lt;/a&gt;（看文末的**如何在定序器崩溃后自动恢复？**问题，拓展抢锁）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q2nacos注册中心的心跳机制&#34;&gt;Q2：Nacos注册中心的心跳机制
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;注册中心、心跳检测（ping pong）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每个加入nacos的服务都会&lt;strong&gt;注册自己信息&lt;/strong&gt;以及&lt;strong&gt;定时拉取服务列表&lt;/strong&gt;（why？for rpc）&lt;/p&gt;
&lt;p&gt;注册到nacos的服务以及nacos本身都需要通过主动或者被动的方式维持自己的存活（&lt;strong&gt;主动上报或是主动询问&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;类似场景拓展：&lt;a class=&#34;link&#34; href=&#34;https://developer.kookapp.cn/doc/websocket&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Websocket (kookapp.cn)&lt;/a&gt;（看连接流程、重连、连接流程示意图即可）&lt;/p&gt;
&lt;h3 id=&#34;q3常见的负载均衡算法&#34;&gt;Q3：常见的负载均衡算法
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;轮询、权重、响应时间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q4threadlocal&#34;&gt;Q4：ThreadLocal
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;看成一个&lt;strong&gt;全局&lt;code&gt;Map&amp;lt;Thread, Object&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;线程池复用&lt;/strong&gt;会带来污染&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spring是否也需要&lt;/strong&gt;考虑相关问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;基本概念&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实际上，可以把&lt;code&gt;ThreadLocal&lt;/code&gt;看成一个&lt;strong&gt;全局&lt;code&gt;Map&amp;lt;Thread, Object&amp;gt;&lt;/code&gt;&lt;/strong&gt;：每个线程获取&lt;code&gt;ThreadLocal&lt;/code&gt;变量时，总是&lt;strong&gt;使用&lt;code&gt;Thread&lt;/code&gt;自身作为key&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;因此，&lt;code&gt;ThreadLocal&lt;/code&gt;相当于给每个线程都开辟了一个独立的存储空间（上下文语境，学点高级词汇），各个线程的&lt;code&gt;ThreadLocal&lt;/code&gt;关联的实例互不干扰。&lt;/p&gt;
&lt;p&gt;最后，特别注意&lt;code&gt;ThreadLocal&lt;/code&gt;一定要在&lt;code&gt;finally&lt;/code&gt;中remove！！！！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拓展（问就是看过了SpringMVC源码）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;清除非常重要，为什么？&lt;strong&gt;线程池复用&lt;/strong&gt;会带来污染&lt;/p&gt;
&lt;p&gt;再想一个问题，我们有这样的问题需要使用ThreadLocal，&lt;strong&gt;Spring是否也需要&lt;/strong&gt;？结合SpringMVC执行流程&lt;/p&gt;
&lt;p&gt;SpringMVC把每一个请求交给一个独立的线程处理，内部同样用到了线程池、ThreadLocal。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DispatcherServlet和RequestContextHolder&lt;/strong&gt;（注意context这个单词，就是内容或则说上下文的意思）&lt;/p&gt;
&lt;p&gt;RequestContextHolder会存储请求和响应的相关消息，也就是一个请求的上下文，所以毫无疑问SpringMVC同样有使用到ThreadLocal&lt;/p&gt;
&lt;h3 id=&#34;q5聚集索引和非聚集索引&#34;&gt;Q5：聚集索引和非聚集索引
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;数据和索引在一起存储&lt;/p&gt;
&lt;p&gt;数据和索引不在一起&lt;/p&gt;
&lt;p&gt;主动提及回表查询和覆盖查询、索引的维护有代价&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q6如何定位慢查询&#34;&gt;Q6：如何定位慢查询
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;注意慢查询和慢sql&lt;/p&gt;
&lt;p&gt;前端：静态资源丢失&lt;/p&gt;
&lt;p&gt;后端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;redis缓存&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MQ积压&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据库：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;慢日志&lt;/li&gt;
&lt;li&gt;explain
&lt;ul&gt;
&lt;li&gt;key&lt;/li&gt;
&lt;li&gt;key_length&lt;/li&gt;
&lt;li&gt;rows&lt;/li&gt;
&lt;li&gt;extra&lt;/li&gt;
&lt;li&gt;type&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主动提及索引失效的场景&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/968f19d0cd15f17a0275011cd61d40f.png&#34;
	width=&#34;1043&#34;
	height=&#34;655&#34;
	srcset=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/968f19d0cd15f17a0275011cd61d40f_hu3319291941357880734.png 480w, https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/968f19d0cd15f17a0275011cd61d40f_hu4864076192576903339.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;968f19d0cd15f17a0275011cd61d40f&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;382px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;q7java的map&#34;&gt;Q7：Java的Map
&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基本&lt;/p&gt;
&lt;p&gt;HashMap的七七八八，你们懂的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拓展&lt;/p&gt;
&lt;p&gt;HashMap/WeakHashMap优化枚举类预加载（弱引用、垃圾回收器）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里讲讲HashMap/WeakHashMap优化枚举类预加载&lt;/p&gt;
&lt;p&gt;首先，我们使用枚举类往往无法避免valueOf()操作，但这个操作是O(n)的，对这个操作非常常见的优化就是通过static静态代码块在类加载的时候把它们加载到一个Map中，也就是缓存，可以优化查找速度到O(1)。&lt;/p&gt;
&lt;p&gt;用WeakHashMap的原因，就是为了避免OOM（以及把面试官往JVM引导）&lt;/p&gt;
&lt;h2 id=&#34;day2&#34;&gt;day2
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;今天务必要去看一看JVM（看看，挑简单的记，复杂的记大纲），后面的时间可能很难沉下心来去理解，JVM重点关注内存模型和垃圾回收器&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://liaoxuefeng.com/books/java/design-patterns/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;设计模式 - Java教程 - 廖雪峰的官方网站 (liaoxuefeng.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://refactoringguru.cn/design-patterns/factory-method&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;工厂方法设计模式 (refactoringguru.cn)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q1gataway实现原理&#34;&gt;Q1：GataWay实现原理
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;GataWay三大作用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路由（网关就是看门老大爷）、负载（分清楚网关负载和服务调用负载的区别）、拦截（注意拦截范围和之前的拦截器更大）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现原理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring WebFlux、Netty（和传统Servlet有什么区别）&lt;/li&gt;
&lt;li&gt;结合作用讲请求到网关到具体的服务的流程&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;q2你们项目中的远程调用用的什么技术&#34;&gt;Q2：你们项目中的远程调用用的什么技术
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;务必理解当前我们的远程调用就是http请求，那么对于一个http请求我们需要封装交给httpClient发送请求并接收响应&lt;/p&gt;
&lt;p&gt;这种调用往往是同步的，我们还会需要消息队列来达成一些异步调用的操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;openFeign、底层是http客户端、dubbo&lt;/p&gt;
&lt;h3 id=&#34;q3jvm的组成&#34;&gt;Q3：JVM的组成
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;主要组成部分（不会就硬背）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;组成部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;类加载器&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行时数据区&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;方法区&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用于&lt;strong&gt;存储已被加载的类的信息&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;堆&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JVM 管理的最大的一块内存区域，被所有线程共享。&lt;strong&gt;用于存储对象实例和数组&lt;/strong&gt;，几乎所有的对象实例和数组都是在堆中&lt;strong&gt;分配内存&lt;/strong&gt;的。（和垃圾回收器有关）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;程序计数器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当前线程所执行的字节码的&lt;strong&gt;行号指示器&lt;/strong&gt;（学过计组的话会有类似概念）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;虚拟机栈&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行引擎&lt;/p&gt;
&lt;p&gt;两种执行方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;解释执行&lt;/strong&gt;：一条一条地读取字节码指令并执行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;即时编译&lt;/strong&gt;：将热点代码编译成机器码，提高执行效率&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：在一个简单的 Java 循环语句中，刚开始执行时可能是通过解释执行，当循环执行次数足够多，被判定为热点代码后，执行引擎就会对这个循环部分进行即时编译，之后再执行这个循环时就会以更快的机器码形式执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本地库接口&lt;/p&gt;
&lt;p&gt;使得Java能调用Native Method Library（java源码中如果见到native往往指的就是c相关的东西）中的函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;该文章在字节码的层面分析了异常处理，可以看看，作为了解JVM的一个开头&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.aliyun.com/article/1182650&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java异常处理和最佳实践（含案例分析）-阿里云开发者社区 (aliyun.com)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q4类加载机制ai来的详情大家自己ai&#34;&gt;Q4：类加载机制(AI来的，详情大家自己ai)
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;五个过程、三种类加载器（简称五过三类），不行就背小标题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;五个过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;加载（loading）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查找并读取类的字节码文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;三个加载器&lt;/p&gt;
&lt;p&gt;双亲委派模型（&lt;strong&gt;避免用户自定义的类覆盖Java核心类库的类&lt;/strong&gt;）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类加载器收到类加载请求时先找它的父类加载器，再找子加载器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;验证（verification）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;确保符合 Java 虚拟机规范&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;准备（preparation）&lt;/p&gt;
&lt;p&gt;为类的&lt;strong&gt;静态变量分配内存&lt;/strong&gt;并设置初始值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解析（resolution）&lt;/p&gt;
&lt;p&gt;将类、方法、字段等的符号引用&lt;strong&gt;转换为直接引用&lt;/strong&gt;（便于快速访问）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化（initialization）&lt;/p&gt;
&lt;p&gt;主要是执行类的&lt;strong&gt;初始化代码&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三种类加载器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;启动类加载器（&lt;strong&gt;JVM的启动&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;JVM内置，负责加载Java核心类库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拓展类加载器&lt;/p&gt;
&lt;p&gt;负责加载拓展类库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用程序类加载器&lt;/p&gt;
&lt;p&gt;负责加载classpath下的类&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;q5垃圾回收器有哪些你们项目用的是什么&#34;&gt;Q5：垃圾回收器有哪些，你们项目用的是什么
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;G1、CMS，我们用的G1&lt;/p&gt;
&lt;p&gt;1.9开始默认是G1&lt;/p&gt;
&lt;p&gt;先了解GC相关的概念如：FullGC、YoungGC、分代收集、STW&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要了解相关配置参数如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-XX:G1HeapRegionSize=n&lt;/strong&gt;指定分区大小&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-XX:G1NewSizePercent&lt;/strong&gt;设置年轻代在堆中占比&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-XX:MaxGCPauseMillis&lt;/strong&gt;指定回收时最大暂停时间（G1和CMS不同的点很大程度在于G1是规定时间内尽力完成回收：软实时性）这是&lt;strong&gt;最重要的参数之一&lt;/strong&gt;（只记一个那就记这个）&lt;/li&gt;
&lt;li&gt;。。。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分代收集算法（见3.4.4 分代收集算法，先了解，明天背）&lt;/p&gt;
&lt;h3 id=&#34;q6jvm内存模型jmm&#34;&gt;Q6：JVM内存模型（JMM）
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.aliyun.com/article/1586039?spm=a2c6h.14164896.0.0.2a9847c5YKHm42&amp;amp;scm=20140722.S_community@@%e6%96%87%e7%ab%a0@@1586039._.ID_1586039-RL_JMM-LOC_search~UND~community~UND~item-OR_ser-V_4-P0_5&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JUC（8）JMM-阿里云开发者社区 (aliyun.com)&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;俩内存、三关键字&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;主内存&lt;/p&gt;
&lt;p&gt;线程共享&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;工作内存&lt;/p&gt;
&lt;p&gt;线程独有，存储对共享变量的&lt;strong&gt;副本&lt;/strong&gt;（注意是副本）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指令重排序导致数据不一致&lt;/p&gt;
&lt;p&gt;使用volatile修饰变量，&lt;strong&gt;确保变量的修改立即对其他线程可见&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;day3&#34;&gt;day3
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;看设计模式，有时间看看springMVC源码&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://liaoxuefeng.com/books/java/web/mvc-adv/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MVC高级开发 - Java教程 - 廖雪峰的官方网站 (liaoxuefeng.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis面试题选自航哥面试专题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q1docker部署和常用指令&#34;&gt;Q1：Docker部署和常用指令
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;部署：dockerfile和dockercompose&lt;/p&gt;
&lt;p&gt;镜像、容器、数据卷、dockerfile、dockercompose&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;镜像pull、push，docker images，还有docker rmi；还有容器相关的docker run，docker start、docker stop，进入容器的&lt;strong&gt;docker exec -it&lt;/strong&gt; 容器名称 bash，查看日志的&lt;strong&gt;docker logs。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;q2linux指令&#34;&gt;Q2：linux指令
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;chmod、cat info.log | grep &amp;lsquo;关键字&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q3都有哪些设计模式用过哪些具体场景&#34;&gt;Q3：都有哪些设计模式，用过哪些，具体场景？
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;经典的面向对象设计模式：三大类型、23种&lt;/p&gt;
&lt;p&gt;还有领域驱动模型（DDD）：先当成思想和沟通语言去理解（通用语言和限界上下文）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.aliyun.com/article/1583387?spm=a2c6h.14164896.0.0.c8e547c5LlXN3S&amp;amp;scm=20140722.S_community@@%e6%96%87%e7%ab%a0@@1583387._.ID_1583387-RL_DDD-LOC_search~UND~community~UND~item-OR_ser-V_4-P0_19&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DDD基础教程：一文带你读懂DDD分层架构-阿里云开发者社区 (aliyun.com)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;创建型模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工厂模式&lt;/li&gt;
&lt;li&gt;原型&lt;/li&gt;
&lt;li&gt;单例&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结构型模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;适配器&lt;/li&gt;
&lt;li&gt;代理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;行为型模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;责任链（filter）&lt;/p&gt;
&lt;p&gt;责任链模式是一种把多个处理器组合在一起，依次处理请求的模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命令&lt;/p&gt;
&lt;p&gt;把请求封装成一个命令，然后执行该命令。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解释器&lt;/p&gt;
&lt;p&gt;给定一个语言，定义它的&lt;strong&gt;文法&lt;/strong&gt;的一种表示，并定义一个解释器，这个解释器使用该表示来&lt;strong&gt;解释语言中的句子&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;中介&lt;/p&gt;
&lt;p&gt;目的是把多方会谈变成双方会谈，从而实现多方的松耦合。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;观察者模式（发布订阅模式）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;模板方法（template）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DDD&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;了解的不多，但可以在开发和沟通的时候带着领域驱动思想去帮助我思考问题，比如&lt;/li&gt;
&lt;li&gt;通用语言：规定整个项目组（包括开发和产品）当前项目的名词（比如zzyl的PRD的前几页有对护理等级的定义和解释），帮助项目组&lt;strong&gt;提高沟通效率&lt;/strong&gt;（但学习成本相应地提高）&lt;/li&gt;
&lt;li&gt;限界上下文：限界上下文是一个显式的语义和语境上的边界，领域模型便存在于边界之内。&lt;/li&gt;
&lt;li&gt;聚合、聚合根：&lt;/li&gt;
&lt;li&gt;充血模型、贫血模型&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;总的来说DDD不是我们现阶段需要重点关注的，但是能够带着它的思想去开发、分析需求绝对是能体现出个人开发经验的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q4redis数据类型&#34;&gt;Q4：Redis数据类型
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;结合自己业务说，如：云岚面试第八章抢券业务的Redis数据结构用的什么？具体说说&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q5redis三剑客以及如何解决&#34;&gt;Q5：Redis三剑客以及如何解决
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;击穿、穿透、雪崩&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://cloud.tencent.com/developer/article/2407203&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;不用背八股文！一文搞懂redis缓存击穿、穿透、雪崩！-腾讯云开发者社区-腾讯云 (tencent.com)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;击穿：（热点数据过期导致大量请求直接打到数据库）
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;热点数据&lt;/strong&gt;即将过期时，提前异步更新缓存&lt;/li&gt;
&lt;li&gt;设置热点数据永不过期（谨慎使用）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;穿透：（查询一个数据库不存在的值导致每次都要查询数据库，恶意请求）
&lt;ul&gt;
&lt;li&gt;缓存空值&lt;/li&gt;
&lt;li&gt;布隆过滤器，底层是bitmap（查询数据时，先通过布隆过滤器判断键是否可能存在，如果不存在就直接返回空值）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;雪崩：短时间大量的key同时失效
&lt;ul&gt;
&lt;li&gt;key：固定+随机时间&lt;/li&gt;
&lt;li&gt;缓存预热&lt;/li&gt;
&lt;li&gt;redis架构升级&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;q6redis数据持久化&#34;&gt;Q6：Redis数据持久化
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;RDB和AOF&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;RDB&lt;/p&gt;
&lt;p&gt;对redis生成快照（二进制文件），非常快，但有数据丢失风险&lt;/p&gt;
&lt;p&gt;AOF&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将每个写命令追加到AOF文件末尾，恢复时重新执行这些命令&lt;/li&gt;
&lt;li&gt;同步策略
&lt;ul&gt;
&lt;li&gt;always&lt;/li&gt;
&lt;li&gt;everysec（默认这个）&lt;/li&gt;
&lt;li&gt;no&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;q7redis集群方案&#34;&gt;Q7：redis集群方案
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;主从复制、哨兵模式、分片&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;主从：降低读写压力&lt;/p&gt;
&lt;p&gt;哨兵模式：故障恢复（这里有个哨兵选举流程需要展开）&lt;/p&gt;
&lt;p&gt;分片：提高存储上限（hash插槽分配原理）&lt;/p&gt;
&lt;h3 id=&#34;q8springmvc执行流程和常用注解&#34;&gt;Q8：springmvc执行流程和常用注解
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;结合d1q4的拓展点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;day4&#34;&gt;day4
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;看MQ、云岚秒杀、优惠卷&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q1什么场景下你们用mq&#34;&gt;Q1：什么场景下你们用MQ
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;其实就是是否理解异步和同步，以及有它的优点&lt;/p&gt;
&lt;p&gt;扯到异步调用的时候可以去带过一下其他的消息中间件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同步&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113145604595.png&#34;
	width=&#34;900&#34;
	height=&#34;493&#34;
	srcset=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113145604595_hu12931243403802827944.png 480w, https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113145604595_hu16899941488563117361.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241113145604595&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;438px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;异步&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113145632572.png&#34;
	width=&#34;1012&#34;
	height=&#34;359&#34;
	srcset=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113145632572_hu2933011480670642604.png 480w, https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113145632572_hu15731027870915228808.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241113145632572&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;281&#34;
		data-flex-basis=&#34;676px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;异步通信优点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;耦合度低&lt;/li&gt;
&lt;li&gt;吞吐量提升&lt;/li&gt;
&lt;li&gt;故障隔离&lt;/li&gt;
&lt;li&gt;流量削峰&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;依赖于Broker（消息服务器）的可靠性、安全性、吞吐能力&lt;/li&gt;
&lt;li&gt;架构复杂了，业务没有明显的流程线，不好追踪管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;q2你们项目为什么用mq&#34;&gt;Q2：你们项目为什么用MQ
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113145957459.png&#34;
	width=&#34;970&#34;
	height=&#34;382&#34;
	srcset=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113145957459_hu15905244567374609702.png 480w, https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113145957459_hu2657717627631594184.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241113145957459&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;253&#34;
		data-flex-basis=&#34;609px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;q3mq有哪几种交换机模式你们用的哪种&#34;&gt;Q3：MQ有哪几种交换机模式，你们用的哪种
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;FanoutExchanage&lt;/li&gt;
&lt;li&gt;DirectExchanage&lt;/li&gt;
&lt;li&gt;TopicExchanage&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;q4mq如何保证消息不丢失&#34;&gt;Q4：MQ如何保证消息不丢失
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;分为三种情况，发送端、MQ自己、消费端&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.yuque.com/yzxb/index/uhwxnv0n5wcmd226&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;6-MQ篇 (yuque.com)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;发布者确认机制&lt;/li&gt;
&lt;li&gt;发布者回执机制&lt;/li&gt;
&lt;li&gt;MQ持久化&lt;/li&gt;
&lt;li&gt;消费者确认机制，消费者失败重试机制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进一步的放丢失方案&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113151009061.png&#34;
	width=&#34;959&#34;
	height=&#34;292&#34;
	srcset=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113151009061_hu12670985402470632247.png 480w, https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113151009061_hu6009523065227154668.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241113151009061&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;328&#34;
		data-flex-basis=&#34;788px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;q5消息积压如何解决&#34;&gt;Q5：消息积压如何解决
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;提高消费能力&lt;/li&gt;
&lt;li&gt;增加消费者&lt;/li&gt;
&lt;li&gt;扩大队列容积（LazyQueue）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;q6rabbitmq如何保证消费的顺序性-&#34;&gt;Q6：RabbitMQ如何保证消费的顺序性 ?
&lt;/h3&gt;&lt;h3 id=&#34;q7springioc&#34;&gt;Q7：SpringIOC
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;IOC的俩种实现&lt;/p&gt;
&lt;p&gt;相关问题：Bean的生命周期&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;BeanFactory&lt;/li&gt;
&lt;li&gt;ApplicationContext&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;q8springaop&#34;&gt;Q8：SpringAOP
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;CGLIB和JDK的动态代理&lt;/p&gt;
&lt;p&gt;相关问题：AOP相关注解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q9三级缓存循环依赖&#34;&gt;Q9：三级缓存（循环依赖）
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Spring三级缓存主要是为了优雅的解决循环依赖的问题，同时也能通过缓存提高性能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一级缓存&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储&lt;strong&gt;完全初始化好的单例bean&lt;/strong&gt;（已经注入所有的属性，完成初始化方法的操作）&lt;/li&gt;
&lt;li&gt;是一个ConcurrentHashMap&amp;lt;String, Object&amp;gt;，Key是Bean名称，Value是Bean实例&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二级缓存&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储早期创建的单例bean，&lt;strong&gt;还没有完成所有的初始化&lt;/strong&gt;，但已经可以被其他bean引用。&lt;/li&gt;
&lt;li&gt;数据结构同一级缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三级缓存&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储的是创建Bean的工厂对象&lt;/li&gt;
&lt;li&gt;数据结构是一个ConcurrentHashMap&amp;lt;String, Object&amp;gt;，键是 Bean 的名称，值是&lt;code&gt;ObjectFactory&lt;/code&gt;对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以&lt;strong&gt;一个例子来说明三级缓存的执行流程&lt;/strong&gt;：Bean A、Bean B存在A依赖B，B依赖A的情况，此时&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A的创建过程
&lt;ul&gt;
&lt;li&gt;Spring开始创建A的时候，会先检查&lt;strong&gt;一级缓存&lt;/strong&gt;，发现没有A，然后开始实例化A（&lt;strong&gt;调用A的构造函数&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;实例化A后，发现A存在循环依赖的问题，于是把&lt;strong&gt;A的工厂对象放入三级缓存&lt;/strong&gt;中&lt;/li&gt;
&lt;li&gt;然后Spring给A注入属性，发现需要注入B（且三级缓存中没有B的工厂对象），就暂停A的创建，开始创建B&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;B的创建
&lt;ul&gt;
&lt;li&gt;创建B时，先看&lt;strong&gt;一级缓存&lt;/strong&gt;，没有，调用构造函数实例化&lt;/li&gt;
&lt;li&gt;返现B循环依赖，把B的工&lt;strong&gt;厂对象放入三级缓存&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;当给B注入属性时，发现需要A，就去一级缓存找，没有就找二级缓存，也没有就找到三级缓存中A的工厂对象，通过这个工厂对象获取A的早期实例，然后将A放入二级缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;此时B完成创建，放入一级缓存&lt;/li&gt;
&lt;li&gt;回到A，A从一级缓存中拿到B，完成创建，放入一级缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;简单来说，就是B拿了个A的套壳，完成了创建放入一级缓存，然后A就能顺利创建，此时B拿的A也完成了创建&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;q10设计模式&#34;&gt;Q10：设计模式
&lt;/h3&gt;&lt;h3 id=&#34;q11事务失效场景&#34;&gt;Q11：事务失效场景
&lt;/h3&gt;&lt;h3 id=&#34;q12mq消息可靠性&#34;&gt;Q12：MQ消息可靠性
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113202043738.png&#34;
	width=&#34;987&#34;
	height=&#34;674&#34;
	srcset=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113202043738_hu3121173068814285928.png 480w, https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241113202043738_hu10766936849562874345.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241113202043738&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;146&#34;
		data-flex-basis=&#34;351px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;q13消息幂等性&#34;&gt;Q13：消息幂等性
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;参照本博客云岚到家的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;q1：服务保护&lt;/p&gt;
&lt;p&gt;Sentinel、GateWay、MQ削峰填谷&lt;/p&gt;
&lt;p&gt;q2：用什么做单元测试&lt;/p&gt;
&lt;p&gt;Junit、MockITO&lt;/p&gt;
&lt;h2 id=&#34;day5&#34;&gt;day5
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;还是MQ+点赞&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q1怎么保证mq消息不丢失&#34;&gt;Q1：怎么保证MQ消息不丢失
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;三个点&lt;/p&gt;
&lt;p&gt;额外的保证，失败消息落库，定时任务重投，超过重投次数转人工&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;生产者确认机制（每个消息指定为一ID）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;publish-confirm：消息是否到交换机&lt;/li&gt;
&lt;li&gt;publish-return：消息是否到队列&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MQ消息持久化防止MQ宕机&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MQ自身做了队列持久化、消息持久化、交换机持久化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;消费者确认机制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;消费者&lt;strong&gt;获取消息并处理消息&lt;/strong&gt;后发送ACK回执
&lt;ul&gt;
&lt;li&gt;一般auto ack，spring根据是否有异常帮我们决定是ack还是nack&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;q2了解过mq的延迟消息吗&#34;&gt;Q2：了解过MQ的延迟消息吗
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;延迟消息通过官方插件可以实现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;过去我们做过一些&lt;strong&gt;取消超时订单&lt;/strong&gt;的业务场景有实施过这个方案&lt;/p&gt;
&lt;h3 id=&#34;q3那你讲讲取消超时订单的方案&#34;&gt;Q3：那你讲讲取消超时订单的方案
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;RabbitMQ延迟消息、redis过期时间、定时任务（xxljob）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于RabbitMQ延迟消息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建订单时，发送一个带有延迟时间的消息到mq的延迟队列，&lt;strong&gt;当延迟时间结束，就会把消息投到对应的目标队列&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于redis过期时间的方案&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;redis的键可以设置过期时间。&lt;strong&gt;当订单创建的时候&lt;/strong&gt;，以订单ID为键存到redis。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;当键过期时&lt;/strong&gt;，通过redis的过期回调机制、或者定时扫描过期键的方式来触发取消订单的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;xxljob定时任务操订单表，查是否超时，触发取消逻辑&lt;/p&gt;
&lt;p&gt;还可以懒加载的形式触发取消&lt;/p&gt;
&lt;h3 id=&#34;q4如何解决消息积压&#34;&gt;Q4：如何解决消息积压
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;提高消费速度，增加更多消费者&lt;/li&gt;
&lt;li&gt;扩容（最终方案）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;q5redis的set和zset&#34;&gt;Q5：redis的set和zset
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;通过这个问题去了解set和zset的数据结构如何&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;reidis的set：以商品id为key，value存的是点赞用户的id，也是就是说，一个商品id对应一个set，set里面包含多个userid表示给这个商品点赞的用户，这样就是实现了不重复。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241114170338964.png&#34;
	width=&#34;732&#34;
	height=&#34;217&#34;
	srcset=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241114170338964_hu8965381684585442403.png 480w, https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241114170338964_hu14644127139112320381.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114170338964&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;337&#34;
		data-flex-basis=&#34;809px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;redis的zset：以点赞为例子，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有给文章点赞的，有给评论点赞的，一个点赞类型对应一个zset，key就是：like:wz(业务也是就点赞+类型也就是文章)&lt;/li&gt;
&lt;li&gt;以文章的点赞为例，有多个文章，那么zset的member就存的是文章id，score就是它的点赞数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241114170350123.png&#34;
	width=&#34;748&#34;
	height=&#34;235&#34;
	srcset=&#34;https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241114170350123_hu14685443581975736989.png 480w, https://example.com/p/%E6%AF%8F%E6%97%A5%E5%85%AB%E8%82%A1/index.assets/image-20241114170350123_hu7544475994254060718.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114170350123&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;318&#34;
		data-flex-basis=&#34;763px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;q6&#34;&gt;Q6：
&lt;/h3&gt;</description>
        </item>
        
    </channel>
</rss>
